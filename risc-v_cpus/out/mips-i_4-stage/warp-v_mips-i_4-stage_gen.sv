// Generated by SandPiper(TM) 1.9-2018/02/11-beta from Redwood EDA.
// Redwood EDA does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


`include "sandpiper_gen.vh"


genvar bank, mem, regs, src;


//
// Signals declared top-level.
//

// For |fetch/instr$BranchState.
logic [1:0] FETCH_Instr_BranchState_a1,
            FETCH_Instr_BranchState_a2;
logic [1:1] FETCH_Instr_BranchState_a3;

// For |fetch/instr$Cnt.
logic [7:0] FETCH_Instr_Cnt_n2,
            FETCH_Instr_Cnt_n1;

// For |fetch/instr$GoodPathMask.
logic [3+1:0] FETCH_Instr_GoodPathMask_n1,
              FETCH_Instr_GoodPathMask_a0;
logic [3+1:1] FETCH_Instr_GoodPathMask_a1;

// For |fetch/instr$NoFetch.
logic FETCH_Instr_NoFetch_n1,
      FETCH_Instr_NoFetch_a0,
      FETCH_Instr_NoFetch_a1,
      FETCH_Instr_NoFetch_a2,
      FETCH_Instr_NoFetch_a3;

// For |fetch/instr$Pc.
logic [31:2] FETCH_Instr_Pc_n1,
             FETCH_Instr_Pc_a0,
             FETCH_Instr_Pc_a1,
             FETCH_Instr_Pc_a2,
             FETCH_Instr_Pc_a3;

// For |fetch/instr$ReachedEnd.
logic FETCH_Instr_ReachedEnd_a2,
      FETCH_Instr_ReachedEnd_a3;

// For |fetch/instr$Reg4Became45.
logic FETCH_Instr_Reg4Became45_a2,
      FETCH_Instr_Reg4Became45_a3;

// For |fetch/instr$abort.
logic FETCH_Instr_abort_a2;

// For |fetch/instr$aborting_isa_trap.
logic FETCH_Instr_aborting_isa_trap_a2;

// For |fetch/instr$aborting_trap.
logic FETCH_Instr_aborting_trap_a2,
      FETCH_Instr_aborting_trap_a3;

// For |fetch/instr$add_sub_rslt.
logic [31:0] FETCH_Instr_add_sub_rslt_a2;

// For |fetch/instr$addr.
logic [31:0] FETCH_Instr_addr_a2,
             FETCH_Instr_addr_a3;

// For |fetch/instr$branch.
logic FETCH_Instr_branch_a1,
      FETCH_Instr_branch_a2;

// For |fetch/instr$branch_or_jump.
logic FETCH_Instr_branch_or_jump_a1,
      FETCH_Instr_branch_or_jump_a2;

// For |fetch/instr$branch_or_reset.
logic FETCH_Instr_branch_or_reset_a2,
      FETCH_Instr_branch_or_reset_a3;

// For |fetch/instr$branch_redir_pc.
logic [31:2] FETCH_Instr_branch_redir_pc_a2;

// For |fetch/instr$branch_target.
logic [31:2] FETCH_Instr_branch_target_a1,
             FETCH_Instr_branch_target_a2;

// For |fetch/instr$commit.
logic FETCH_Instr_commit_a2,
      FETCH_Instr_commit_a3;

// For |fetch/instr$compare_rslt.
logic [31:0] FETCH_Instr_compare_rslt_a2;

// For |fetch/instr$conditional_branch.
logic FETCH_Instr_conditional_branch_a1,
      FETCH_Instr_conditional_branch_a2;

// For |fetch/instr$decode_valid_indirect_jump.
logic FETCH_Instr_decode_valid_indirect_jump_a1,
      FETCH_Instr_decode_valid_indirect_jump_a2;

// For |fetch/instr$decode_valid_jump.
logic FETCH_Instr_decode_valid_jump_a1;

// For |fetch/instr$dest_pending.
logic FETCH_Instr_dest_pending_a1;

// For |fetch/instr$dest_reg.
logic [4:0] FETCH_Instr_dest_reg_a1,
            FETCH_Instr_dest_reg_a2,
            FETCH_Instr_dest_reg_a3;

// For |fetch/instr$dest_reg_valid.
logic FETCH_Instr_dest_reg_valid_a1,
      FETCH_Instr_dest_reg_valid_a2,
      FETCH_Instr_dest_reg_valid_a3;

// For |fetch/instr$div_mul.
logic FETCH_Instr_div_mul_a1,
      FETCH_Instr_div_mul_a2;

// For |fetch/instr$equal.
logic FETCH_Instr_equal_a2;

// For |fetch/instr$equal_zero.
logic FETCH_Instr_equal_zero_a2;

// For |fetch/instr$failed.
logic FETCH_Instr_failed_a3;

// For |fetch/instr$fetch.
logic FETCH_Instr_fetch_a0,
      FETCH_Instr_fetch_a1;

// For |fetch/instr$gtz.
logic FETCH_Instr_gtz_a2;

// For |fetch/instr$illegal.
logic FETCH_Instr_illegal_a1,
      FETCH_Instr_illegal_a2,
      FETCH_Instr_illegal_a3;

// For |fetch/instr$imm_value.
logic [31:0] FETCH_Instr_imm_value_a1,
             FETCH_Instr_imm_value_a2;

// For |fetch/instr$indirect_jump.
logic FETCH_Instr_indirect_jump_a1,
      FETCH_Instr_indirect_jump_a2;

// For |fetch/instr$indirect_jump_target.
logic [31:2] FETCH_Instr_indirect_jump_target_a2;

// For |fetch/instr$is_add.
logic FETCH_Instr_is_add_a1,
      FETCH_Instr_is_add_a2;

// For |fetch/instr$is_add_sub.
logic FETCH_Instr_is_add_sub_a2;

// For |fetch/instr$is_addi.
logic FETCH_Instr_is_addi_a1,
      FETCH_Instr_is_addi_a2;

// For |fetch/instr$is_addiu.
logic FETCH_Instr_is_addiu_a1,
      FETCH_Instr_is_addiu_a2;

// For |fetch/instr$is_addu.
logic FETCH_Instr_is_addu_a1,
      FETCH_Instr_is_addu_a2;

// For |fetch/instr$is_and.
logic FETCH_Instr_is_and_a1,
      FETCH_Instr_is_and_a2;

// For |fetch/instr$is_andi.
logic FETCH_Instr_is_andi_a1,
      FETCH_Instr_is_andi_a2;

// For |fetch/instr$is_beq.
logic FETCH_Instr_is_beq_a1,
      FETCH_Instr_is_beq_a2;

// For |fetch/instr$is_bgez.
logic FETCH_Instr_is_bgez_a1,
      FETCH_Instr_is_bgez_a2;

// For |fetch/instr$is_bgezal.
logic FETCH_Instr_is_bgezal_a1,
      FETCH_Instr_is_bgezal_a2;

// For |fetch/instr$is_bgtz.
logic FETCH_Instr_is_bgtz_a1,
      FETCH_Instr_is_bgtz_a2;

// For |fetch/instr$is_blez.
logic FETCH_Instr_is_blez_a1,
      FETCH_Instr_is_blez_a2;

// For |fetch/instr$is_bltz.
logic FETCH_Instr_is_bltz_a1,
      FETCH_Instr_is_bltz_a2;

// For |fetch/instr$is_bltzal.
logic FETCH_Instr_is_bltzal_a1,
      FETCH_Instr_is_bltzal_a2;

// For |fetch/instr$is_bne.
logic FETCH_Instr_is_bne_a1,
      FETCH_Instr_is_bne_a2;

// For |fetch/instr$is_break.
logic FETCH_Instr_is_break_a1,
      FETCH_Instr_is_break_a2;

// For |fetch/instr$is_compare.
logic FETCH_Instr_is_compare_a2;

// For |fetch/instr$is_dest_condition.
logic FETCH_Instr_is_dest_condition_a1;

// For |fetch/instr$is_j.
logic FETCH_Instr_is_j_a1;

// For |fetch/instr$is_jal.
logic FETCH_Instr_is_jal_a1;

// For |fetch/instr$is_jalr.
logic FETCH_Instr_is_jalr_a1,
      FETCH_Instr_is_jalr_a2;

// For |fetch/instr$is_jr.
logic FETCH_Instr_is_jr_a1,
      FETCH_Instr_is_jr_a2;

// For |fetch/instr$is_lbu.
logic FETCH_Instr_is_lbu_a1,
      FETCH_Instr_is_lbu_a2,
      FETCH_Instr_is_lbu_a3;

// For |fetch/instr$is_lh.
logic FETCH_Instr_is_lh_a1;

// For |fetch/instr$is_lhu.
logic FETCH_Instr_is_lhu_a1,
      FETCH_Instr_is_lhu_a2,
      FETCH_Instr_is_lhu_a3;

// For |fetch/instr$is_logical.
logic FETCH_Instr_is_logical_a2;

// For |fetch/instr$is_lui.
logic FETCH_Instr_is_lui_a1,
      FETCH_Instr_is_lui_a2;

// For |fetch/instr$is_nor.
logic FETCH_Instr_is_nor_a1,
      FETCH_Instr_is_nor_a2;

// For |fetch/instr$is_or.
logic FETCH_Instr_is_or_a1,
      FETCH_Instr_is_or_a2;

// For |fetch/instr$is_ori.
logic FETCH_Instr_is_ori_a1,
      FETCH_Instr_is_ori_a2;

// For |fetch/instr$is_sh.
logic FETCH_Instr_is_sh_a1;

// For |fetch/instr$is_shift.
logic FETCH_Instr_is_shift_a2;

// For |fetch/instr$is_sll.
logic FETCH_Instr_is_sll_a1,
      FETCH_Instr_is_sll_a2;

// For |fetch/instr$is_sllv.
logic FETCH_Instr_is_sllv_a1,
      FETCH_Instr_is_sllv_a2;

// For |fetch/instr$is_slt.
logic FETCH_Instr_is_slt_a1,
      FETCH_Instr_is_slt_a2;

// For |fetch/instr$is_slti.
logic FETCH_Instr_is_slti_a1,
      FETCH_Instr_is_slti_a2;

// For |fetch/instr$is_sltiu.
logic FETCH_Instr_is_sltiu_a1,
      FETCH_Instr_is_sltiu_a2;

// For |fetch/instr$is_sltu.
logic FETCH_Instr_is_sltu_a1,
      FETCH_Instr_is_sltu_a2;

// For |fetch/instr$is_sra.
logic FETCH_Instr_is_sra_a1,
      FETCH_Instr_is_sra_a2;

// For |fetch/instr$is_srav.
logic FETCH_Instr_is_srav_a1,
      FETCH_Instr_is_srav_a2;

// For |fetch/instr$is_srl.
logic FETCH_Instr_is_srl_a1,
      FETCH_Instr_is_srl_a2;

// For |fetch/instr$is_srlv.
logic FETCH_Instr_is_srlv_a1,
      FETCH_Instr_is_srlv_a2;

// For |fetch/instr$is_sub.
logic FETCH_Instr_is_sub_a1,
      FETCH_Instr_is_sub_a2;

// For |fetch/instr$is_subu.
logic FETCH_Instr_is_subu_a1,
      FETCH_Instr_is_subu_a2;

// For |fetch/instr$is_syscall.
logic FETCH_Instr_is_syscall_a1,
      FETCH_Instr_is_syscall_a2;

// For |fetch/instr$is_xor.
logic FETCH_Instr_is_xor_a1,
      FETCH_Instr_is_xor_a2;

// For |fetch/instr$is_xori.
logic FETCH_Instr_is_xori_a1,
      FETCH_Instr_is_xori_a2;

// For |fetch/instr$itype.
logic FETCH_Instr_itype_a1;

// For |fetch/instr$jtype.
logic FETCH_Instr_jtype_a1,
      FETCH_Instr_jtype_a2;

// For |fetch/instr$jump.
logic FETCH_Instr_jump_a1,
      FETCH_Instr_jump_a2;

// For |fetch/instr$jump_target.
logic [31:2] FETCH_Instr_jump_target_a1,
             FETCH_Instr_jump_target_a2;

// For |fetch/instr$ld.
logic FETCH_Instr_ld_a1,
      FETCH_Instr_ld_a2;

// For |fetch/instr$ld_rslt.
logic [31:0] FETCH_Instr_ld_rslt_a2;

// For |fetch/instr$ld_st.
logic FETCH_Instr_ld_st_a1,
      FETCH_Instr_ld_st_a2;

// For |fetch/instr$ld_st_cond.
logic FETCH_Instr_ld_st_cond_a2;

// For |fetch/instr$ld_st_half.
logic FETCH_Instr_ld_st_half_a1,
      FETCH_Instr_ld_st_half_a2,
      FETCH_Instr_ld_st_half_a3;

// For |fetch/instr$ld_st_word.
logic FETCH_Instr_ld_st_word_a1,
      FETCH_Instr_ld_st_word_a2,
      FETCH_Instr_ld_st_word_a3;

// For |fetch/instr$ld_value.
logic [31:0] FETCH_Instr_ld_value_a3;

// For |fetch/instr$link_reg.
logic FETCH_Instr_link_reg_a1;

// For |fetch/instr$logical_rslt.
logic [31:0] FETCH_Instr_logical_rslt_a2;

// For |fetch/instr$ltz.
logic FETCH_Instr_ltz_a2;

// For |fetch/instr$lui_rslt.
logic [31:0] FETCH_Instr_lui_rslt_a2;

// For |fetch/instr$mispred_branch.
logic FETCH_Instr_mispred_branch_a2;

// For |fetch/instr$next_good_path_mask.
logic [3+1:0] FETCH_Instr_next_good_path_mask_a0;

// For |fetch/instr$next_no_fetch.
logic FETCH_Instr_next_no_fetch_a0;

// For |fetch/instr$next_pc.
logic [31:2] FETCH_Instr_next_pc_a0;

// For |fetch/instr$non_aborting_isa_trap.
logic FETCH_Instr_non_aborting_isa_trap_a2;

// For |fetch/instr$non_aborting_trap.
logic FETCH_Instr_non_aborting_trap_a2,
      FETCH_Instr_non_aborting_trap_a3;

// For |fetch/instr$non_pipelined.
logic FETCH_Instr_non_pipelined_a2,
      FETCH_Instr_non_pipelined_a3;

// For |fetch/instr$op2_value.
logic [31:0] FETCH_Instr_op2_value_a2;

// For |fetch/instr$passed.
logic FETCH_Instr_passed_a3;

// For |fetch/instr$pc_inc.
logic [31:2] FETCH_Instr_pc_inc_a0,
             FETCH_Instr_pc_inc_a1,
             FETCH_Instr_pc_inc_a2;

// For |fetch/instr$pred_taken.
logic FETCH_Instr_pred_taken_a1,
      FETCH_Instr_pred_taken_a2;

// For |fetch/instr$pred_taken_branch.
logic FETCH_Instr_pred_taken_branch_a1;

// For |fetch/instr$raw.
logic [31:0] FETCH_Instr_raw_a0,
             FETCH_Instr_raw_a1;

// For |fetch/instr$raw_address.
logic [25:0] FETCH_Instr_raw_address_a1;

// For |fetch/instr$raw_funct.
logic [5:0] FETCH_Instr_raw_funct_a1;

// For |fetch/instr$raw_immediate.
logic [15:0] FETCH_Instr_raw_immediate_a1,
             FETCH_Instr_raw_immediate_a2;

// For |fetch/instr$raw_opcode.
logic [5:0] FETCH_Instr_raw_opcode_a1;
logic [5:3] FETCH_Instr_raw_opcode_a2;

// For |fetch/instr$raw_rd.
logic [4:0] FETCH_Instr_raw_rd_a1;

// For |fetch/instr$raw_rs.
logic [4:0] FETCH_Instr_raw_rs_a1;

// For |fetch/instr$raw_rt.
logic [4:0] FETCH_Instr_raw_rt_a1;

// For |fetch/instr$raw_shamt.
logic [4:0] FETCH_Instr_raw_shamt_a1,
            FETCH_Instr_raw_shamt_a2;

// For |fetch/instr$reg_wr_pending.
logic FETCH_Instr_reg_wr_pending_a1,
      FETCH_Instr_reg_wr_pending_a2,
      FETCH_Instr_reg_wr_pending_a3;

// For |fetch/instr$reg_write.
logic FETCH_Instr_reg_write_a3;

// For |fetch/instr$replay.
logic FETCH_Instr_replay_a1,
      FETCH_Instr_replay_a2,
      FETCH_Instr_replay_a3;

// For |fetch/instr$replay_int.
logic FETCH_Instr_replay_int_a1;

// For |fetch/instr$replay_trap.
logic FETCH_Instr_replay_trap_a2;

// For |fetch/instr$reset.
logic FETCH_Instr_reset_n1,
      FETCH_Instr_reset_a0,
      FETCH_Instr_reset_a1,
      FETCH_Instr_reset_a2,
      FETCH_Instr_reset_a3;

// For |fetch/instr$rslt.
logic [31:0] FETCH_Instr_rslt_a2,
             FETCH_Instr_rslt_a3;

// For |fetch/instr$rtype.
logic FETCH_Instr_rtype_a1;

// For |fetch/instr$second_issue.
logic FETCH_Instr_second_issue_a0,
      FETCH_Instr_second_issue_a1,
      FETCH_Instr_second_issue_a2,
      FETCH_Instr_second_issue_a3;

// For |fetch/instr$second_issue_ld.
logic FETCH_Instr_second_issue_ld_a0;

// For |fetch/instr$shift_amount.
logic [4:0] FETCH_Instr_shift_amount_a2;

// For |fetch/instr$shift_rslt.
logic [31:0] FETCH_Instr_shift_rslt_a2;

// For |fetch/instr$soft_reset.
logic FETCH_Instr_soft_reset_n1;

// For |fetch/instr$spec_ld.
logic FETCH_Instr_spec_ld_a1,
      FETCH_Instr_spec_ld_a2,
      FETCH_Instr_spec_ld_a3;

// For |fetch/instr$st.
logic FETCH_Instr_st_a1,
      FETCH_Instr_st_a2;

// For |fetch/instr$st_cond.
logic FETCH_Instr_st_cond_a2;

// For |fetch/instr$st_mask.
logic [3:0] FETCH_Instr_st_mask_a2,
            FETCH_Instr_st_mask_a3;

// For |fetch/instr$st_reg_value.
logic [31:0] FETCH_Instr_st_reg_value_a2;

// For |fetch/instr$st_value.
logic [31:0] FETCH_Instr_st_value_a2,
             FETCH_Instr_st_value_a3;

// For |fetch/instr$taken.
logic FETCH_Instr_taken_a2;

// For |fetch/instr$trap_target.
logic [31:2] FETCH_Instr_trap_target_a2,
             FETCH_Instr_trap_target_a3;

// For |fetch/instr$unnatural_addr_trap.
logic FETCH_Instr_unnatural_addr_trap_a2;

// For |fetch/instr$unsigned_imm.
logic FETCH_Instr_unsigned_imm_a1;

// For |fetch/instr$valid_decode.
logic FETCH_Instr_valid_decode_a1,
      FETCH_Instr_valid_decode_a2;

// For |fetch/instr$valid_decode_branch.
logic FETCH_Instr_valid_decode_branch_a1,
      FETCH_Instr_valid_decode_branch_a2;

// For |fetch/instr$valid_dest_reg_valid.
logic FETCH_Instr_valid_dest_reg_valid_a2,
      FETCH_Instr_valid_dest_reg_valid_a3;

// For |fetch/instr$valid_exe.
logic FETCH_Instr_valid_exe_a2;

// For |fetch/instr$valid_ld.
logic FETCH_Instr_valid_ld_a2,
      FETCH_Instr_valid_ld_a3;

// For |fetch/instr$valid_st.
logic FETCH_Instr_valid_st_a2,
      FETCH_Instr_valid_st_a3;

// For |fetch/instr/orig_inst$addr.
logic [1:0] FETCH_Instr_OrigInst_addr_a0,
            FETCH_Instr_OrigInst_addr_a1,
            FETCH_Instr_OrigInst_addr_a2;

// For |fetch/instr/orig_inst$dest_reg.
logic [4:0] FETCH_Instr_OrigInst_dest_reg_a0,
            FETCH_Instr_OrigInst_dest_reg_a1;

// For |fetch/instr/orig_inst$is_lbu.
logic FETCH_Instr_OrigInst_is_lbu_a0,
      FETCH_Instr_OrigInst_is_lbu_a1,
      FETCH_Instr_OrigInst_is_lbu_a2;

// For |fetch/instr/orig_inst$is_lhu.
logic FETCH_Instr_OrigInst_is_lhu_a0,
      FETCH_Instr_OrigInst_is_lhu_a1,
      FETCH_Instr_OrigInst_is_lhu_a2;

// For |fetch/instr/orig_inst$ld_rslt.
logic [31:0] FETCH_Instr_OrigInst_ld_rslt_a2;

// For |fetch/instr/orig_inst$ld_st_half.
logic FETCH_Instr_OrigInst_ld_st_half_a0,
      FETCH_Instr_OrigInst_ld_st_half_a1,
      FETCH_Instr_OrigInst_ld_st_half_a2;

// For |fetch/instr/orig_inst$ld_st_word.
logic FETCH_Instr_OrigInst_ld_st_word_a0,
      FETCH_Instr_OrigInst_ld_st_word_a1,
      FETCH_Instr_OrigInst_ld_st_word_a2;

// For |fetch/instr/orig_inst$ld_value.
logic [31:0] FETCH_Instr_OrigInst_ld_value_a0,
             FETCH_Instr_OrigInst_ld_value_a1,
             FETCH_Instr_OrigInst_ld_value_a2;

// For |fetch/instr/orig_inst$sign_bit.
logic FETCH_Instr_OrigInst_sign_bit_a2;

// For |fetch/instr/orig_load_inst$addr.
logic [1:0] FETCH_Instr_OrigLoadInst_addr_a0;

// For |fetch/instr/orig_load_inst$dest_reg.
logic [4:0] FETCH_Instr_OrigLoadInst_dest_reg_a0;

// For |fetch/instr/orig_load_inst$is_lbu.
logic FETCH_Instr_OrigLoadInst_is_lbu_a0;

// For |fetch/instr/orig_load_inst$is_lhu.
logic FETCH_Instr_OrigLoadInst_is_lhu_a0;

// For |fetch/instr/orig_load_inst$ld_st_half.
logic FETCH_Instr_OrigLoadInst_ld_st_half_a0;

// For |fetch/instr/orig_load_inst$ld_st_word.
logic FETCH_Instr_OrigLoadInst_ld_st_word_a0;

// For |fetch/instr/orig_load_inst$ld_value.
logic [31:0] FETCH_Instr_OrigLoadInst_ld_value_a0;

// For |fetch/instr/regs$pending.
logic FETCH_Instr_Regs_pending_a2 [31:1],
      FETCH_Instr_Regs_pending_a3 [31:1];

// For |fetch/instr/regs$value.
logic [31:0] FETCH_Instr_Regs_value_a3 [31:1];

// For |fetch/instr/src$replay.
logic [2:1] FETCH_Instr_Src_replay_a1;

// For |mem/data$addr.
logic [1:0] MEM_Data_addr_a3,
            MEM_Data_addr_a4;

// For |mem/data$dest_reg.
logic [4:0] MEM_Data_dest_reg_a3,
            MEM_Data_dest_reg_a4;

// For |mem/data$is_lbu.
logic MEM_Data_is_lbu_a3,
      MEM_Data_is_lbu_a4;

// For |mem/data$is_lhu.
logic MEM_Data_is_lhu_a3,
      MEM_Data_is_lhu_a4;

// For |mem/data$ld_st_half.
logic MEM_Data_ld_st_half_a3,
      MEM_Data_ld_st_half_a4;

// For |mem/data$ld_st_word.
logic MEM_Data_ld_st_word_a3,
      MEM_Data_ld_st_word_a4;

// For |mem/data$ld_value.
logic [31:0] MEM_Data_ld_value_a3,
             MEM_Data_ld_value_a4;

// For |mem/data$valid_ld.
logic MEM_Data_valid_ld_a3,
      MEM_Data_valid_ld_a4;


//
// Scope: |fetch
//

//
// Scope: |fetch/instr
//

// Clock signals.
logic clkF_FETCH_Instr_branch_or_reset_a3 ;
logic clkF_FETCH_Instr_branch_or_reset_a4 ;
logic clkP_FETCH_Instr_branch_a2 ;
logic clkP_FETCH_Instr_decode_valid_jump_a2 ;
logic clkP_FETCH_Instr_fetch_a1 ;
logic clkP_FETCH_Instr_ld_st_cond_a3 ;
logic clkP_FETCH_Instr_second_issue_a1 ;
logic clkP_FETCH_Instr_second_issue_a2 ;
logic clkP_FETCH_Instr_second_issue_a3 ;
logic clkP_FETCH_Instr_st_cond_a3 ;
logic clkP_FETCH_Instr_valid_decode_a2 ;
logic clkP_FETCH_Instr_valid_decode_a3 ;
logic clkP_FETCH_Instr_valid_decode_branch_a2 ;
logic clkP_FETCH_Instr_valid_exe_a3 ;

//
// Scope: |fetch/instr/src[2:1]
//

// Clock signals.
logic clkP_FETCH_Instr_Src_is_reg_condition_a2 [2:1];


generate


   //
   // Scope: |fetch
   //


      //
      // Scope: /instr
      //

         // For $BranchState.
         always_ff @(posedge clkF_FETCH_Instr_branch_or_reset_a3) FETCH_Instr_BranchState_a2[1:0] <= FETCH_Instr_BranchState_a1[1:0];
         always_ff @(posedge clkF_FETCH_Instr_branch_or_reset_a4) FETCH_Instr_BranchState_a3[1] <= FETCH_Instr_BranchState_a2[1];

         // For $Cnt.
         always_ff @(posedge clk) FETCH_Instr_Cnt_n1[7:0] <= FETCH_Instr_Cnt_n2[7:0];

         // For $GoodPathMask.
         always_ff @(posedge clk) FETCH_Instr_GoodPathMask_a0[3+1:0] <= FETCH_Instr_GoodPathMask_n1[3+1:0];
         always_ff @(posedge clk) FETCH_Instr_GoodPathMask_a1[3+1:1] <= FETCH_Instr_GoodPathMask_a0[3+1:1];

         // For $NoFetch.
         always_ff @(posedge clk) FETCH_Instr_NoFetch_a0 <= FETCH_Instr_NoFetch_n1;
         always_ff @(posedge clk) FETCH_Instr_NoFetch_a1 <= FETCH_Instr_NoFetch_a0;
         always_ff @(posedge clk) FETCH_Instr_NoFetch_a2 <= FETCH_Instr_NoFetch_a1;
         always_ff @(posedge clk) FETCH_Instr_NoFetch_a3 <= FETCH_Instr_NoFetch_a2;

         // For $Pc.
         always_ff @(posedge clk) FETCH_Instr_Pc_a0[31:2] <= FETCH_Instr_Pc_n1[31:2];
         always_ff @(posedge clk) FETCH_Instr_Pc_a1[31:2] <= FETCH_Instr_Pc_a0[31:2];
         always_ff @(posedge clk) FETCH_Instr_Pc_a2[31:2] <= FETCH_Instr_Pc_a1[31:2];
         always_ff @(posedge clk) FETCH_Instr_Pc_a3[31:2] <= FETCH_Instr_Pc_a2[31:2];

         // For $ReachedEnd.
         always_ff @(posedge clk) FETCH_Instr_ReachedEnd_a3 <= FETCH_Instr_ReachedEnd_a2;

         // For $Reg4Became45.
         always_ff @(posedge clk) FETCH_Instr_Reg4Became45_a3 <= FETCH_Instr_Reg4Became45_a2;

         // For $aborting_trap.
         always_ff @(posedge clk) FETCH_Instr_aborting_trap_a3 <= FETCH_Instr_aborting_trap_a2;

         // For $addr.
         always_ff @(posedge clkP_FETCH_Instr_ld_st_cond_a3) FETCH_Instr_addr_a3[31:0] <= FETCH_Instr_addr_a2[31:0];

         // For $branch.
         always_ff @(posedge clk) FETCH_Instr_branch_a2 <= FETCH_Instr_branch_a1;

         // For $branch_or_jump.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_branch_or_jump_a2 <= FETCH_Instr_branch_or_jump_a1;

         // For $branch_or_reset.
         always_ff @(posedge clk) FETCH_Instr_branch_or_reset_a3 <= FETCH_Instr_branch_or_reset_a2;

         // For $branch_target.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_branch_a2) FETCH_Instr_branch_target_a2[31:2] <= FETCH_Instr_branch_target_a1[31:2];

         // For $commit.
         always_ff @(posedge clk) FETCH_Instr_commit_a3 <= FETCH_Instr_commit_a2;

         // For $conditional_branch.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_conditional_branch_a2 <= FETCH_Instr_conditional_branch_a1;

         // For $decode_valid_indirect_jump.
         always_ff @(posedge clk) FETCH_Instr_decode_valid_indirect_jump_a2 <= FETCH_Instr_decode_valid_indirect_jump_a1;

         // For $dest_reg.
         always_ff @(posedge clk) FETCH_Instr_dest_reg_a2[4:0] <= FETCH_Instr_dest_reg_a1[4:0];
         always_ff @(posedge clk) FETCH_Instr_dest_reg_a3[4:0] <= FETCH_Instr_dest_reg_a2[4:0];

         // For $dest_reg_valid.
         always_ff @(posedge clk) FETCH_Instr_dest_reg_valid_a2 <= FETCH_Instr_dest_reg_valid_a1;
         always_ff @(posedge clk) FETCH_Instr_dest_reg_valid_a3 <= FETCH_Instr_dest_reg_valid_a2;

         // For $div_mul.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_div_mul_a2 <= FETCH_Instr_div_mul_a1;

         // For $fetch.
         always_ff @(posedge clk) FETCH_Instr_fetch_a1 <= FETCH_Instr_fetch_a0;

         // For $illegal.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_illegal_a2 <= FETCH_Instr_illegal_a1;
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a3) FETCH_Instr_illegal_a3 <= FETCH_Instr_illegal_a2;

         // For $imm_value.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_imm_value_a2[31:0] <= FETCH_Instr_imm_value_a1[31:0];

         // For $indirect_jump.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_indirect_jump_a2 <= FETCH_Instr_indirect_jump_a1;

         // For $is_add.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_add_a2 <= FETCH_Instr_is_add_a1;

         // For $is_addi.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_addi_a2 <= FETCH_Instr_is_addi_a1;

         // For $is_addiu.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_addiu_a2 <= FETCH_Instr_is_addiu_a1;

         // For $is_addu.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_addu_a2 <= FETCH_Instr_is_addu_a1;

         // For $is_and.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_and_a2 <= FETCH_Instr_is_and_a1;

         // For $is_andi.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_andi_a2 <= FETCH_Instr_is_andi_a1;

         // For $is_beq.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_beq_a2 <= FETCH_Instr_is_beq_a1;

         // For $is_bgez.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_bgez_a2 <= FETCH_Instr_is_bgez_a1;

         // For $is_bgezal.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_bgezal_a2 <= FETCH_Instr_is_bgezal_a1;

         // For $is_bgtz.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_bgtz_a2 <= FETCH_Instr_is_bgtz_a1;

         // For $is_blez.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_blez_a2 <= FETCH_Instr_is_blez_a1;

         // For $is_bltz.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_bltz_a2 <= FETCH_Instr_is_bltz_a1;

         // For $is_bltzal.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_bltzal_a2 <= FETCH_Instr_is_bltzal_a1;

         // For $is_bne.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_bne_a2 <= FETCH_Instr_is_bne_a1;

         // For $is_break.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_break_a2 <= FETCH_Instr_is_break_a1;

         // For $is_jalr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_jalr_a2 <= FETCH_Instr_is_jalr_a1;

         // For $is_jr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_jr_a2 <= FETCH_Instr_is_jr_a1;

         // For $is_lbu.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_lbu_a2 <= FETCH_Instr_is_lbu_a1;
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a3) FETCH_Instr_is_lbu_a3 <= FETCH_Instr_is_lbu_a2;

         // For $is_lhu.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_lhu_a2 <= FETCH_Instr_is_lhu_a1;
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a3) FETCH_Instr_is_lhu_a3 <= FETCH_Instr_is_lhu_a2;

         // For $is_lui.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_lui_a2 <= FETCH_Instr_is_lui_a1;

         // For $is_nor.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_nor_a2 <= FETCH_Instr_is_nor_a1;

         // For $is_or.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_or_a2 <= FETCH_Instr_is_or_a1;

         // For $is_ori.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_ori_a2 <= FETCH_Instr_is_ori_a1;

         // For $is_sll.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_sll_a2 <= FETCH_Instr_is_sll_a1;

         // For $is_sllv.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_sllv_a2 <= FETCH_Instr_is_sllv_a1;

         // For $is_slt.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_slt_a2 <= FETCH_Instr_is_slt_a1;

         // For $is_slti.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_slti_a2 <= FETCH_Instr_is_slti_a1;

         // For $is_sltiu.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_sltiu_a2 <= FETCH_Instr_is_sltiu_a1;

         // For $is_sltu.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_sltu_a2 <= FETCH_Instr_is_sltu_a1;

         // For $is_sra.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_sra_a2 <= FETCH_Instr_is_sra_a1;

         // For $is_srav.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_srav_a2 <= FETCH_Instr_is_srav_a1;

         // For $is_srl.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_srl_a2 <= FETCH_Instr_is_srl_a1;

         // For $is_srlv.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_srlv_a2 <= FETCH_Instr_is_srlv_a1;

         // For $is_sub.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_sub_a2 <= FETCH_Instr_is_sub_a1;

         // For $is_subu.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_subu_a2 <= FETCH_Instr_is_subu_a1;

         // For $is_syscall.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_syscall_a2 <= FETCH_Instr_is_syscall_a1;

         // For $is_xor.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_xor_a2 <= FETCH_Instr_is_xor_a1;

         // For $is_xori.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_xori_a2 <= FETCH_Instr_is_xori_a1;

         // For $jtype.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_jtype_a2 <= FETCH_Instr_jtype_a1;

         // For $jump.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_jump_a2 <= FETCH_Instr_jump_a1;

         // For $jump_target.
         always_ff @(posedge clkP_FETCH_Instr_decode_valid_jump_a2) FETCH_Instr_jump_target_a2[31:2] <= FETCH_Instr_jump_target_a1[31:2];

         // For $ld.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_ld_a2 <= FETCH_Instr_ld_a1;

         // For $ld_st.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_ld_st_a2 <= FETCH_Instr_ld_st_a1;

         // For $ld_st_half.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_ld_st_half_a2 <= FETCH_Instr_ld_st_half_a1;
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a3) FETCH_Instr_ld_st_half_a3 <= FETCH_Instr_ld_st_half_a2;

         // For $ld_st_word.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_ld_st_word_a2 <= FETCH_Instr_ld_st_word_a1;
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a3) FETCH_Instr_ld_st_word_a3 <= FETCH_Instr_ld_st_word_a2;

         // For $non_aborting_trap.
         always_ff @(posedge clk) FETCH_Instr_non_aborting_trap_a3 <= FETCH_Instr_non_aborting_trap_a2;

         // For $non_pipelined.
         always_ff @(posedge clk) FETCH_Instr_non_pipelined_a3 <= FETCH_Instr_non_pipelined_a2;

         // For $pc_inc.
         always_ff @(posedge clk) FETCH_Instr_pc_inc_a1[31:2] <= FETCH_Instr_pc_inc_a0[31:2];
         always_ff @(posedge clk) FETCH_Instr_pc_inc_a2[31:2] <= FETCH_Instr_pc_inc_a1[31:2];

         // For $pred_taken.
         always_ff @(posedge clkP_FETCH_Instr_branch_a2) FETCH_Instr_pred_taken_a2 <= FETCH_Instr_pred_taken_a1;

         // For $raw.
         always_ff @(posedge clkP_FETCH_Instr_fetch_a1) FETCH_Instr_raw_a1[31:0] <= FETCH_Instr_raw_a0[31:0];

         // For $raw_immediate.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_raw_immediate_a2[15:0] <= FETCH_Instr_raw_immediate_a1[15:0];

         // For $raw_opcode.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_raw_opcode_a2[5:3] <= FETCH_Instr_raw_opcode_a1[5:3];

         // For $raw_shamt.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_raw_shamt_a2[4:0] <= FETCH_Instr_raw_shamt_a1[4:0];

         // For $reg_wr_pending.
         always_ff @(posedge clk) FETCH_Instr_reg_wr_pending_a2 <= FETCH_Instr_reg_wr_pending_a1;
         always_ff @(posedge clk) FETCH_Instr_reg_wr_pending_a3 <= FETCH_Instr_reg_wr_pending_a2;

         // For $replay.
         always_ff @(posedge clk) FETCH_Instr_replay_a2 <= FETCH_Instr_replay_a1;
         always_ff @(posedge clk) FETCH_Instr_replay_a3 <= FETCH_Instr_replay_a2;

         // For $reset.
         always_ff @(posedge clk) FETCH_Instr_reset_a0 <= FETCH_Instr_reset_n1;
         always_ff @(posedge clk) FETCH_Instr_reset_a1 <= FETCH_Instr_reset_a0;
         always_ff @(posedge clk) FETCH_Instr_reset_a2 <= FETCH_Instr_reset_a1;
         always_ff @(posedge clk) FETCH_Instr_reset_a3 <= FETCH_Instr_reset_a2;

         // For $rslt.
         always_ff @(posedge clkP_FETCH_Instr_valid_exe_a3) FETCH_Instr_rslt_a3[31:0] <= FETCH_Instr_rslt_a2[31:0];

         // For $second_issue.
         always_ff @(posedge clk) FETCH_Instr_second_issue_a1 <= FETCH_Instr_second_issue_a0;
         always_ff @(posedge clk) FETCH_Instr_second_issue_a2 <= FETCH_Instr_second_issue_a1;
         always_ff @(posedge clk) FETCH_Instr_second_issue_a3 <= FETCH_Instr_second_issue_a2;

         // For $spec_ld.
         always_ff @(posedge clk) FETCH_Instr_spec_ld_a2 <= FETCH_Instr_spec_ld_a1;
         always_ff @(posedge clk) FETCH_Instr_spec_ld_a3 <= FETCH_Instr_spec_ld_a2;

         // For $st.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_st_a2 <= FETCH_Instr_st_a1;

         // For $st_mask.
         always_ff @(posedge clkP_FETCH_Instr_st_cond_a3) FETCH_Instr_st_mask_a3[3:0] <= FETCH_Instr_st_mask_a2[3:0];

         // For $st_value.
         always_ff @(posedge clkP_FETCH_Instr_st_cond_a3) FETCH_Instr_st_value_a3[31:0] <= FETCH_Instr_st_value_a2[31:0];

         // For $trap_target.
         always_ff @(posedge clk) FETCH_Instr_trap_target_a3[31:2] <= FETCH_Instr_trap_target_a2[31:2];

         // For $valid_decode.
         always_ff @(posedge clk) FETCH_Instr_valid_decode_a2 <= FETCH_Instr_valid_decode_a1;

         // For $valid_decode_branch.
         always_ff @(posedge clk) FETCH_Instr_valid_decode_branch_a2 <= FETCH_Instr_valid_decode_branch_a1;

         // For $valid_dest_reg_valid.
         always_ff @(posedge clk) FETCH_Instr_valid_dest_reg_valid_a3 <= FETCH_Instr_valid_dest_reg_valid_a2;

         // For $valid_ld.
         always_ff @(posedge clk) FETCH_Instr_valid_ld_a3 <= FETCH_Instr_valid_ld_a2;

         // For $valid_st.
         always_ff @(posedge clk) FETCH_Instr_valid_st_a3 <= FETCH_Instr_valid_st_a2;


         //
         // Scope: /orig_inst
         //

            // For $addr.
            always_ff @(posedge clkP_FETCH_Instr_second_issue_a1) FETCH_Instr_OrigInst_addr_a1[1:0] <= FETCH_Instr_OrigInst_addr_a0[1:0];
            always_ff @(posedge clkP_FETCH_Instr_second_issue_a2) FETCH_Instr_OrigInst_addr_a2[1:0] <= FETCH_Instr_OrigInst_addr_a1[1:0];

            // For $dest_reg.
            always_ff @(posedge clkP_FETCH_Instr_second_issue_a1) FETCH_Instr_OrigInst_dest_reg_a1[4:0] <= FETCH_Instr_OrigInst_dest_reg_a0[4:0];

            // For $is_lbu.
            always_ff @(posedge clkP_FETCH_Instr_second_issue_a1) FETCH_Instr_OrigInst_is_lbu_a1 <= FETCH_Instr_OrigInst_is_lbu_a0;
            always_ff @(posedge clkP_FETCH_Instr_second_issue_a2) FETCH_Instr_OrigInst_is_lbu_a2 <= FETCH_Instr_OrigInst_is_lbu_a1;

            // For $is_lhu.
            always_ff @(posedge clkP_FETCH_Instr_second_issue_a1) FETCH_Instr_OrigInst_is_lhu_a1 <= FETCH_Instr_OrigInst_is_lhu_a0;
            always_ff @(posedge clkP_FETCH_Instr_second_issue_a2) FETCH_Instr_OrigInst_is_lhu_a2 <= FETCH_Instr_OrigInst_is_lhu_a1;

            // For $ld_st_half.
            always_ff @(posedge clkP_FETCH_Instr_second_issue_a1) FETCH_Instr_OrigInst_ld_st_half_a1 <= FETCH_Instr_OrigInst_ld_st_half_a0;
            always_ff @(posedge clkP_FETCH_Instr_second_issue_a2) FETCH_Instr_OrigInst_ld_st_half_a2 <= FETCH_Instr_OrigInst_ld_st_half_a1;

            // For $ld_st_word.
            always_ff @(posedge clkP_FETCH_Instr_second_issue_a1) FETCH_Instr_OrigInst_ld_st_word_a1 <= FETCH_Instr_OrigInst_ld_st_word_a0;
            always_ff @(posedge clkP_FETCH_Instr_second_issue_a2) FETCH_Instr_OrigInst_ld_st_word_a2 <= FETCH_Instr_OrigInst_ld_st_word_a1;

            // For $ld_value.
            always_ff @(posedge clkP_FETCH_Instr_second_issue_a1) FETCH_Instr_OrigInst_ld_value_a1[31:0] <= FETCH_Instr_OrigInst_ld_value_a0[31:0];
            always_ff @(posedge clkP_FETCH_Instr_second_issue_a2) FETCH_Instr_OrigInst_ld_value_a2[31:0] <= FETCH_Instr_OrigInst_ld_value_a1[31:0];


            //
            // Scope: /src[2:1]
            //
            for (src = 1; src <= 2; src++) begin : L1gen_FETCH_Instr_OrigInst_Src
               // For $dummy.
               always_ff @(posedge clkP_FETCH_Instr_second_issue_a1) L1_FETCH_Instr_OrigInst_Src[src].L1_dummy_a1 <= L1_FETCH_Instr_OrigInst_Src[src].L1_dummy_a0;
               always_ff @(posedge clkP_FETCH_Instr_second_issue_a2) L1_FETCH_Instr_OrigInst_Src[src].L1_dummy_a2 <= L1_FETCH_Instr_OrigInst_Src[src].L1_dummy_a1;
               always_ff @(posedge clkP_FETCH_Instr_second_issue_a3) L1_FETCH_Instr_OrigInst_Src[src].L1_dummy_a3 <= L1_FETCH_Instr_OrigInst_Src[src].L1_dummy_a2;

            end


         //
         // Scope: /regs[31:1]
         //
         for (regs = 1; regs <= 31; regs++) begin : L1gen_FETCH_Instr_Regs
            // For $pending.
            always_ff @(posedge clk) FETCH_Instr_Regs_pending_a3[regs] <= FETCH_Instr_Regs_pending_a2[regs];

         end

         //
         // Scope: /src[2:1]
         //
         for (src = 1; src <= 2; src++) begin : L1gen_FETCH_Instr_Src
            // For $dummy.
            always_ff @(posedge clk) L1b_FETCH_Instr_Src[src].L1_dummy_a2 <= L1b_FETCH_Instr_Src[src].L1_dummy_a1;
            always_ff @(posedge clk) L1b_FETCH_Instr_Src[src].L1_dummy_a3 <= L1b_FETCH_Instr_Src[src].L1_dummy_a2;

            // For $reg_value.
            always_ff @(posedge clkP_FETCH_Instr_Src_is_reg_condition_a2[src]) L1b_FETCH_Instr_Src[src].L1_reg_value_a2[31:0] <= L1b_FETCH_Instr_Src[src].L1_reg_value_a1[31:0];

         end



   //
   // Scope: |mem
   //


      //
      // Scope: /data
      //

         // For $addr.
         always_ff @(posedge clk) MEM_Data_addr_a4[1:0] <= MEM_Data_addr_a3[1:0];

         // For $dest_reg.
         always_ff @(posedge clk) MEM_Data_dest_reg_a4[4:0] <= MEM_Data_dest_reg_a3[4:0];

         // For $is_lbu.
         always_ff @(posedge clk) MEM_Data_is_lbu_a4 <= MEM_Data_is_lbu_a3;

         // For $is_lhu.
         always_ff @(posedge clk) MEM_Data_is_lhu_a4 <= MEM_Data_is_lhu_a3;

         // For $ld_st_half.
         always_ff @(posedge clk) MEM_Data_ld_st_half_a4 <= MEM_Data_ld_st_half_a3;

         // For $ld_st_word.
         always_ff @(posedge clk) MEM_Data_ld_st_word_a4 <= MEM_Data_ld_st_word_a3;

         // For $ld_value.
         always_ff @(posedge clk) MEM_Data_ld_value_a4[31:0] <= MEM_Data_ld_value_a3[31:0];

         // For $valid_ld.
         always_ff @(posedge clk) MEM_Data_valid_ld_a4 <= MEM_Data_valid_ld_a3;


         //
         // Scope: /src[2:1]
         //
         for (src = 1; src <= 2; src++) begin : L1gen_MEM_Data_Src
            // For $dummy.
            always_ff @(posedge clk) L1_MEM_Data_Src[src].L1_dummy_a4 <= L1_MEM_Data_Src[src].L1_dummy_a3;

         end




endgenerate



//
// Gated clocks.
//

generate



   //
   // Scope: |fetch
   //


      //
      // Scope: /instr
      //

         clk_gate gen_clkF_FETCH_Instr_branch_or_reset_a3(clkF_FETCH_Instr_branch_or_reset_a3, clk, FETCH_Instr_branch_or_reset_a2, 1'b1, 1'b0);
         clk_gate gen_clkF_FETCH_Instr_branch_or_reset_a4(clkF_FETCH_Instr_branch_or_reset_a4, clk, FETCH_Instr_branch_or_reset_a3, 1'b1, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_branch_a2(clkP_FETCH_Instr_branch_a2, clk, 1'b1, FETCH_Instr_branch_a1, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_decode_valid_jump_a2(clkP_FETCH_Instr_decode_valid_jump_a2, clk, 1'b1, FETCH_Instr_decode_valid_jump_a1, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_fetch_a1(clkP_FETCH_Instr_fetch_a1, clk, 1'b1, FETCH_Instr_fetch_a0, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_ld_st_cond_a3(clkP_FETCH_Instr_ld_st_cond_a3, clk, 1'b1, FETCH_Instr_ld_st_cond_a2, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_second_issue_a1(clkP_FETCH_Instr_second_issue_a1, clk, 1'b1, FETCH_Instr_second_issue_a0, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_second_issue_a2(clkP_FETCH_Instr_second_issue_a2, clk, 1'b1, FETCH_Instr_second_issue_a1, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_second_issue_a3(clkP_FETCH_Instr_second_issue_a3, clk, 1'b1, FETCH_Instr_second_issue_a2, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_st_cond_a3(clkP_FETCH_Instr_st_cond_a3, clk, 1'b1, FETCH_Instr_st_cond_a2, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_valid_decode_a2(clkP_FETCH_Instr_valid_decode_a2, clk, 1'b1, FETCH_Instr_valid_decode_a1, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_valid_decode_a3(clkP_FETCH_Instr_valid_decode_a3, clk, 1'b1, FETCH_Instr_valid_decode_a2, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_valid_decode_branch_a2(clkP_FETCH_Instr_valid_decode_branch_a2, clk, 1'b1, FETCH_Instr_valid_decode_branch_a1, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_valid_exe_a3(clkP_FETCH_Instr_valid_exe_a3, clk, 1'b1, FETCH_Instr_valid_exe_a2, 1'b0);

         //
         // Scope: /src[2:1]
         //
         for (src = 1; src <= 2; src++) begin : L1clk_FETCH_Instr_Src
            clk_gate gen_clkP_FETCH_Instr_Src_is_reg_condition_a2(clkP_FETCH_Instr_Src_is_reg_condition_a2[src], clk, 1'b1, L1b_FETCH_Instr_Src[src].L1_is_reg_condition_a1, 1'b0);
         end




endgenerate



generate   // This is awkward, but we need to go into 'generate' context in the line that `includes the declarations file.
