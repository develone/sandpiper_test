// Generated by SandPiper(TM) 1.9-2018/02/11-beta from Redwood EDA.
// Redwood EDA does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


`include "sandpiper_gen.vh"


genvar bank, mem, regs, src;


//
// Signals declared top-level.
//

// For |fetch/instr$Cnt.
logic [7:0] FETCH_Instr_Cnt_n2,
            FETCH_Instr_Cnt_n1;

// For |fetch/instr$GoodPathMask.
logic [3+1:0] FETCH_Instr_GoodPathMask_n1,
              FETCH_Instr_GoodPathMask_a0;
logic [3+1:1] FETCH_Instr_GoodPathMask_a1;

// For |fetch/instr$NoFetch.
logic FETCH_Instr_NoFetch_n1,
      FETCH_Instr_NoFetch_a0,
      FETCH_Instr_NoFetch_a1,
      FETCH_Instr_NoFetch_a2,
      FETCH_Instr_NoFetch_a3;

// For |fetch/instr$Pc.
logic [9:0] FETCH_Instr_Pc_n1,
            FETCH_Instr_Pc_a0,
            FETCH_Instr_Pc_a1,
            FETCH_Instr_Pc_a2,
            FETCH_Instr_Pc_a3;

// For |fetch/instr$abort.
logic FETCH_Instr_abort_a2;

// For |fetch/instr$aborting_isa_trap.
logic FETCH_Instr_aborting_isa_trap_a2;

// For |fetch/instr$aborting_trap.
logic FETCH_Instr_aborting_trap_a2,
      FETCH_Instr_aborting_trap_a3;

// For |fetch/instr$addr.
logic [11:0] FETCH_Instr_addr_a2,
             FETCH_Instr_addr_a3;

// For |fetch/instr$branch.
logic FETCH_Instr_branch_a1,
      FETCH_Instr_branch_a2;

// For |fetch/instr$branch_redir_pc.
logic [9:0] FETCH_Instr_branch_redir_pc_a2;

// For |fetch/instr$branch_target.
logic [9:0] FETCH_Instr_branch_target_a2;

// For |fetch/instr$commit.
logic FETCH_Instr_commit_a2;

// For |fetch/instr$compare_rslt.
logic FETCH_Instr_compare_rslt_a2;

// For |fetch/instr$conditional_branch.
logic FETCH_Instr_conditional_branch_a1,
      FETCH_Instr_conditional_branch_a2;

// For |fetch/instr$dest_char.
logic [7:0] FETCH_Instr_dest_char_a1;

// For |fetch/instr$dest_is_reg.
logic FETCH_Instr_dest_is_reg_a1;

// For |fetch/instr$dest_pending.
logic FETCH_Instr_dest_pending_a1;

// For |fetch/instr$dest_reg.
logic [2:0] FETCH_Instr_dest_reg_a1,
            FETCH_Instr_dest_reg_a2,
            FETCH_Instr_dest_reg_a3;

// For |fetch/instr$dest_reg_valid.
logic FETCH_Instr_dest_reg_valid_a1,
      FETCH_Instr_dest_reg_valid_a2,
      FETCH_Instr_dest_reg_valid_a3;

// For |fetch/instr$dest_valid.
logic FETCH_Instr_dest_valid_a1,
      FETCH_Instr_dest_valid_a2;

// For |fetch/instr$div_mul.
logic FETCH_Instr_div_mul_a1,
      FETCH_Instr_div_mul_a2;

// For |fetch/instr$fetch.
logic FETCH_Instr_fetch_a0,
      FETCH_Instr_fetch_a1;

// For |fetch/instr$fetch_instr_dest_reg.
logic [7:0] FETCH_Instr_fetch_instr_dest_reg_a1;

// For |fetch/instr$illegal.
logic FETCH_Instr_illegal_a1,
      FETCH_Instr_illegal_a2;

// For |fetch/instr$illegal_dest.
logic FETCH_Instr_illegal_dest_a1;

// For |fetch/instr$is_dest_condition.
logic FETCH_Instr_is_dest_condition_a1;

// For |fetch/instr$jump.
logic FETCH_Instr_jump_a1,
      FETCH_Instr_jump_a2;

// For |fetch/instr$jump_target.
logic [9:0] FETCH_Instr_jump_target_a2;

// For |fetch/instr$ld.
logic FETCH_Instr_ld_a1,
      FETCH_Instr_ld_a2;

// For |fetch/instr$ld_value.
logic [11:0] FETCH_Instr_ld_value_a3;

// For |fetch/instr$mispred_branch.
logic FETCH_Instr_mispred_branch_a2;

// For |fetch/instr$next_good_path_mask.
logic [3+1:0] FETCH_Instr_next_good_path_mask_a0;

// For |fetch/instr$next_no_fetch.
logic FETCH_Instr_next_no_fetch_a0;

// For |fetch/instr$next_pc.
logic [9:0] FETCH_Instr_next_pc_a0;

// For |fetch/instr$no_dest.
logic FETCH_Instr_no_dest_a1;

// For |fetch/instr$non_aborting_isa_trap.
logic FETCH_Instr_non_aborting_isa_trap_a2;

// For |fetch/instr$non_aborting_trap.
logic FETCH_Instr_non_aborting_trap_a2,
      FETCH_Instr_non_aborting_trap_a3;

// For |fetch/instr$non_pipelined.
logic FETCH_Instr_non_pipelined_a2,
      FETCH_Instr_non_pipelined_a3;

// For |fetch/instr$op_char.
logic [7:0] FETCH_Instr_op_char_a1;

// For |fetch/instr$op_compare.
logic FETCH_Instr_op_compare_a1,
      FETCH_Instr_op_compare_a2;

// For |fetch/instr$op_full.
logic FETCH_Instr_op_full_a1,
      FETCH_Instr_op_full_a2;

// For |fetch/instr$op_full_rslt.
logic [11:0] FETCH_Instr_op_full_rslt_a2;

// For |fetch/instr$pc_inc.
logic [9:0] FETCH_Instr_pc_inc_a0;

// For |fetch/instr$pred_taken.
logic FETCH_Instr_pred_taken_a1,
      FETCH_Instr_pred_taken_a2;

// For |fetch/instr$raw.
logic [39:0] FETCH_Instr_raw_a0,
             FETCH_Instr_raw_a1 /* covering: [23:0] & [39:32] */;

// For |fetch/instr$reg_wr_pending.
logic FETCH_Instr_reg_wr_pending_a1,
      FETCH_Instr_reg_wr_pending_a2,
      FETCH_Instr_reg_wr_pending_a3;

// For |fetch/instr$reg_write.
logic FETCH_Instr_reg_write_a3;

// For |fetch/instr$replay.
logic FETCH_Instr_replay_a1,
      FETCH_Instr_replay_a2,
      FETCH_Instr_replay_a3;

// For |fetch/instr$replay_int.
logic FETCH_Instr_replay_int_a1;

// For |fetch/instr$replay_trap.
logic FETCH_Instr_replay_trap_a2;

// For |fetch/instr$reset.
logic FETCH_Instr_reset_n1,
      FETCH_Instr_reset_a0,
      FETCH_Instr_reset_a1,
      FETCH_Instr_reset_a2,
      FETCH_Instr_reset_a3;

// For |fetch/instr$rslt.
logic [11:0] FETCH_Instr_rslt_a2,
             FETCH_Instr_rslt_a3;

// For |fetch/instr$second_issue.
logic FETCH_Instr_second_issue_a0,
      FETCH_Instr_second_issue_a1,
      FETCH_Instr_second_issue_a2,
      FETCH_Instr_second_issue_a3;

// For |fetch/instr$second_issue_ld.
logic FETCH_Instr_second_issue_ld_a0;

// For |fetch/instr$soft_reset.
logic FETCH_Instr_soft_reset_n1;

// For |fetch/instr$spec_ld.
logic FETCH_Instr_spec_ld_a1,
      FETCH_Instr_spec_ld_a2,
      FETCH_Instr_spec_ld_a3;

// For |fetch/instr$st.
logic FETCH_Instr_st_a1,
      FETCH_Instr_st_a2;

// For |fetch/instr$st_mask.
logic [0:0] FETCH_Instr_st_mask_a2,
            FETCH_Instr_st_mask_a3;

// For |fetch/instr$st_value.
logic [11:0] FETCH_Instr_st_value_a2,
             FETCH_Instr_st_value_a3;

// For |fetch/instr$taken.
logic FETCH_Instr_taken_a2;

// For |fetch/instr$trap_target.
logic [9:0] FETCH_Instr_trap_target_a2,
            FETCH_Instr_trap_target_a3;

// For |fetch/instr$valid_decode.
logic FETCH_Instr_valid_decode_a1;

// For |fetch/instr$valid_decode_branch.
logic FETCH_Instr_valid_decode_branch_a1,
      FETCH_Instr_valid_decode_branch_a2;

// For |fetch/instr$valid_dest_reg_valid.
logic FETCH_Instr_valid_dest_reg_valid_a2,
      FETCH_Instr_valid_dest_reg_valid_a3;

// For |fetch/instr$valid_ld.
logic FETCH_Instr_valid_ld_a2,
      FETCH_Instr_valid_ld_a3;

// For |fetch/instr$valid_ld_st.
logic FETCH_Instr_valid_ld_st_a2;

// For |fetch/instr$valid_st.
logic FETCH_Instr_valid_st_a2,
      FETCH_Instr_valid_st_a3;

// For |fetch/instr$write_pc.
logic FETCH_Instr_write_pc_a1;

// For |fetch/instr/op$add.
logic FETCH_Instr_Op_add_a1,
      FETCH_Instr_Op_add_a2;

// For |fetch/instr/op$and.
logic FETCH_Instr_Op_and_a1,
      FETCH_Instr_Op_and_a2;

// For |fetch/instr/op$arith.
logic FETCH_Instr_Op_arith_a1;

// For |fetch/instr/op$bitwise.
logic FETCH_Instr_Op_bitwise_a1;

// For |fetch/instr/op$char.
logic [7:0] FETCH_Instr_Op_char_a1;

// For |fetch/instr/op$combine.
logic FETCH_Instr_Op_combine_a1,
      FETCH_Instr_Op_combine_a2;

// For |fetch/instr/op$compare.
logic FETCH_Instr_Op_compare_a1;

// For |fetch/instr/op$conditional.
logic FETCH_Instr_Op_conditional_a1,
      FETCH_Instr_Op_conditional_a2;

// For |fetch/instr/op$div.
logic FETCH_Instr_Op_div_a1,
      FETCH_Instr_Op_div_a2;

// For |fetch/instr/op$eq.
logic FETCH_Instr_Op_eq_a1,
      FETCH_Instr_Op_eq_a2;

// For |fetch/instr/op$full.
logic FETCH_Instr_Op_full_a1;

// For |fetch/instr/op$ge.
logic FETCH_Instr_Op_ge_a1,
      FETCH_Instr_Op_ge_a2;

// For |fetch/instr/op$gt.
logic FETCH_Instr_Op_gt_a1,
      FETCH_Instr_Op_gt_a2;

// For |fetch/instr/op$illegal.
logic FETCH_Instr_Op_illegal_a1;

// For |fetch/instr/op$ld.
logic FETCH_Instr_Op_ld_a1;

// For |fetch/instr/op$le.
logic FETCH_Instr_Op_le_a1,
      FETCH_Instr_Op_le_a2;

// For |fetch/instr/op$lt.
logic FETCH_Instr_Op_lt_a1,
      FETCH_Instr_Op_lt_a2;

// For |fetch/instr/op$mem.
logic FETCH_Instr_Op_mem_a1;

// For |fetch/instr/op$mul.
logic FETCH_Instr_Op_mul_a1,
      FETCH_Instr_Op_mul_a2;

// For |fetch/instr/op$ne.
logic FETCH_Instr_Op_ne_a1,
      FETCH_Instr_Op_ne_a2;

// For |fetch/instr/op$or.
logic FETCH_Instr_Op_or_a1,
      FETCH_Instr_Op_or_a2;

// For |fetch/instr/op$st.
logic FETCH_Instr_Op_st_a1;

// For |fetch/instr/op$sub.
logic FETCH_Instr_Op_sub_a1,
      FETCH_Instr_Op_sub_a2;

// For |fetch/instr/op$wide_imm.
logic FETCH_Instr_Op_wide_imm_a1,
      FETCH_Instr_Op_wide_imm_a2;

// For |fetch/instr/orig_inst$dest_reg.
logic [2:0] FETCH_Instr_OrigInst_dest_reg_a0,
            FETCH_Instr_OrigInst_dest_reg_a1;

// For |fetch/instr/orig_inst$ld_value.
logic [11:0] FETCH_Instr_OrigInst_ld_value_a0,
             FETCH_Instr_OrigInst_ld_value_a1,
             FETCH_Instr_OrigInst_ld_value_a2;

// For |fetch/instr/orig_load_inst$dest_reg.
logic [2:0] FETCH_Instr_OrigLoadInst_dest_reg_a0;

// For |fetch/instr/orig_load_inst$ld_value.
logic [11:0] FETCH_Instr_OrigLoadInst_ld_value_a0;

// For |fetch/instr/regs$pending.
logic FETCH_Instr_Regs_pending_a2 [7:0],
      FETCH_Instr_Regs_pending_a3 [7:0];

// For |fetch/instr/regs$value.
logic [11:0] FETCH_Instr_Regs_value_a3 [7:0];

// For |fetch/instr/src$illegal.
logic [2:1] FETCH_Instr_Src_illegal_a1;

// For |fetch/instr/src$replay.
logic [2:1] FETCH_Instr_Src_replay_a1;

// For |mem/data$dest_reg.
logic [2:0] MEM_Data_dest_reg_a3,
            MEM_Data_dest_reg_a4;

// For |mem/data$ld_value.
logic [11:0] MEM_Data_ld_value_a3,
             MEM_Data_ld_value_a4;

// For |mem/data$valid_ld.
logic MEM_Data_valid_ld_a3,
      MEM_Data_valid_ld_a4;


//
// Scope: |fetch
//

//
// Scope: |fetch/instr
//

// Clock signals.
logic clkP_FETCH_Instr_dest_valid_a3 ;
logic clkP_FETCH_Instr_fetch_a1 ;
logic clkP_FETCH_Instr_second_issue_a1 ;
logic clkP_FETCH_Instr_second_issue_a2 ;
logic clkP_FETCH_Instr_second_issue_a3 ;
logic clkP_FETCH_Instr_valid_ld_st_a3 ;
logic clkP_FETCH_Instr_valid_st_a3 ;

//
// Scope: |fetch/instr/src[2:1]
//

// Clock signals.
logic clkP_FETCH_Instr_Src_valid_a2 [2:1];


generate


   //
   // Scope: |fetch
   //


      //
      // Scope: /instr
      //

         // For $Cnt.
         always_ff @(posedge clk) FETCH_Instr_Cnt_n1[7:0] <= FETCH_Instr_Cnt_n2[7:0];

         // For $GoodPathMask.
         always_ff @(posedge clk) FETCH_Instr_GoodPathMask_a0[3+1:0] <= FETCH_Instr_GoodPathMask_n1[3+1:0];
         always_ff @(posedge clk) FETCH_Instr_GoodPathMask_a1[3+1:1] <= FETCH_Instr_GoodPathMask_a0[3+1:1];

         // For $NoFetch.
         always_ff @(posedge clk) FETCH_Instr_NoFetch_a0 <= FETCH_Instr_NoFetch_n1;
         always_ff @(posedge clk) FETCH_Instr_NoFetch_a1 <= FETCH_Instr_NoFetch_a0;
         always_ff @(posedge clk) FETCH_Instr_NoFetch_a2 <= FETCH_Instr_NoFetch_a1;
         always_ff @(posedge clk) FETCH_Instr_NoFetch_a3 <= FETCH_Instr_NoFetch_a2;

         // For $Pc.
         always_ff @(posedge clk) FETCH_Instr_Pc_a0[9:0] <= FETCH_Instr_Pc_n1[9:0];
         always_ff @(posedge clk) FETCH_Instr_Pc_a1[9:0] <= FETCH_Instr_Pc_a0[9:0];
         always_ff @(posedge clk) FETCH_Instr_Pc_a2[9:0] <= FETCH_Instr_Pc_a1[9:0];
         always_ff @(posedge clk) FETCH_Instr_Pc_a3[9:0] <= FETCH_Instr_Pc_a2[9:0];

         // For $aborting_trap.
         always_ff @(posedge clk) FETCH_Instr_aborting_trap_a3 <= FETCH_Instr_aborting_trap_a2;

         // For $addr.
         always_ff @(posedge clkP_FETCH_Instr_valid_ld_st_a3) FETCH_Instr_addr_a3[11:0] <= FETCH_Instr_addr_a2[11:0];

         // For $branch.
         always_ff @(posedge clk) FETCH_Instr_branch_a2 <= FETCH_Instr_branch_a1;

         // For $conditional_branch.
         always_ff @(posedge clk) FETCH_Instr_conditional_branch_a2 <= FETCH_Instr_conditional_branch_a1;

         // For $dest_reg.
         always_ff @(posedge clk) FETCH_Instr_dest_reg_a2[2:0] <= FETCH_Instr_dest_reg_a1[2:0];
         always_ff @(posedge clk) FETCH_Instr_dest_reg_a3[2:0] <= FETCH_Instr_dest_reg_a2[2:0];

         // For $dest_reg_valid.
         always_ff @(posedge clk) FETCH_Instr_dest_reg_valid_a2 <= FETCH_Instr_dest_reg_valid_a1;
         always_ff @(posedge clk) FETCH_Instr_dest_reg_valid_a3 <= FETCH_Instr_dest_reg_valid_a2;

         // For $dest_valid.
         always_ff @(posedge clk) FETCH_Instr_dest_valid_a2 <= FETCH_Instr_dest_valid_a1;

         // For $div_mul.
         always_ff @(posedge clk) FETCH_Instr_div_mul_a2 <= FETCH_Instr_div_mul_a1;

         // For $fetch.
         always_ff @(posedge clk) FETCH_Instr_fetch_a1 <= FETCH_Instr_fetch_a0;

         // For $illegal.
         always_ff @(posedge clk) FETCH_Instr_illegal_a2 <= FETCH_Instr_illegal_a1;

         // For $jump.
         always_ff @(posedge clk) FETCH_Instr_jump_a2 <= FETCH_Instr_jump_a1;

         // For $ld.
         always_ff @(posedge clk) FETCH_Instr_ld_a2 <= FETCH_Instr_ld_a1;

         // For $non_aborting_trap.
         always_ff @(posedge clk) FETCH_Instr_non_aborting_trap_a3 <= FETCH_Instr_non_aborting_trap_a2;

         // For $non_pipelined.
         always_ff @(posedge clk) FETCH_Instr_non_pipelined_a3 <= FETCH_Instr_non_pipelined_a2;

         // For $op_compare.
         always_ff @(posedge clk) FETCH_Instr_op_compare_a2 <= FETCH_Instr_op_compare_a1;

         // For $op_full.
         always_ff @(posedge clk) FETCH_Instr_op_full_a2 <= FETCH_Instr_op_full_a1;

         // For $pred_taken.
         always_ff @(posedge clk) FETCH_Instr_pred_taken_a2 <= FETCH_Instr_pred_taken_a1;

         // For $raw.
         always_ff @(posedge clkP_FETCH_Instr_fetch_a1) FETCH_Instr_raw_a1[23:0] <= FETCH_Instr_raw_a0[23:0];
         always_ff @(posedge clkP_FETCH_Instr_fetch_a1) FETCH_Instr_raw_a1[39:32] <= FETCH_Instr_raw_a0[39:32];

         // For $reg_wr_pending.
         always_ff @(posedge clk) FETCH_Instr_reg_wr_pending_a2 <= FETCH_Instr_reg_wr_pending_a1;
         always_ff @(posedge clk) FETCH_Instr_reg_wr_pending_a3 <= FETCH_Instr_reg_wr_pending_a2;

         // For $replay.
         always_ff @(posedge clk) FETCH_Instr_replay_a2 <= FETCH_Instr_replay_a1;
         always_ff @(posedge clk) FETCH_Instr_replay_a3 <= FETCH_Instr_replay_a2;

         // For $reset.
         always_ff @(posedge clk) FETCH_Instr_reset_a0 <= FETCH_Instr_reset_n1;
         always_ff @(posedge clk) FETCH_Instr_reset_a1 <= FETCH_Instr_reset_a0;
         always_ff @(posedge clk) FETCH_Instr_reset_a2 <= FETCH_Instr_reset_a1;
         always_ff @(posedge clk) FETCH_Instr_reset_a3 <= FETCH_Instr_reset_a2;

         // For $rslt.
         always_ff @(posedge clkP_FETCH_Instr_dest_valid_a3) FETCH_Instr_rslt_a3[11:0] <= FETCH_Instr_rslt_a2[11:0];

         // For $second_issue.
         always_ff @(posedge clk) FETCH_Instr_second_issue_a1 <= FETCH_Instr_second_issue_a0;
         always_ff @(posedge clk) FETCH_Instr_second_issue_a2 <= FETCH_Instr_second_issue_a1;
         always_ff @(posedge clk) FETCH_Instr_second_issue_a3 <= FETCH_Instr_second_issue_a2;

         // For $spec_ld.
         always_ff @(posedge clk) FETCH_Instr_spec_ld_a2 <= FETCH_Instr_spec_ld_a1;
         always_ff @(posedge clk) FETCH_Instr_spec_ld_a3 <= FETCH_Instr_spec_ld_a2;

         // For $st.
         always_ff @(posedge clk) FETCH_Instr_st_a2 <= FETCH_Instr_st_a1;

         // For $st_mask.
         always_ff @(posedge clk) FETCH_Instr_st_mask_a3[0:0] <= FETCH_Instr_st_mask_a2[0:0];

         // For $st_value.
         always_ff @(posedge clkP_FETCH_Instr_valid_st_a3) FETCH_Instr_st_value_a3[11:0] <= FETCH_Instr_st_value_a2[11:0];

         // For $trap_target.
         always_ff @(posedge clk) FETCH_Instr_trap_target_a3[9:0] <= FETCH_Instr_trap_target_a2[9:0];

         // For $valid_decode_branch.
         always_ff @(posedge clk) FETCH_Instr_valid_decode_branch_a2 <= FETCH_Instr_valid_decode_branch_a1;

         // For $valid_dest_reg_valid.
         always_ff @(posedge clk) FETCH_Instr_valid_dest_reg_valid_a3 <= FETCH_Instr_valid_dest_reg_valid_a2;

         // For $valid_ld.
         always_ff @(posedge clk) FETCH_Instr_valid_ld_a3 <= FETCH_Instr_valid_ld_a2;

         // For $valid_st.
         always_ff @(posedge clk) FETCH_Instr_valid_st_a3 <= FETCH_Instr_valid_st_a2;


         //
         // Scope: /op
         //

            // For $add.
            always_ff @(posedge clk) FETCH_Instr_Op_add_a2 <= FETCH_Instr_Op_add_a1;

            // For $and.
            always_ff @(posedge clk) FETCH_Instr_Op_and_a2 <= FETCH_Instr_Op_and_a1;

            // For $combine.
            always_ff @(posedge clk) FETCH_Instr_Op_combine_a2 <= FETCH_Instr_Op_combine_a1;

            // For $conditional.
            always_ff @(posedge clk) FETCH_Instr_Op_conditional_a2 <= FETCH_Instr_Op_conditional_a1;

            // For $div.
            always_ff @(posedge clk) FETCH_Instr_Op_div_a2 <= FETCH_Instr_Op_div_a1;

            // For $eq.
            always_ff @(posedge clk) FETCH_Instr_Op_eq_a2 <= FETCH_Instr_Op_eq_a1;

            // For $ge.
            always_ff @(posedge clk) FETCH_Instr_Op_ge_a2 <= FETCH_Instr_Op_ge_a1;

            // For $gt.
            always_ff @(posedge clk) FETCH_Instr_Op_gt_a2 <= FETCH_Instr_Op_gt_a1;

            // For $le.
            always_ff @(posedge clk) FETCH_Instr_Op_le_a2 <= FETCH_Instr_Op_le_a1;

            // For $lt.
            always_ff @(posedge clk) FETCH_Instr_Op_lt_a2 <= FETCH_Instr_Op_lt_a1;

            // For $mul.
            always_ff @(posedge clk) FETCH_Instr_Op_mul_a2 <= FETCH_Instr_Op_mul_a1;

            // For $ne.
            always_ff @(posedge clk) FETCH_Instr_Op_ne_a2 <= FETCH_Instr_Op_ne_a1;

            // For $or.
            always_ff @(posedge clk) FETCH_Instr_Op_or_a2 <= FETCH_Instr_Op_or_a1;

            // For $sub.
            always_ff @(posedge clk) FETCH_Instr_Op_sub_a2 <= FETCH_Instr_Op_sub_a1;

            // For $wide_imm.
            always_ff @(posedge clk) FETCH_Instr_Op_wide_imm_a2 <= FETCH_Instr_Op_wide_imm_a1;



         //
         // Scope: /orig_inst
         //

            // For $dest_reg.
            always_ff @(posedge clkP_FETCH_Instr_second_issue_a1) FETCH_Instr_OrigInst_dest_reg_a1[2:0] <= FETCH_Instr_OrigInst_dest_reg_a0[2:0];

            // For $ld_value.
            always_ff @(posedge clkP_FETCH_Instr_second_issue_a1) FETCH_Instr_OrigInst_ld_value_a1[11:0] <= FETCH_Instr_OrigInst_ld_value_a0[11:0];
            always_ff @(posedge clkP_FETCH_Instr_second_issue_a2) FETCH_Instr_OrigInst_ld_value_a2[11:0] <= FETCH_Instr_OrigInst_ld_value_a1[11:0];


            //
            // Scope: /src[2:1]
            //
            for (src = 1; src <= 2; src++) begin : L1gen_FETCH_Instr_OrigInst_Src
               // For $dummy.
               always_ff @(posedge clkP_FETCH_Instr_second_issue_a1) L1_FETCH_Instr_OrigInst_Src[src].L1_dummy_a1 <= L1_FETCH_Instr_OrigInst_Src[src].L1_dummy_a0;
               always_ff @(posedge clkP_FETCH_Instr_second_issue_a2) L1_FETCH_Instr_OrigInst_Src[src].L1_dummy_a2 <= L1_FETCH_Instr_OrigInst_Src[src].L1_dummy_a1;
               always_ff @(posedge clkP_FETCH_Instr_second_issue_a3) L1_FETCH_Instr_OrigInst_Src[src].L1_dummy_a3 <= L1_FETCH_Instr_OrigInst_Src[src].L1_dummy_a2;

            end


         //
         // Scope: /regs[7:0]
         //
         for (regs = 0; regs <= 7; regs++) begin : L1gen_FETCH_Instr_Regs
            // For $pending.
            always_ff @(posedge clk) FETCH_Instr_Regs_pending_a3[regs] <= FETCH_Instr_Regs_pending_a2[regs];

         end

         //
         // Scope: /src[2:1]
         //
         for (src = 1; src <= 2; src++) begin : L1gen_FETCH_Instr_Src
            // For $dummy.
            always_ff @(posedge clk) L1c_FETCH_Instr_Src[src].L1_dummy_a2 <= L1c_FETCH_Instr_Src[src].L1_dummy_a1;
            always_ff @(posedge clk) L1c_FETCH_Instr_Src[src].L1_dummy_a3 <= L1c_FETCH_Instr_Src[src].L1_dummy_a2;

            // For $value.
            always_ff @(posedge clkP_FETCH_Instr_Src_valid_a2[src]) L1d_FETCH_Instr_Src[src].L1_value_a2[11:0] <= L1d_FETCH_Instr_Src[src].L1_value_a1[11:0];

         end



   //
   // Scope: |mem
   //


      //
      // Scope: /data
      //

         // For $dest_reg.
         always_ff @(posedge clk) MEM_Data_dest_reg_a4[2:0] <= MEM_Data_dest_reg_a3[2:0];

         // For $ld_value.
         always_ff @(posedge clk) MEM_Data_ld_value_a4[11:0] <= MEM_Data_ld_value_a3[11:0];

         // For $valid_ld.
         always_ff @(posedge clk) MEM_Data_valid_ld_a4 <= MEM_Data_valid_ld_a3;


         //
         // Scope: /src[2:1]
         //
         for (src = 1; src <= 2; src++) begin : L1gen_MEM_Data_Src
            // For $dummy.
            always_ff @(posedge clk) L1_MEM_Data_Src[src].L1_dummy_a4 <= L1_MEM_Data_Src[src].L1_dummy_a3;

         end




endgenerate



//
// Gated clocks.
//

generate



   //
   // Scope: |fetch
   //


      //
      // Scope: /instr
      //

         clk_gate gen_clkP_FETCH_Instr_dest_valid_a3(clkP_FETCH_Instr_dest_valid_a3, clk, 1'b1, FETCH_Instr_dest_valid_a2, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_fetch_a1(clkP_FETCH_Instr_fetch_a1, clk, 1'b1, FETCH_Instr_fetch_a0, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_second_issue_a1(clkP_FETCH_Instr_second_issue_a1, clk, 1'b1, FETCH_Instr_second_issue_a0, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_second_issue_a2(clkP_FETCH_Instr_second_issue_a2, clk, 1'b1, FETCH_Instr_second_issue_a1, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_second_issue_a3(clkP_FETCH_Instr_second_issue_a3, clk, 1'b1, FETCH_Instr_second_issue_a2, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_valid_ld_st_a3(clkP_FETCH_Instr_valid_ld_st_a3, clk, 1'b1, FETCH_Instr_valid_ld_st_a2, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_valid_st_a3(clkP_FETCH_Instr_valid_st_a3, clk, 1'b1, FETCH_Instr_valid_st_a2, 1'b0);

         //
         // Scope: /src[2:1]
         //
         for (src = 1; src <= 2; src++) begin : L1clk_FETCH_Instr_Src
            clk_gate gen_clkP_FETCH_Instr_Src_valid_a2(clkP_FETCH_Instr_Src_valid_a2[src], clk, 1'b1, L1d_FETCH_Instr_Src[src].L1_valid_a1, 1'b0);
         end




endgenerate



generate   // This is awkward, but we need to go into 'generate' context in the line that `includes the declarations file.
