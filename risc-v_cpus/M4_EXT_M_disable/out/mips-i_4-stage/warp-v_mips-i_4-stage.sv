//_\TLV_version 1d: tl-x.org, generated by SandPiper(TM) 1.9-2018/02/11-beta

`include "sp_default.vh" //_\source warp-v_mips-i_4-stage.tlv 5
//_\SV
   // Include WARP-V.
   // Included URL: "./warp-v.tlv"
//_\SV
module top(input logic clk, input logic reset, input logic [31:0] cyc_cnt, output logic passed, output logic failed);    /* verilator lint_save */ /* verilator lint_off UNOPTFLAT */  bit [256:0] RW_rand_raw; bit [256+63:0] RW_rand_vect; pseudo_rand #(.WIDTH(257)) pseudo_rand (clk, reset, RW_rand_raw[256:0]); assign RW_rand_vect[256+63:0] = {RW_rand_raw[62:0], RW_rand_raw};  /* verilator lint_restore */  /* verilator lint_off WIDTH */ /* verilator lint_off UNOPTFLAT */
//_\source warp-v_mips-i_4-stage.tlv 9
`include "warp-v_mips-i_4-stage_gen.sv" //_\TLV
   //_\source ./warpv.tlv 3556   // Instantiated from warp-v_mips-i_4-stage.tlv, 11 as: m4+warpv()
      // =================
      //
      //    THE MODEL
      //
      // =================
      
   
      //_\source ./warpv.tlv 2814   // Instantiated from warp-v_mips-i_4-stage.tlv, 3564 as: m4+cpu(/top)
         // Generated logic
         //_\source <builtin> 1   // Instantiated from warp-v_mips-i_4-stage.tlv, 2816 as: m4+indirect(M4_isa['_gen'])
            //_\source ./warpv.tlv 2010   // Instantiated from built-in definition.
               // No M4-generated code for MIPS I.
            //_\end_source
         //_\end_source
      
         // Instruction memory and fetch of $raw.
         //_\source <builtin> 1   // Instantiated from warp-v_mips-i_4-stage.tlv, 2819 as: m4+indirect(M4_IMEM_MACRO_NAME, M4_PROG_NAME)
            //_\source ./warpv.tlv 2002   // Instantiated from built-in definition.
               //_\source <builtin> 1   // Instantiated from warp-v_mips-i_4-stage.tlv, 2003 as: m4+indirect(['mipsi_']cnt10['_prog'])
                  //_\source ./warpv.tlv 1966   // Instantiated from built-in definition.
                     /*SV_plus*/
                        
                        
                        // The program in an instruction memory.
                        logic [31:0] instrs [0:11-1];
                        
                        // /=====================\
                        // | Count to 10 Program |
                        // \=====================/
                        
                        // Add 1,2,3,...,9 (in that order).
                        // Store incremental results in memory locations 1..9. (1, 3, 6, 10, ..., 45)
                        //
                        // Regs:
                        // 1: cnt
                        // 2: ten
                        // 3: out
                        // 4: tmp
                        // 5: offset
                        // 6: store addr
                        
                        assign instrs = '{
                          {6'd13, 5'd0, 5'd6, 16'd0},             //    store_addr = 0
                          {6'd13, 5'd0, 5'd1, 16'd1},             //    cnt = 1
                          {6'd13, 5'd0, 5'd2, 16'd10},            //    ten = 10
                          {6'd13, 5'd0, 5'd3, 16'd0},             //    out = 0
                          {6'd0,  5'd1, 5'd3, 5'd3, 5'd0, 6'd32}, // -> out += cnt
                          {6'd43, 5'd6, 5'd3, 16'd0},             //    store out at store_addr
                          {6'd8,  5'd1, 5'd1, 16'd1},             //    cnt ++
                          {6'd8,  5'd6, 5'd6, 16'd4},             //    store_addr++
                          {6'd5,  5'd1, 5'd2, (~ 16'd4)},         // ^- branch back if cnt != ten
                          {6'd35, 5'd6, 5'd4, (~ 16'd3)},         //    load the final value into tmp
                          {6'd0,  26'd13}                         //    BREAK
                        };
                  //_\end_source
               //_\end_source
               //_|fetch
                  //_/instr
                     //_@0
                        //_?$fetch
                           assign FETCH_Instr_raw_a0[31:0] = instrs[FETCH_Instr_Pc_a0[5:2]];
            //_\end_source
         //_\end_source
      
      
         // /=========\
         // | The CPU |
         // \=========/
      
         //_|fetch
            //_/instr
               
               
               // Provide a longer reset to cover the pipeline depth.
               //_@-1
                  assign FETCH_Instr_soft_reset_n1 = (1'b0) || reset;
                  assign FETCH_Instr_Cnt_n2[7:0] = FETCH_Instr_soft_reset_n1   ? 8'b0 :       // reset
                               FETCH_Instr_Cnt_n1 == 8'hFF ? 8'hFF :      // max out to avoid wrapping
                                               FETCH_Instr_Cnt_n1 + 8'b1; // increment
                  assign FETCH_Instr_reset_n1 = FETCH_Instr_soft_reset_n1 || FETCH_Instr_Cnt_n1 < 10;
               //_@0
                  assign FETCH_Instr_fetch_a0 = ! FETCH_Instr_reset_a0 && ! FETCH_Instr_NoFetch_a0;
                  // (M4_IMEM_MACRO_NAME instantiation produces ?$fetch$raw.)
               //_@0
                  
                  // ========
                  // Overview
                  // ========
                  
                  // Terminology:
                  //
                  // Instruction: An instruction, as viewed by the CPU pipeline (i.e. ld and returning_ld are separate instructions,
                  //              and the returning_ld and the instruction it clobbers are one in the same).
                  // ISA Instruction: An instruction, as defined by the ISA.
                  // Good-Path (vs. Bad-Path): On the proper flow of execution of the program, excluding aborted instructions.
                  // Path (of an instruction): The sequence of instructions that led to a particular instruction.
                  // Current Path: The sequence of instructions fetched by next-PC logic that are not known to be bad-path.
                  // Redirect: Adjust the PC from the predicted next-PC.
                  // Redirect Shadow: Between the instruction causing the redirect and the redirect target instruction.
                  // Bubbles: The cycles in the redirect shadow.
                  // Commit: Results are made visible to subsequent instructions.
                  // Abort: Do not commit. All aborts are also redirects and put the instruction on bad path. Non-aborting
                  //        redirects do not mark the triggering instruction as bad-path. Aborts mask future redirects on the
                  //        aborted instruction.
                  // Retire: Commit results of an ISA instruction.
                  
                  // Control flow:
                  //
                  // Redirects include (earliest to latest):
                  //   o Returning load: (aborting) A returning load clobbers an instruction and takes its slot, resulting in a
                  //                     one-cycle redirect to repeat the clobbered instruction.
                  //   o Predict-taken branch: A predicted-taken branch must determine the target before it can redirect the PC.
                  //                           (This might be followed up by a mispredition.)
                  //   o Replay: (aborting) Replay the same instruction (because a source register is pending (awaiting a long-latency/2nd issuing instruction))
                  //   o Jump: A jump instruction.
                  //   o Mispredicted branch: A branch condition was mispredicted.
                  //   o Aborting traps: (aborting) illegal instructions, others?
                  //   o Non-aborting traps: misaligned PC target
                  
                  // ==============
                  // Redirect Logic
                  // ==============
                                  
                  // PC logic will redirect the PC for conditions on current-path instructions. PC logic keeps track of which
                  // instructions are on the current path with a $GoodPathMask. $GoodPathMask[n] of an instruction indicates
                  // whether the instruction n instructions prior to this instruction is on its path.
                  //
                  //                 $GoodPathMask for Redir'edX => {o,X,o,o,y,y,o,o} == {1,1,1,1,0,0,1,1}
                  // Waterfall View: |
                  //                 V
                  // 0)       oooooooo                  Good-path
                  // 1) InstX  ooooooXo  (Non-aborting) Good-path
                  // 2)         ooooooxx
                  // 3) InstY    ooYyyxxx  (Aborting)
                  // 4) InstZ     ooyyxZxx
                  // 5) Redir'edY  oyyxxxxx
                  // 6) TargetY     ooxxxxxx
                  // 7) Redir'edX    oxxxxxxx
                  // 8) TargetX       oooooooo          Good-path
                  // 9) Not redir'edZ  oooooooo         Good-path
                  //
                  // Above depicts a waterfall diagram where three triggering redirection conditions X, Y, and Z are detected on three different
                  // instructions. A trigger in the 1st depicted stage, M4_NEXT_PC_STAGE, results in a zero-bubble redirect so it would be
                  // a condition that is factored directly into the next-PC logic of the triggering instruction, and it would have
                  // no impact on the $GoodPathMask.
                  //
                  // Waveform View:
                  //
                  //   Inst 0123456789
                  //        ---------- /
                  // GPM[7]        ooxxxxxxoo
                  // GPM[6]       oXxxxxxxoo
                  // GPM[5]      oooxZxxxoo
                  // GPM[4]     oooyxxxxoo
                  // GPM[3]    oooyyxxxoo
                  // GPM[2]   oooYyyxxoo
                  // GPM[1]  oooooyoxoo
                  // GPM[0] oooooooooo
                  //          /
                  //         Triggers for InstY
                  //
                  // In the waveform view, the mask shifts up each cycle, as instructions age, and trigger conditions mask instructions
                  // in the shadow, down to the redirect target (GPM[0]).
                  //
                  // Terminology:
                  //   Triggering instruction: The instruction on which the condition is detected.
                  //   Redirected instruction: The instruction whose next PC is redirected.
                  //   Redirection target instruction: The first new-path instruction resulting from the redirection.
                  //
                  // Above, Y redirects first, though it is for a later instruction than X. The redirections for X and Y are taken
                  // because their instructions are on the path of the redirected instructions. Z is not on the path of its
                  // potentially-redirected instruction, so no redirection happens.
                  //
                  // For simultaneous conditions on different instructions, the PC must redirect to the earlier instruction's
                  // redirect target, so later-stage redirects take priority in the PC-mux.
                  //
                  // Aborting redirects result in the aborting instruction being marked as bad-path. Aborted instructions will
                  // not commit. Subsequent redirect conditions on aborting instructions are ignored. (For conditions within the
                  // same stage, this is accomplished by the PC-mux prioritization.)
                  
                  
                  // Macros are defined elsewhere based on the ordered set of conditions that generate code here.
                  
                  // Redirect Shadow
                  // A mask of stages ahead of this one (older) in which instructions are on the path of this instruction.
                  // Index 1 is ahead by 1, etc.
                  // In the example above, $GoodPathMask for Redir'edX == {0,0,0,0,1,1,0,0}
                  //     (Looking up in the waterfall diagram from its first "o", in reverse order {o,X,o,o,y,y,o,o}.)
                  // The LSB is fetch-valid. It only exists for m4_prev_instr_valid_through macro.
                  assign FETCH_Instr_next_good_path_mask_a0[3+1:0] =
                     // Shift up and mask w/ redirect conditions.
                     {FETCH_Instr_GoodPathMask_a0[3:0]
                      // & terms for each condition (order doesn't matter since masks are the same within a cycle)
                       & ((FETCH_Instr_second_issue_a0 && !(1'b0) && FETCH_Instr_GoodPathMask_a0[0]) ? {{3{1'b1}}, {1{1'b0}}} : {4{1'b1}}) & ((FETCH_Instr_NoFetch_a0 && !(1'b0 || FETCH_Instr_second_issue_a0) && FETCH_Instr_GoodPathMask_a0[0]) ? {{3{1'b1}}, {1{1'b0}}} : {4{1'b1}}) & ((FETCH_Instr_pred_taken_branch_a1 && !(1'b0 || FETCH_Instr_second_issue_a1 || FETCH_Instr_NoFetch_a1) && FETCH_Instr_GoodPathMask_a0[1]) ? {{3{1'b1}}, {1{1'b0}}} : {4{1'b1}}) & ((FETCH_Instr_replay_a2 && !(1'b0 || FETCH_Instr_second_issue_a2 || FETCH_Instr_NoFetch_a2) && FETCH_Instr_GoodPathMask_a0[2]) ? {{1{1'b1}}, {3{1'b0}}} : {4{1'b1}}) & ((FETCH_Instr_jump_a2 && !(1'b0 || FETCH_Instr_second_issue_a2 || FETCH_Instr_NoFetch_a2 || FETCH_Instr_replay_a2) && FETCH_Instr_GoodPathMask_a0[2]) ? {{2{1'b1}}, {2{1'b0}}} : {4{1'b1}}) & ((FETCH_Instr_mispred_branch_a2 && !(1'b0 || FETCH_Instr_second_issue_a2 || FETCH_Instr_NoFetch_a2 || FETCH_Instr_replay_a2) && FETCH_Instr_GoodPathMask_a0[2]) ? {{2{1'b1}}, {2{1'b0}}} : {4{1'b1}}) & ((FETCH_Instr_indirect_jump_a2 && !(1'b0 || FETCH_Instr_second_issue_a2 || FETCH_Instr_NoFetch_a2 || FETCH_Instr_replay_a2) && FETCH_Instr_GoodPathMask_a0[2]) ? {{2{1'b1}}, {2{1'b0}}} : {4{1'b1}}) & ((FETCH_Instr_non_pipelined_a3 && !(1'b0 || FETCH_Instr_second_issue_a3 || FETCH_Instr_NoFetch_a3 || FETCH_Instr_replay_a3) && FETCH_Instr_GoodPathMask_a0[3]) ? {{1{1'b1}}, {3{1'b0}}} : {4{1'b1}}) & ((FETCH_Instr_aborting_trap_a3 && !(1'b0 || FETCH_Instr_second_issue_a3 || FETCH_Instr_NoFetch_a3 || FETCH_Instr_replay_a3) && FETCH_Instr_GoodPathMask_a0[3]) ? {{0{1'b1}}, {4{1'b0}}} : {4{1'b1}}) & ((FETCH_Instr_non_aborting_trap_a3 && !(1'b0 || FETCH_Instr_second_issue_a3 || FETCH_Instr_NoFetch_a3 || FETCH_Instr_replay_a3 || FETCH_Instr_aborting_trap_a3) && FETCH_Instr_GoodPathMask_a0[3]) ? {{1{1'b1}}, {3{1'b0}}} : {4{1'b1}}),
                      1'b1}; // Shift in 1'b1 (fetch-valid).
                  
                  assign FETCH_Instr_GoodPathMask_n1[3+1:0] =
                     FETCH_Instr_reset_n1 ? 5'b0 :  // All bad-path (through self) on reset (next mask based on next reset).
                     FETCH_Instr_next_good_path_mask_a0;
                  
                  
                  
                  
                  
                     
                      
                      
                  
                     
                     
                  
                  
                  
                  // A returning load clobbers the instruction.
                  // (Could do this with lower latency. Right now it goes through memory pipeline $ANY, and
                  //  it is non-speculative. Both could easily be fixed.)
                  assign FETCH_Instr_second_issue_ld_a0 = MEM_Data_valid_ld_a4 && 1'b1;
                  assign FETCH_Instr_second_issue_a0 = FETCH_Instr_second_issue_ld_a0  ;
                  // Recirculate returning load or the div_mul_result from /orig_inst scope
                  
                  //_?$second_issue_ld
                     // This scope holds the original load for a returning load.
                     //_/orig_load_inst
                        assign {FETCH_Instr_OrigLoadInst_addr_a0[1:0], FETCH_Instr_OrigLoadInst_dest_reg_a0[4:0], FETCH_Instr_OrigLoadInst_is_lbu_a0, FETCH_Instr_OrigLoadInst_is_lhu_a0, FETCH_Instr_OrigLoadInst_ld_st_half_a0, FETCH_Instr_OrigLoadInst_ld_st_word_a0, FETCH_Instr_OrigLoadInst_ld_value_a0[31:0]} = {MEM_Data_addr_a4, MEM_Data_dest_reg_a4, MEM_Data_is_lbu_a4, MEM_Data_is_lhu_a4, MEM_Data_ld_st_half_a4, MEM_Data_ld_st_word_a4, MEM_Data_ld_value_a4};
                        for (src = 1; src <= 2; src++) begin : L1_FETCH_Instr_OrigLoadInst_Src logic L1_dummy_a0; //_/src
                           assign {L1_dummy_a0} = {L1_MEM_Data_Src[src].L1_dummy_a4}; end
                  //_?$second_issue
                     //_/orig_inst
                        // pull values from /orig_load_inst or /hold_inst depending on which second issue
                        assign {FETCH_Instr_OrigInst_addr_a0[1:0], FETCH_Instr_OrigInst_dest_reg_a0[4:0], FETCH_Instr_OrigInst_is_lbu_a0, FETCH_Instr_OrigInst_is_lhu_a0, FETCH_Instr_OrigInst_ld_st_half_a0, FETCH_Instr_OrigInst_ld_st_word_a0, FETCH_Instr_OrigInst_ld_value_a0[31:0]} = FETCH_Instr_second_issue_ld_a0 ? {FETCH_Instr_OrigLoadInst_addr_a0, FETCH_Instr_OrigLoadInst_dest_reg_a0, FETCH_Instr_OrigLoadInst_is_lbu_a0, FETCH_Instr_OrigLoadInst_is_lhu_a0, FETCH_Instr_OrigLoadInst_ld_st_half_a0, FETCH_Instr_OrigLoadInst_ld_st_word_a0, FETCH_Instr_OrigLoadInst_ld_value_a0} :   {FETCH_Instr_OrigLoadInst_addr_a0, FETCH_Instr_OrigLoadInst_dest_reg_a0, FETCH_Instr_OrigLoadInst_is_lbu_a0, FETCH_Instr_OrigLoadInst_is_lhu_a0, FETCH_Instr_OrigLoadInst_ld_st_half_a0, FETCH_Instr_OrigLoadInst_ld_st_word_a0, FETCH_Instr_OrigLoadInst_ld_value_a0};
                        for (src = 1; src <= 2; src++) begin : L1_FETCH_Instr_OrigInst_Src logic L1_dummy_a0, L1_dummy_a1, L1_dummy_a2, L1_dummy_a3; //_/src
                           assign {L1_dummy_a0} = FETCH_Instr_second_issue_ld_a0 ? {L1_FETCH_Instr_OrigLoadInst_Src[src].L1_dummy_a0} :   {L1_FETCH_Instr_OrigLoadInst_Src[src].L1_dummy_a0}; end
                  
                  // Next PC
                  assign FETCH_Instr_pc_inc_a0[31:2] = FETCH_Instr_Pc_a0 + 30'b1;
                  // Current parsing does not allow concatenated state on left-hand-side, so, first, a non-state expression.
                  assign {FETCH_Instr_next_pc_a0[31:2], FETCH_Instr_next_no_fetch_a0} =
                     FETCH_Instr_reset_a0 ? {30'b0, 1'b0} :
                     // ? : terms for each condition (order does matter)
                     (FETCH_Instr_non_aborting_trap_a3 && !(1'b0 || FETCH_Instr_second_issue_a3 || FETCH_Instr_NoFetch_a3 || FETCH_Instr_replay_a3 || FETCH_Instr_aborting_trap_a3) && FETCH_Instr_GoodPathMask_a0[3]) ? {FETCH_Instr_trap_target_a3, 1'b0} : (FETCH_Instr_aborting_trap_a3 && !(1'b0 || FETCH_Instr_second_issue_a3 || FETCH_Instr_NoFetch_a3 || FETCH_Instr_replay_a3) && FETCH_Instr_GoodPathMask_a0[3]) ? {FETCH_Instr_trap_target_a3,1'b0} : (FETCH_Instr_non_pipelined_a3 && !(1'b0 || FETCH_Instr_second_issue_a3 || FETCH_Instr_NoFetch_a3 || FETCH_Instr_replay_a3) && FETCH_Instr_GoodPathMask_a0[3]) ? {FETCH_Instr_Pc_a3,1'b1} : (FETCH_Instr_indirect_jump_a2 && !(1'b0 || FETCH_Instr_second_issue_a2 || FETCH_Instr_NoFetch_a2 || FETCH_Instr_replay_a2) && FETCH_Instr_GoodPathMask_a0[2]) ? {FETCH_Instr_indirect_jump_target_a2,1'b0} : (FETCH_Instr_mispred_branch_a2 && !(1'b0 || FETCH_Instr_second_issue_a2 || FETCH_Instr_NoFetch_a2 || FETCH_Instr_replay_a2) && FETCH_Instr_GoodPathMask_a0[2]) ? {FETCH_Instr_branch_redir_pc_a2,1'b0} : (FETCH_Instr_jump_a2 && !(1'b0 || FETCH_Instr_second_issue_a2 || FETCH_Instr_NoFetch_a2 || FETCH_Instr_replay_a2) && FETCH_Instr_GoodPathMask_a0[2]) ? {FETCH_Instr_jump_target_a2,1'b0} : (FETCH_Instr_replay_a2 && !(1'b0 || FETCH_Instr_second_issue_a2 || FETCH_Instr_NoFetch_a2) && FETCH_Instr_GoodPathMask_a0[2]) ? {FETCH_Instr_Pc_a2,1'b0} : (FETCH_Instr_pred_taken_branch_a1 && !(1'b0 || FETCH_Instr_second_issue_a1 || FETCH_Instr_NoFetch_a1) && FETCH_Instr_GoodPathMask_a0[1]) ? {FETCH_Instr_branch_target_a1,1'b0} : (FETCH_Instr_NoFetch_a0 && !(1'b0 || FETCH_Instr_second_issue_a0) && FETCH_Instr_GoodPathMask_a0[0]) ? {FETCH_Instr_Pc_a0,1'b1} : (FETCH_Instr_second_issue_a0 && !(1'b0) && FETCH_Instr_GoodPathMask_a0[0]) ? {FETCH_Instr_second_issue_ld_a0 ? FETCH_Instr_Pc_a0 : FETCH_Instr_pc_inc_a0,1'b0} :           
                                ({FETCH_Instr_pc_inc_a0, 1'b0});
                  // Then as state.
                  assign FETCH_Instr_Pc_n1[31:2] = FETCH_Instr_next_pc_a0;
                  assign FETCH_Instr_NoFetch_n1 = FETCH_Instr_next_no_fetch_a0;
               
               //_@1
      
                  // ======
                  // DECODE
                  // ======
      
                  // Decode of the fetched instruction
                  assign FETCH_Instr_valid_decode_a1 = FETCH_Instr_fetch_a1;  // Always decode if we fetch.
                  assign FETCH_Instr_valid_decode_branch_a1 = FETCH_Instr_valid_decode_a1 && FETCH_Instr_branch_a1;
                  // A load that will return later.
                  //$split_ld = $spec_ld && 1'b['']M4_INJECT_RETURNING_LD;
                  //_\source <builtin> 1   // Instantiated from warp-v_mips-i_4-stage.tlv, 3013 as: m4+indirect(M4_isa['_decode'])
                     //_\source ./warpv.tlv 2024   // Instantiated from built-in definition.
                        // TODO: ?$valid_<stage> conditioning should be replaced by use of m4_prev_instr_valid_through(..).
                        //_?$valid_decode
                     
                           // Extract fields of $raw (instruction) into $raw_<field>[x:0].
                           assign {FETCH_Instr_raw_opcode_a1[5:0], FETCH_Instr_raw_rs_a1[4:0], FETCH_Instr_raw_rt_a1[4:0], FETCH_Instr_raw_rd_a1[4:0], FETCH_Instr_raw_shamt_a1[4:0], FETCH_Instr_raw_funct_a1[5:0]} = FETCH_Instr_raw_a1;
                           assign FETCH_Instr_raw_immediate_a1[15:0] = FETCH_Instr_raw_a1[15:0];
                           assign FETCH_Instr_raw_address_a1[25:0] = FETCH_Instr_raw_a1[25:0];
                           
                           // Instruction Format
                           assign FETCH_Instr_rtype_a1 = FETCH_Instr_raw_opcode_a1 == 6'b000000;
                           assign FETCH_Instr_jtype_a1 = FETCH_Instr_raw_opcode_a1 == 6'b000010 || FETCH_Instr_raw_opcode_a1 == 6'b000011;
                           assign FETCH_Instr_itype_a1 = ! FETCH_Instr_rtype_a1 && ! FETCH_Instr_jtype_a1;
                           
                           // Load/Store
                           //$is_lb  = $raw_opcode == 6'b100000;
                           assign FETCH_Instr_is_lh_a1  = FETCH_Instr_raw_opcode_a1 == 6'b100001;
                           //$is_lwl = $raw_opcode == 6'b100010;
                           //$is_lw  = $raw_opcode == 6'b100011;
                           assign FETCH_Instr_is_lbu_a1 = FETCH_Instr_raw_opcode_a1 == 6'b100100;
                           assign FETCH_Instr_is_lhu_a1 = FETCH_Instr_raw_opcode_a1 == 6'b100101;
                           //$is_lwr = $raw_opcode == 6'b100110;
                           //$is_sb  = $raw_opcode == 6'b101000;
                           assign FETCH_Instr_is_sh_a1  = FETCH_Instr_raw_opcode_a1 == 6'b101001;
                           //$is_swl = $raw_opcode == 6'b101010;
                           //$is_sw  = $raw_opcode == 6'b101011;
                           //$is_swr = $raw_opcode == 6'b101100;
                           
                           // ALU
                           assign FETCH_Instr_is_add_a1   = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b100000;
                           assign FETCH_Instr_is_addu_a1  = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b100001;
                           assign FETCH_Instr_is_sub_a1   = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b100010;
                           assign FETCH_Instr_is_subu_a1  = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b100011;
                           assign FETCH_Instr_is_and_a1   = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b100100;
                           assign FETCH_Instr_is_or_a1    = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b100101;
                           assign FETCH_Instr_is_xor_a1   = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b100110;
                           assign FETCH_Instr_is_nor_a1   = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b100111;
                           assign FETCH_Instr_is_slt_a1   = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b101010;
                           assign FETCH_Instr_is_sltu_a1  = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b101011;
                           assign FETCH_Instr_is_addi_a1  = FETCH_Instr_raw_opcode_a1 == 6'b001000;
                           assign FETCH_Instr_is_addiu_a1 = FETCH_Instr_raw_opcode_a1 == 6'b001001;
                           assign FETCH_Instr_is_slti_a1  = FETCH_Instr_raw_opcode_a1 == 6'b001010;
                           assign FETCH_Instr_is_sltiu_a1 = FETCH_Instr_raw_opcode_a1 == 6'b001011;
                           assign FETCH_Instr_is_andi_a1  = FETCH_Instr_raw_opcode_a1 == 6'b001100;
                           assign FETCH_Instr_is_ori_a1   = FETCH_Instr_raw_opcode_a1 == 6'b001101;
                           assign FETCH_Instr_is_xori_a1  = FETCH_Instr_raw_opcode_a1 == 6'b001110;
                           assign FETCH_Instr_is_lui_a1   = FETCH_Instr_raw_opcode_a1 == 6'b001111;
                           
                           // Shift
                           assign FETCH_Instr_is_sll_a1  = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b000000;
                           assign FETCH_Instr_is_srl_a1  = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b000010;
                           assign FETCH_Instr_is_sra_a1  = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b000011;
                           assign FETCH_Instr_is_sllv_a1 = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b000100;
                           assign FETCH_Instr_is_srlv_a1 = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b000110;
                           assign FETCH_Instr_is_srav_a1 = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b000111;
                           
                           /*
                           // Mul/Div
                           $is_mfhi  = $rtype && $raw_funct == 6'b010000;
                           $is_mthi  = $rtype && $raw_funct == 6'b010001;
                           $is_mflo  = $rtype && $raw_funct == 6'b010010;
                           $is_mtlo  = $rtype && $raw_funct == 6'b010011;
                           $is_mult  = $rtype && $raw_funct == 6'b011000;
                           $is_multu = $rtype && $raw_funct == 6'b011001;
                           $is_div   = $rtype && $raw_funct == 6'b011010;
                           $is_divu  = $rtype && $raw_funct == 6'b011011;
                           */
                           assign FETCH_Instr_div_mul_a1 = 1'b0;
                           
                           // Jump/Branch
                           assign FETCH_Instr_is_jr_a1     = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b001000;
                           assign FETCH_Instr_is_jalr_a1   = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b001001;
                           assign FETCH_Instr_is_bltz_a1   = FETCH_Instr_raw_opcode_a1 == 6'b000001 && FETCH_Instr_raw_rt_a1[4] == 1'b0 && FETCH_Instr_raw_rt_a1[0] == 1'b0;
                           assign FETCH_Instr_is_bgez_a1   = FETCH_Instr_raw_opcode_a1 == 6'b000001 && FETCH_Instr_raw_rt_a1[4] == 1'b0 && FETCH_Instr_raw_rt_a1[0] == 1'b1;
                           assign FETCH_Instr_is_bltzal_a1 = FETCH_Instr_raw_opcode_a1 == 6'b000001 && FETCH_Instr_raw_rt_a1[4] == 1'b1 && FETCH_Instr_raw_rt_a1[0] == 1'b0;
                           assign FETCH_Instr_is_bgezal_a1 = FETCH_Instr_raw_opcode_a1 == 6'b000001 && FETCH_Instr_raw_rt_a1[4] == 1'b1 && FETCH_Instr_raw_rt_a1[0] == 1'b1;
                           assign FETCH_Instr_is_j_a1      = FETCH_Instr_raw_opcode_a1 == 6'b000010;
                           assign FETCH_Instr_is_jal_a1    = FETCH_Instr_raw_opcode_a1 == 6'b000011;
                           assign FETCH_Instr_is_beq_a1    = FETCH_Instr_raw_opcode_a1 == 6'b000100;
                           assign FETCH_Instr_is_bne_a1    = FETCH_Instr_raw_opcode_a1 == 6'b000101;
                           assign FETCH_Instr_is_blez_a1   = FETCH_Instr_raw_opcode_a1 == 6'b000110;
                           assign FETCH_Instr_is_bgtz_a1   = FETCH_Instr_raw_opcode_a1 == 6'b000111;
                           
                           // Exception
                           assign FETCH_Instr_is_syscall_a1 = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b001100;
                           assign FETCH_Instr_is_break_a1   = FETCH_Instr_rtype_a1 && FETCH_Instr_raw_funct_a1 == 6'b001101;
                           
                           // FPU
                           // TODO: NOT IMPLEMENTED
                           
                           
                           assign FETCH_Instr_illegal_a1 = 1'b0;  // MIPS I doesn't have an illegal instruction exception, just UNPREDICTABLE behavior.
                           assign FETCH_Instr_conditional_branch_a1 = FETCH_Instr_raw_opcode_a1 == 6'b000001 || FETCH_Instr_raw_opcode_a1[5:2] == 4'b0001;
                     
                           
                           // Special-Case Formats
                           assign FETCH_Instr_link_reg_a1 = FETCH_Instr_is_bltzal_a1 && FETCH_Instr_is_bgezal_a1 && FETCH_Instr_is_jal_a1;
                           assign FETCH_Instr_unsigned_imm_a1 = FETCH_Instr_is_addiu_a1 || FETCH_Instr_is_sltiu_a1;
                           assign FETCH_Instr_jump_a1 = FETCH_Instr_is_j_a1 || FETCH_Instr_is_jal_a1;
                           assign FETCH_Instr_indirect_jump_a1 = FETCH_Instr_is_jr_a1 || FETCH_Instr_is_jalr_a1;
                           assign FETCH_Instr_branch_or_jump_a1 = (FETCH_Instr_raw_opcode_a1[5:3] == 3'b000) && ! FETCH_Instr_rtype_a1;  // (does not include syscall & break)
                           assign FETCH_Instr_ld_a1 = FETCH_Instr_raw_opcode_a1[5:3] == 3'b100;
                           assign FETCH_Instr_st_a1 = FETCH_Instr_raw_opcode_a1[5:3] == 3'b101;
                           assign FETCH_Instr_ld_st_a1 = FETCH_Instr_ld_a1 || FETCH_Instr_st_a1;
                           assign FETCH_Instr_ld_st_word_a1 = FETCH_Instr_ld_st_a1 && FETCH_Instr_raw_opcode_a1[1] == 1'b1;
                           assign FETCH_Instr_ld_st_half_a1 = FETCH_Instr_is_lh_a1 || FETCH_Instr_is_lhu_a1 || FETCH_Instr_is_sh_a1;
                           //$ld_st_byte = ...;
                     
                           // Output signals.
                           for (src = 1; src <= 2; src++) begin : L1_FETCH_Instr_Src logic L1_is_reg_a1; logic [4:0] L1_reg_a1; //_/src
                              // Reg valid for this source, based on instruction type.
                              assign L1_is_reg_a1 =
                                  (src == 1) ? ! FETCH_Instr_jtype_a1 :
                                                FETCH_Instr_rtype_a1 || FETCH_Instr_st_a1 || FETCH_Instr_is_beq_a1 || FETCH_Instr_is_bne_a1;
                              assign L1_reg_a1[4:0] =
                                  (src == 1) ? FETCH_Instr_raw_rs_a1 :
                                                FETCH_Instr_raw_rt_a1; end
                           assign FETCH_Instr_imm_value_a1[31:0] = {{16{FETCH_Instr_raw_immediate_a1[15] && ! FETCH_Instr_unsigned_imm_a1}}, FETCH_Instr_raw_immediate_a1[15:0]};
                           
                        // Condition signals must not themselves be conditioned (currently).
                        assign FETCH_Instr_dest_reg_a1[4:0] = FETCH_Instr_second_issue_a1 ? FETCH_Instr_OrigInst_dest_reg_a1 : FETCH_Instr_link_reg_a1 ? 5'b11111 : FETCH_Instr_itype_a1 ? FETCH_Instr_raw_rt_a1 : FETCH_Instr_raw_rd_a1;
                        assign FETCH_Instr_dest_reg_valid_a1 = ((FETCH_Instr_valid_decode_a1 && ! (((FETCH_Instr_is_j_a1 || FETCH_Instr_conditional_branch_a1) && ! FETCH_Instr_link_reg_a1) || FETCH_Instr_st_a1 || FETCH_Instr_is_syscall_a1 || FETCH_Instr_is_break_a1)) || FETCH_Instr_second_issue_a1) &&
                                          | FETCH_Instr_dest_reg_a1;   // r0 not valid.
                                          // Note that load is considered to have a valid dest (which may be marked pending).
                        assign FETCH_Instr_branch_a1 = FETCH_Instr_valid_decode_a1 && FETCH_Instr_conditional_branch_a1;   // (Should be $decode_valid_branch, but keeping consistent with other ISAs.)
                        assign FETCH_Instr_decode_valid_jump_a1 = FETCH_Instr_valid_decode_a1 && FETCH_Instr_jump_a1;
                        assign FETCH_Instr_decode_valid_indirect_jump_a1 = FETCH_Instr_valid_decode_a1 && FETCH_Instr_indirect_jump_a1;
                        // Actually load.
                        assign FETCH_Instr_spec_ld_a1 = FETCH_Instr_valid_decode_a1 && FETCH_Instr_ld_a1;   // (Should be $decode_valid_ld, but keeping consistent with other ISAs.)
                     //_\end_source
                  //_\end_source
               //_\source <builtin> 1   // Instantiated from warp-v_mips-i_4-stage.tlv, 3014 as: m4+indirect(['branch_pred_']M4_BRANCH_PRED)
                  //_\source ./warpv.tlv 2532   // Instantiated from built-in definition.
                     //_@1
                        //_?$branch
                           assign FETCH_Instr_pred_taken_a1 = FETCH_Instr_BranchState_a3[1];
                     //_@2
                        assign FETCH_Instr_branch_or_reset_a2 = (FETCH_Instr_branch_a2 && FETCH_Instr_commit_a2) || FETCH_Instr_reset_a2;
                        //_?$branch_or_reset
                           assign FETCH_Instr_BranchState_a1[1:0] =
                              FETCH_Instr_reset_a2 ? 2'b01 :
                              FETCH_Instr_taken_a2 ? (FETCH_Instr_BranchState_a2 == 2'b11 ? FETCH_Instr_BranchState_a2[1:0] : FETCH_Instr_BranchState_a2 + 2'b1) :
                                       (FETCH_Instr_BranchState_a2 == 2'b00 ? FETCH_Instr_BranchState_a2[1:0] : FETCH_Instr_BranchState_a2 - 2'b1);
                  //_\end_source
               //_\end_source
               
               //_@1
                  // Pending value to write to dest reg. Loads (not replaced by returning ld) write pending.
                  assign FETCH_Instr_reg_wr_pending_a1 = FETCH_Instr_ld_a1 && ! FETCH_Instr_second_issue_a1 && 1'b1;
                  `BOGUS_USE(FETCH_Instr_reg_wr_pending_a1)  // Not used if no bypass and no pending.
                  
                  // ======
                  // Reg Rd
                  // ======
                  
                  // Obtain source register values and pending bit for source registers. Bypass up to 3
                  // stages.
                  // It is not necessary to bypass pending, as we could delay the replay, but we implement
                  // bypass for performance.
                  // Pending has an additional read for the dest register as we need to replay for write-after-write
                  // hazard as well as write-after-read. To replay for dest write with the same timing, we must also
                  // bypass the dest reg's pending bit.
                  //_/regs
                  for (src = 1; src <= 2; src++) begin : L1b_FETCH_Instr_Src logic L1_dummy_a1, L1_dummy_a2, L1_dummy_a3; logic L1_is_reg_condition_a1; logic L1_pending_a1; logic [31:0] L1_reg_value_a1, L1_reg_value_a2; //_/src
                     assign L1_is_reg_condition_a1 = L1_FETCH_Instr_Src[src].L1_is_reg_a1 && FETCH_Instr_valid_decode_a1;  // Note: $is_reg can be set for RISC-V sr0.
                     //_?$is_reg_condition
                        assign {L1_reg_value_a1[31:0], L1_pending_a1} =
                           
                           // Bypass stages. Both register and pending are bypassed.
                           // Bypassed registers must be from instructions that are good-path as of this instruction or are 2nd issuing.
                           (FETCH_Instr_dest_reg_valid_a2 && (FETCH_Instr_GoodPathMask_a1[1] || FETCH_Instr_second_issue_a2) && (FETCH_Instr_dest_reg_a2 == L1_FETCH_Instr_Src[src].L1_reg_a1)) ? {FETCH_Instr_rslt_a2, FETCH_Instr_reg_wr_pending_a2} :
                           (FETCH_Instr_dest_reg_valid_a3 && (FETCH_Instr_GoodPathMask_a1[2] || FETCH_Instr_second_issue_a3) && (FETCH_Instr_dest_reg_a3 == L1_FETCH_Instr_Src[src].L1_reg_a1)) ? {FETCH_Instr_rslt_a3, FETCH_Instr_reg_wr_pending_a3} :
                           
                           {FETCH_Instr_Regs_value_a3[L1_FETCH_Instr_Src[src].L1_reg_a1], FETCH_Instr_Regs_pending_a3[L1_FETCH_Instr_Src[src].L1_reg_a1]};
                     // Replay if this source register is pending.
                     assign FETCH_Instr_Src_replay_a1[src] = L1_is_reg_condition_a1 && L1_pending_a1;
                     assign L1_dummy_a1 = 1'b0; end  // Dummy signal to pull through $ANY expressions when not building verification harness (since SandPiper currently complains about empty $ANY).
                  // Also replay for pending dest reg to keep writes in order. Bypass dest reg pending to support this.
                  assign FETCH_Instr_is_dest_condition_a1 = FETCH_Instr_dest_reg_valid_a1 && FETCH_Instr_valid_decode_a1;  // Note, $dest_reg_valid is 0 for RISC-V sr0.
                  //_?$is_dest_condition
                     assign FETCH_Instr_dest_pending_a1 =
                        
                        // Bypass stages. Both register and pending are bypassed.
                        (FETCH_Instr_dest_reg_valid_a2 && (FETCH_Instr_GoodPathMask_a1[1] || FETCH_Instr_second_issue_a2) && (FETCH_Instr_dest_reg_a2 == FETCH_Instr_dest_reg_a1)) ? FETCH_Instr_reg_wr_pending_a2 :
                        (FETCH_Instr_dest_reg_valid_a3 && (FETCH_Instr_GoodPathMask_a1[2] || FETCH_Instr_second_issue_a3) && (FETCH_Instr_dest_reg_a3 == FETCH_Instr_dest_reg_a1)) ? FETCH_Instr_reg_wr_pending_a3 :
                        
                        FETCH_Instr_Regs_pending_a3[FETCH_Instr_dest_reg_a1];
                  // Combine replay conditions for pending source or dest registers.
                  assign FETCH_Instr_replay_int_a1 = | FETCH_Instr_Src_replay_a1 || (FETCH_Instr_is_dest_condition_a1 && FETCH_Instr_dest_pending_a1);
                  
                  
                  
                  
                  
                  
                  
                  
                  
                     
                     
                        
                           
                           
                           
                           
                           
                           
                           
                     
                     
      
                  
                  
                  
                     
                        
                        
                        
                        
                        
                        
                  
                  
                  
                  assign FETCH_Instr_replay_a1 = FETCH_Instr_replay_int_a1 ;
               
               // =======
               // Execute
               // =======
               //_\source <builtin> 1   // Instantiated from warp-v_mips-i_4-stage.tlv, 3099 as: m4+indirect(M4_isa['_exe'], @M4_EXECUTE_STAGE, @M4_RESULT_STAGE)
                  //_\source ./warpv.tlv 2157   // Instantiated from built-in definition.
                     //_@1
                        // TODO: Branch delay slot not implemented.
                        // (PC is an instruction address, not a byte address.)
                        //_?$valid_decode_branch
                           assign FETCH_Instr_branch_target_a1[31:2] = FETCH_Instr_pc_inc_a1 + FETCH_Instr_imm_value_a1[29:0];
                        //_?$decode_valid_jump  // (JAL, not JALR)
                           assign FETCH_Instr_jump_target_a1[31:2] = {FETCH_Instr_Pc_a1[31:28], FETCH_Instr_raw_address_a1[25:0]};
                     //_@2
                        // Execution.
                        assign FETCH_Instr_valid_exe_a2 = FETCH_Instr_valid_decode_a2; // Execute if we decoded.
                        
                        //_?$valid_exe
                           // Mux immediate values with register values. (Could be REG_RD or EXE stage.)
                           // Mux register value and immediate to produce operand 2.
                           assign FETCH_Instr_op2_value_a2[31:0] = (FETCH_Instr_raw_opcode_a2[5:3] == 3'b001) ? FETCH_Instr_imm_value_a2 : L1b_FETCH_Instr_Src[2].L1_reg_value_a2;
                           // Mux RS[4:0] and SHAMT to produce shift amount.
                           assign FETCH_Instr_shift_amount_a2[4:0] = (FETCH_Instr_is_sllv_a2 || FETCH_Instr_is_srlv_a2 || FETCH_Instr_is_srav_a2) ? L1b_FETCH_Instr_Src[2].L1_reg_value_a2[4:0] : FETCH_Instr_raw_shamt_a2;
                           
                           assign FETCH_Instr_equal_a2 = L1b_FETCH_Instr_Src[1].L1_reg_value_a2 == L1b_FETCH_Instr_Src[2].L1_reg_value_a2;
                           assign FETCH_Instr_equal_zero_a2 = ! | L1b_FETCH_Instr_Src[1].L1_reg_value_a2;
                           assign FETCH_Instr_ltz_a2 = L1b_FETCH_Instr_Src[1].L1_reg_value_a2[31];
                           assign FETCH_Instr_gtz_a2 = ! FETCH_Instr_ltz_a2 && ! FETCH_Instr_equal_zero_a2;
                        //_?$branch
                           assign FETCH_Instr_taken_a2 =
                              FETCH_Instr_jtype_a2 ||
                              (FETCH_Instr_is_jr_a2 || FETCH_Instr_is_jalr_a2) ||
                              (FETCH_Instr_is_beq_a2  &&   FETCH_Instr_equal_a2) ||
                              (FETCH_Instr_is_bne_a2  && ! FETCH_Instr_equal_a2) ||
                              ((FETCH_Instr_is_bltz_a2 || FETCH_Instr_is_bltzal_a2) &&   FETCH_Instr_ltz_a2) ||
                              ((FETCH_Instr_is_bgez_a2 || FETCH_Instr_is_bgezal_a2) && ! FETCH_Instr_ltz_a2) ||
                              (FETCH_Instr_is_blez_a2 && ! FETCH_Instr_gtz_a2) ||
                              (FETCH_Instr_is_bgtz_a2 &&   FETCH_Instr_gtz_a2);
                        //_?$decode_valid_indirect_jump  // (JR/JALR)
                           assign FETCH_Instr_indirect_jump_target_a2[31:2] = L1b_FETCH_Instr_Src[1].L1_reg_value_a2[31:2];
                        //_?$valid_exe
                           // Compute each individual instruction result, combined per-instruction by a macro.
                           
                           // Load/Store
                           // Load instructions. If returning ld is enabled, load instructions write no meaningful result, so we use zeros.
                           assign FETCH_Instr_ld_rslt_a2[31:0] = 32'b0;
                           
                           assign FETCH_Instr_add_sub_rslt_a2[31:0] = (FETCH_Instr_is_sub_a2 || FETCH_Instr_is_subu_a2) ? L1b_FETCH_Instr_Src[1].L1_reg_value_a2 - FETCH_Instr_op2_value_a2 : L1b_FETCH_Instr_Src[1].L1_reg_value_a2 + FETCH_Instr_op2_value_a2;
                           assign FETCH_Instr_is_add_sub_a2 = FETCH_Instr_is_add_a2 || FETCH_Instr_is_sub_a2 || FETCH_Instr_is_addu_a2 || FETCH_Instr_is_subu_a2 || FETCH_Instr_is_addi_a2 || FETCH_Instr_is_addiu_a2;
                           assign FETCH_Instr_compare_rslt_a2[31:0] = {31'b0, (L1b_FETCH_Instr_Src[1].L1_reg_value_a2 < FETCH_Instr_op2_value_a2) ^ L1b_FETCH_Instr_Src[1].L1_reg_value_a2[31] ^ FETCH_Instr_op2_value_a2[31]};
                           assign FETCH_Instr_is_compare_a2 = FETCH_Instr_is_slt_a2 || FETCH_Instr_is_sltu_a2 || FETCH_Instr_is_slti_a2 || FETCH_Instr_is_sltiu_a2;
                           assign FETCH_Instr_logical_rslt_a2[31:0] =
                                   ({32{FETCH_Instr_is_and_a2 || FETCH_Instr_is_andi_a2}} & (L1b_FETCH_Instr_Src[1].L1_reg_value_a2 & FETCH_Instr_op2_value_a2)) |
                                   ({32{FETCH_Instr_is_or_a2  || FETCH_Instr_is_ori_a2 }} & (L1b_FETCH_Instr_Src[1].L1_reg_value_a2 | FETCH_Instr_op2_value_a2)) |
                                   ({32{FETCH_Instr_is_xor_a2 || FETCH_Instr_is_xori_a2}} & (L1b_FETCH_Instr_Src[1].L1_reg_value_a2 ^ FETCH_Instr_op2_value_a2)) |
                                   ({32{FETCH_Instr_is_nor_a2            }} & (L1b_FETCH_Instr_Src[1].L1_reg_value_a2 | ~ L1b_FETCH_Instr_Src[2].L1_reg_value_a2));
                           assign FETCH_Instr_is_logical_a2 = FETCH_Instr_is_and_a2 || FETCH_Instr_is_andi_a2 || FETCH_Instr_is_or_a2 || FETCH_Instr_is_ori_a2 || FETCH_Instr_is_xor_a2 || FETCH_Instr_is_xori_a2 || FETCH_Instr_is_nor_a2;
                           assign FETCH_Instr_shift_rslt_a2[31:0] =
                                   ({32{FETCH_Instr_is_sll_a2 || FETCH_Instr_is_sllv_a2}} & (L1b_FETCH_Instr_Src[1].L1_reg_value_a2 << FETCH_Instr_shift_amount_a2)) |
                                   ({32{FETCH_Instr_is_srl_a2 || FETCH_Instr_is_srlv_a2}} & (L1b_FETCH_Instr_Src[1].L1_reg_value_a2 >> FETCH_Instr_shift_amount_a2)) |
                                   ({32{FETCH_Instr_is_sra_a2 || FETCH_Instr_is_srav_a2}} & (L1b_FETCH_Instr_Src[1].L1_reg_value_a2 << FETCH_Instr_shift_amount_a2));
                           assign FETCH_Instr_is_shift_a2 = FETCH_Instr_is_sll_a2 || FETCH_Instr_is_srl_a2 || FETCH_Instr_is_sra_a2 || FETCH_Instr_is_sllv_a2 || FETCH_Instr_is_srlv_a2 || FETCH_Instr_is_srav_a2;
                           assign FETCH_Instr_lui_rslt_a2[31:0] = {FETCH_Instr_raw_immediate_a2, 16'b0}; 
                           
                     //_@2
                        //_?$valid_exe
                           assign FETCH_Instr_rslt_a2[31:0] =
                                FETCH_Instr_second_issue_a2 ? FETCH_Instr_OrigInst_ld_rslt_a2 :
                                   ({32{FETCH_Instr_spec_ld_a2}}    & FETCH_Instr_ld_rslt_a2) |
                                   ({32{FETCH_Instr_is_add_sub_a2}} & FETCH_Instr_add_sub_rslt_a2) |
                                   ({32{FETCH_Instr_is_compare_a2}} & FETCH_Instr_compare_rslt_a2) |
                                   ({32{FETCH_Instr_is_logical_a2}} & FETCH_Instr_logical_rslt_a2) |
                                   ({32{FETCH_Instr_is_shift_a2}}   & FETCH_Instr_shift_rslt_a2) |
                                   ({32{FETCH_Instr_is_lui_a2}}     & FETCH_Instr_lui_rslt_a2) |
                                   ({32{FETCH_Instr_branch_or_jump_a2}} & {FETCH_Instr_pc_inc_a2, 2'b0});   // (no delay slot)
                           
                           
                           
                        // Memory inputs.
                        // TODO: Logic for load/store is cut-n-paste from RISC-V, blindly assuming it is spec'ed the same for MIPS I?
                        //       Load/Store half instructions unique vs. RISC-V and are not treated properly.
                        //_?$valid_exe
                           assign FETCH_Instr_unnatural_addr_trap_a2 = (FETCH_Instr_ld_st_word_a2 && (FETCH_Instr_addr_a2[1:0] != 2'b00)) || (FETCH_Instr_ld_st_half_a2 && FETCH_Instr_addr_a2[0]);
                        assign FETCH_Instr_ld_st_cond_a2 = FETCH_Instr_ld_st_a2 && FETCH_Instr_valid_exe_a2;
                        //_?$ld_st_cond
                           assign FETCH_Instr_addr_a2[31:0] = L1b_FETCH_Instr_Src[1].L1_reg_value_a2 + FETCH_Instr_imm_value_a2;
                           
                           // Hardware assumes natural alignment. Otherwise, trap, and handle in s/w (though no s/w provided).
                        assign FETCH_Instr_st_cond_a2 = FETCH_Instr_st_a2 && FETCH_Instr_valid_exe_a2;
                        //_?$st_cond
                           // Provide a value to store, naturally-aligned to memory, that will work regardless of the lower $addr bits.
                           assign FETCH_Instr_st_reg_value_a2[31:0] = L1b_FETCH_Instr_Src[2].L1_reg_value_a2;
                           assign FETCH_Instr_st_value_a2[31:0] =
                                FETCH_Instr_ld_st_word_a2 ? FETCH_Instr_st_reg_value_a2 :            // word
                                FETCH_Instr_ld_st_half_a2 ? {2{FETCH_Instr_st_reg_value_a2[15:0]}} : // half
                                              {4{FETCH_Instr_st_reg_value_a2[7:0]}};   // byte
                           assign FETCH_Instr_st_mask_a2[3:0] =
                                FETCH_Instr_ld_st_word_a2 ? 4'hf :                     // word
                                FETCH_Instr_ld_st_half_a2 ? (FETCH_Instr_addr_a2[1] ? 4'hc : 4'h3) : // half
                                              (4'h1 << FETCH_Instr_addr_a2[1:0]);      // byte
                        // Swizzle bytes for load result (assuming natural alignment).
                        //_?$second_issue
                           //_/orig_inst
                              // (Verilator didn't like indexing $ld_value by signal math, so we do these the long way.)
                              assign FETCH_Instr_OrigInst_sign_bit_a2 =
                                 ! (FETCH_Instr_OrigInst_is_lbu_a2 || FETCH_Instr_OrigInst_is_lhu_a2) && (  // Signed && ...
                                    FETCH_Instr_OrigInst_ld_st_word_a2 ? FETCH_Instr_OrigInst_ld_value_a2[31] :
                                    FETCH_Instr_OrigInst_ld_st_half_a2 ? (FETCH_Instr_OrigInst_addr_a2[1] ? FETCH_Instr_OrigInst_ld_value_a2[31] : FETCH_Instr_OrigInst_ld_value_a2[15]) :
                                                  ((FETCH_Instr_OrigInst_addr_a2[1:0] == 2'b00) ? FETCH_Instr_OrigInst_ld_value_a2[7] :
                                                   (FETCH_Instr_OrigInst_addr_a2[1:0] == 2'b01) ? FETCH_Instr_OrigInst_ld_value_a2[15] :
                                                   (FETCH_Instr_OrigInst_addr_a2[1:0] == 2'b10) ? FETCH_Instr_OrigInst_ld_value_a2[23] :
                                                                           FETCH_Instr_OrigInst_ld_value_a2[31]
                                                  )
                                 );
                              assign FETCH_Instr_OrigInst_ld_rslt_a2[31:0] =
                                   FETCH_Instr_OrigInst_ld_st_word_a2 ? FETCH_Instr_OrigInst_ld_value_a2 :
                                   FETCH_Instr_OrigInst_ld_st_half_a2 ? {{16{FETCH_Instr_OrigInst_sign_bit_a2}}, FETCH_Instr_OrigInst_addr_a2[1] ? FETCH_Instr_OrigInst_ld_value_a2[31:16] :
                                                                              FETCH_Instr_OrigInst_ld_value_a2[15:0] } :
                                                 {{24{FETCH_Instr_OrigInst_sign_bit_a2}}, (FETCH_Instr_OrigInst_addr_a2[1:0] == 2'b00) ? FETCH_Instr_OrigInst_ld_value_a2[7:0]   :
                                                                   (FETCH_Instr_OrigInst_addr_a2[1:0] == 2'b01) ? FETCH_Instr_OrigInst_ld_value_a2[15:8]  :
                                                                   (FETCH_Instr_OrigInst_addr_a2[1:0] == 2'b10) ? FETCH_Instr_OrigInst_ld_value_a2[23:16] :
                                                                                           FETCH_Instr_OrigInst_ld_value_a2[31:24]};
                        
                        
                        // ISA-specific trap conditions:
                        assign FETCH_Instr_non_aborting_isa_trap_a2 = FETCH_Instr_is_break_a2 || FETCH_Instr_is_syscall_a2;
                        assign FETCH_Instr_aborting_isa_trap_a2 =     (FETCH_Instr_ld_st_a2 && FETCH_Instr_unnatural_addr_trap_a2);
                  //_\end_source
               //_\end_source
               
               //_@1
                  assign FETCH_Instr_pred_taken_branch_a1 = FETCH_Instr_pred_taken_a1 && FETCH_Instr_branch_a1;
               //_@2
      
                  // =======
                  // Control
                  // =======
                  
                  // Execute stage redirect conditions.
                  assign FETCH_Instr_non_pipelined_a2 = FETCH_Instr_div_mul_a2 ;
                  assign FETCH_Instr_replay_trap_a2 = 1'b0;
                  assign FETCH_Instr_aborting_trap_a2 = FETCH_Instr_replay_trap_a2 || FETCH_Instr_illegal_a2 || FETCH_Instr_aborting_isa_trap_a2;
                  assign FETCH_Instr_non_aborting_trap_a2 = FETCH_Instr_non_aborting_isa_trap_a2;
                  assign FETCH_Instr_mispred_branch_a2 = FETCH_Instr_branch_a2 && ! (FETCH_Instr_conditional_branch_a2 && (FETCH_Instr_taken_a2 == FETCH_Instr_pred_taken_a2));
                  //_?$valid_decode_branch
                     assign FETCH_Instr_branch_redir_pc_a2[31:2] =
                        // If fallthrough predictor, branch mispred always redirects taken, otherwise PC+1 for not-taken.
                        (! FETCH_Instr_taken_a2) ? FETCH_Instr_Pc_a2 + 30'b1 :
                        FETCH_Instr_branch_target_a2;
      
                  assign FETCH_Instr_trap_target_a2[31:2] = FETCH_Instr_replay_trap_a2 ? FETCH_Instr_Pc_a2 : {30{1'b1}};  // TODO: What should this be? Using ones to terminate test for now.
                  
                  // Determine whether the instruction should commit it's result.
                  //
                  // Abort: Instruction triggers a condition causing a no-commit.
                  // Commit: Ultimate decision to commit results of this instruction, considering aborts and
                  //         prior-instruction redirects (good-path)
                  //
                  // Treatment of loads:
                  //    Loads will commit. They write a garbage value and "pending" to the register file.
                  //    Returning loads clobber an instruction. This instruction is $abort'ed (as is the
                  //    returning load, since they are one in the same). Returning load must explicitly
                  //    write results.
                  //
                  
                  assign FETCH_Instr_abort_a2 = 1'b0 || FETCH_Instr_second_issue_a2 || FETCH_Instr_NoFetch_a2 || FETCH_Instr_replay_a2 || FETCH_Instr_aborting_trap_a2;  // Note that register bypass logic requires that abort conditions also redirect.
                  // $commit = m4_prev_instr_valid_through(M4_MAX_REDIRECT_BUBBLES + 1), where +1 accounts for this
                  // instruction's redirects. However, to meet timing, we consider this instruction separately, so,
                  // commit if valid as of the latest redirect from prior instructions and not abort of this instruction.
                  
                  // Normal case:
                  assign FETCH_Instr_commit_a2 = (! FETCH_Instr_reset_a2 && FETCH_Instr_next_good_path_mask_a0[3]) && ! FETCH_Instr_abort_a2;
                  
                  
                  // Conditions that commit results.
                  assign FETCH_Instr_valid_dest_reg_valid_a2 = (FETCH_Instr_dest_reg_valid_a2 && FETCH_Instr_commit_a2) || (FETCH_Instr_second_issue_a2  );
      
                  
                  
                  
                  assign FETCH_Instr_valid_ld_a2 = FETCH_Instr_ld_a2 && FETCH_Instr_commit_a2;
                  assign FETCH_Instr_valid_st_a2 = FETCH_Instr_st_a2 && FETCH_Instr_commit_a2;
      
         //_\source ./warpv.tlv 2464   // Instantiated from warp-v_mips-i_4-stage.tlv, 3158 as: m4+fixed_latency_fake_memory(/top, 0)
            // This macro assumes little-endian.
            
            //_|fetch
               //_/instr
                  // ====
                  // Load
                  // ====
                  //_@3
                     for (bank = 0; bank <= 4-1; bank++) begin : L1_FETCH_Instr_Bank logic [31:0] L1_addr_a3; logic [(32 / 4) - 1 : 0] L1_ld_value_a3; logic L1_spec_ld_a3; logic [3:0] L1_st_mask_a3; logic [31:0] L1_st_value_a3; logic L1_valid_st_a3; logic [(32 / 4) - 1 : 0] L1_Mem_Value_a3 [31:0]; //_/bank
                        assign {L1_addr_a3[31:0], L1_spec_ld_a3, L1_st_mask_a3[3:0], L1_st_value_a3[31:0], L1_valid_st_a3} = {FETCH_Instr_addr_a3, FETCH_Instr_spec_ld_a3, FETCH_Instr_st_mask_a3, FETCH_Instr_st_value_a3, FETCH_Instr_valid_st_a3}; // Find signal from outside of /bank.
                        //_/mem
                        //_?$spec_ld
                           assign L1_ld_value_a3[(32 / 4) - 1 : 0] = L1_Mem_Value_a3[L1_addr_a3[4 + 2 : 2]];
                  
                        // Array writes are not currently permitted to use assignment
                        // syntax, so \always_comb is used, and this must be outside of
                        // when conditions, so we need to use if. <<1 because no <= support
                        // in this context. (This limitation will be lifted.)
         
                        // =====
                        // Store
                        // =====
         
                        /*SV_plus*/
                           always @ (posedge clk) begin
                              if (L1_valid_st_a3 && L1_st_mask_a3[bank])
                                 L1_Mem_Value_a3[L1_addr_a3[4 + 2 : 2]][(32 / 4) - 1 : 0] <= L1_st_value_a3[(bank + 1) * (32 / 4) - 1: bank * (32 / 4)];
                           end end
                     // Combine $ld_value per bank, assuming little-endian.
                     //$ld_value[M4_WORD_RANGE] = /bank[*]$ld_value;
                     // Unfortunately formal verification tools can't handle multiple packed dimensions produced by the expression above, so we
                     // build the concatination.
                     assign FETCH_Instr_ld_value_a3[31:0] = {L1_FETCH_Instr_Bank[3].L1_ld_value_a3, L1_FETCH_Instr_Bank[2].L1_ld_value_a3, L1_FETCH_Instr_Bank[1].L1_ld_value_a3, L1_FETCH_Instr_Bank[0].L1_ld_value_a3};
         
            // Return loads in |mem pipeline. We just hook up the |mem pipeline to the |fetch pipeline w/ the
            // right alignment.
            //_|mem
               //_/data
                  //_@3
                     assign {MEM_Data_addr_a3[1:0], MEM_Data_dest_reg_a3[4:0], MEM_Data_is_lbu_a3, MEM_Data_is_lhu_a3, MEM_Data_ld_st_half_a3, MEM_Data_ld_st_word_a3, MEM_Data_ld_value_a3[31:0], MEM_Data_valid_ld_a3} = {FETCH_Instr_addr_a3[1:0], FETCH_Instr_dest_reg_a3, FETCH_Instr_is_lbu_a3, FETCH_Instr_is_lhu_a3, FETCH_Instr_ld_st_half_a3, FETCH_Instr_ld_st_word_a3, FETCH_Instr_ld_value_a3, FETCH_Instr_valid_ld_a3};
                     for (src = 1; src <= 2; src++) begin : L1_MEM_Data_Src logic L1_dummy_a3, L1_dummy_a4; //_/src
                        assign {L1_dummy_a3} = {L1b_FETCH_Instr_Src[src].L1_dummy_a3}; end
         //_\end_source
         //_|fetch
            //_/instr
               //_@3
                  // =========
                  // Reg Write
                  // =========
      
                  assign FETCH_Instr_reg_write_a3 = FETCH_Instr_reset_a3 ? 1'b0 : FETCH_Instr_valid_dest_reg_valid_a3;
                  /*SV_plus*/
                     always @ (posedge clk) begin
                        if (FETCH_Instr_reg_write_a3)
                           FETCH_Instr_Regs_value_a3[FETCH_Instr_dest_reg_a3][31:0] <= FETCH_Instr_rslt_a3;
                     end
                  
                  // Write $pending along with $value, but coded differently because it must be reset.
                  for (regs = 1; regs <= 31; regs++) begin : L1b_FETCH_Instr_Regs //_/regs
                     assign FETCH_Instr_Regs_pending_a2[regs] = ! FETCH_Instr_reset_a3 && (((regs == FETCH_Instr_dest_reg_a3) && FETCH_Instr_valid_dest_reg_valid_a3) ? FETCH_Instr_reg_wr_pending_a3 : FETCH_Instr_Regs_pending_a3[regs]); end
                   
                  
                  
                  
                  
                  
                     
                        
                           
                     
                  
                  
                  
                     
                    
                  
                  
               //_@3
                  `BOGUS_USE(L1_FETCH_Instr_OrigInst_Src[2].L1_dummy_a3) // To pull $dummy through $ANY expressions, avoiding empty expressions.
      //_\end_source
      
      
      
   //_\end_source
   //_\source ./warpv.tlv 3196   // Instantiated from warp-v_mips-i_4-stage.tlv, 12 as: m4+warpv_makerchip_cnt10_tb()
      //_|fetch
         //_/instr
            //_@3
               // Assert these to end simulation (before Makerchip cycle limit).
               assign FETCH_Instr_ReachedEnd_a2 = FETCH_Instr_reset_a3 ? 1'b0 : FETCH_Instr_ReachedEnd_a3 || FETCH_Instr_Pc_a3 == {30{1'b1}};
               assign FETCH_Instr_Reg4Became45_a2 = FETCH_Instr_reset_a3 ? 1'b0 : FETCH_Instr_Reg4Became45_a3 || (FETCH_Instr_ReachedEnd_a3 && FETCH_Instr_Regs_value_a3[4] == 32'd45);
               assign FETCH_Instr_passed_a3 = ! FETCH_Instr_reset_a3 && FETCH_Instr_ReachedEnd_a3 && FETCH_Instr_Reg4Became45_a3;
               assign FETCH_Instr_failed_a3 = ! FETCH_Instr_reset_a3 && (cyc_cnt > 200 || (cyc_cnt > 5 && FETCH_Instr_commit_a3 && FETCH_Instr_illegal_a3));
   //_\end_source
   //_\source ./warpv.tlv 4013   // Instantiated from warp-v_mips-i_4-stage.tlv, 13 as: m4+makerchip_pass_fail()
      //_|done
         //_@0
            // Assert these to end simulation (before Makerchip cycle limit).
            assign passed = & FETCH_Instr_passed_a3;
            assign failed = | FETCH_Instr_failed_a3;
   endgenerate //_\end_source
//_\SV
   endmodule
