`line 2 "top.tlv" 0 //_\TLV_version 1d: tl-x.org, generated by SandPiper(TM) 1.9-2018/02/11-beta
`include "sp_default.vh" //_\SV
//m4_include_url(['https://raw.githubusercontent.com/develone/sandpiper_test/master/axil2axi/rtl/axilxbar.v'])
//m4_include_url(['https://raw.githubusercontent.com/develone/sandpiper_test/master/axil2axi/rtl/axilsafety.v'])
//m4_include_url(['https://raw.githubusercontent.com/develone/sandpiper_test/master/axil2axi/rtl/axi2axi3.v'])
// Included URL: "https://raw.githubusercontent.com/develone/sandpiper_test/master/axil2axi/rtl/axil2axis.v"
   // =========================================
   // Welcome!  Try the tutorials via the menu.
   // =========================================

   // Default Makerchip TL-Verilog Code Template
   
   // Macro providing required top-level module definition, random
   // stimulus support, and Verilator config.
   module top(input logic clk, input logic reset, input logic [31:0] cyc_cnt, output logic passed, output logic failed);    /* verilator lint_save */ /* verilator lint_off UNOPTFLAT */  bit [256:0] RW_rand_raw; bit [256+63:0] RW_rand_vect; pseudo_rand #(.WIDTH(257)) pseudo_rand (clk, reset, RW_rand_raw[256:0]); assign RW_rand_vect[256+63:0] = {RW_rand_raw[62:0], RW_rand_raw};  /* verilator lint_restore */  /* verilator lint_off WIDTH */ /* verilator lint_off UNOPTFLAT */   // (Expanded in Nav-TLV pane.)
`include "top_gen.sv" //_\TLV
   //_|axil
      
      //_@0
 
         
         
         
         
         assign AXIL_reset_a0 = reset;
         assign AXIL_S_AXI_AWVALID_a0 = S_AXI_AWVALID;
         assign AXIL_S_AXI_AWREADY_a0 = S_AXI_AWREADY;
         assign AXIL_S_AXI_AWADDR_a0[C_AXI_ADDR_WIDTH-1:0] = S_AXI_AWADDR;
         
         assign AXIL_S_AXI_WVALID_a0 = S_AXI_WVALID;
         assign AXIL_S_AXI_WREADY_a0 = S_AXI_WREADY;
         
      //_@5
         assign S_AXI_AWVALID = AXIL_S_AXI_AWVALID_a5;
         assign S_AXI_AWADDR = AXIL_S_AXI_AWADDR_a5[C_AXI_ADDR_WIDTH-1:0];
         
         assign S_AXI_AWREADY = AXIL_S_AXI_AWREADY_a5;
         assign S_AXI_WVALID = AXIL_S_AXI_WVALID_a5;
         assign S_AXI_WREADY = AXIL_S_AXI_WREADY_a5;
         
         
         
         
         
         
         
       
         

   //...

   // Assert these to end simulation (before Makerchip cycle limit).
   assign passed = cyc_cnt > 40;
   assign failed = 1'b0; endgenerate
//_\SV
   endmodule
