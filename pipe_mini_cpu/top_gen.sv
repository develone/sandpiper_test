// Generated by SandPiper(TM) 1.9-2018/02/11-beta from Redwood EDA.
// (Installed here: /home/devel/SandPiper_1.9-2018_02_11-beta_distro.)
// Redwood EDA does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


`include "sandpiper_gen.vh"


genvar mem, regs, src;


//
// Signals declared top-level.
//

// For $reset.
logic L0_reset_a0;

// For |fetch/instr$Pc.
logic [11:0] FETCH_Instr_Pc_n1,
             FETCH_Instr_Pc_a0,
             FETCH_Instr_Pc_a1,
             FETCH_Instr_Pc_a2,
             FETCH_Instr_Pc_a3,
             FETCH_Instr_Pc_a4,
             FETCH_Instr_Pc_a5;

// For |fetch/instr$SquashCnt.
logic [2:0] FETCH_Instr_SquashCnt_a1,
            FETCH_Instr_SquashCnt_a2;

// For |fetch/instr$addr.
logic [11:0] FETCH_Instr_addr_a2;
logic [4:0] FETCH_Instr_addr_a3;

// For |fetch/instr$branch.
logic FETCH_Instr_branch_a1,
      FETCH_Instr_branch_a2,
      FETCH_Instr_branch_a3;

// For |fetch/instr$branch_target.
logic [11:0] FETCH_Instr_branch_target_a3;

// For |fetch/instr$compare_rslt.
logic FETCH_Instr_compare_rslt_a2;

// For |fetch/instr$conditional_branch.
logic FETCH_Instr_conditional_branch_a1,
      FETCH_Instr_conditional_branch_a2;

// For |fetch/instr$dest_char.
logic [7:0] FETCH_Instr_dest_char_a1;

// For |fetch/instr$dest_is_reg.
logic FETCH_Instr_dest_is_reg_a1,
      FETCH_Instr_dest_is_reg_a2,
      FETCH_Instr_dest_is_reg_a3;

// For |fetch/instr$dest_reg.
logic [2:0] FETCH_Instr_dest_reg_a1,
            FETCH_Instr_dest_reg_a2,
            FETCH_Instr_dest_reg_a3,
            FETCH_Instr_dest_reg_a4,
            FETCH_Instr_dest_reg_a5;

// For |fetch/instr$dest_tmp.
logic [7:0] FETCH_Instr_dest_tmp_a1;

// For |fetch/instr$dest_valid.
logic FETCH_Instr_dest_valid_a1,
      FETCH_Instr_dest_valid_a2;

// For |fetch/instr$illegal.
logic FETCH_Instr_illegal_a1,
      FETCH_Instr_illegal_a2;

// For |fetch/instr$illegal_dest.
logic FETCH_Instr_illegal_dest_a1;

// For |fetch/instr$jump.
logic FETCH_Instr_jump_a1,
      FETCH_Instr_jump_a2;

// For |fetch/instr$jump_target.
logic [11:0] FETCH_Instr_jump_target_a2;

// For |fetch/instr$ld.
logic FETCH_Instr_ld_a1,
      FETCH_Instr_ld_a2,
      FETCH_Instr_ld_a3,
      FETCH_Instr_ld_a4,
      FETCH_Instr_ld_a5;

// For |fetch/instr$ld_rslt.
logic [11:0] FETCH_Instr_ld_rslt_a3,
             FETCH_Instr_ld_rslt_a4,
             FETCH_Instr_ld_rslt_a5,
             FETCH_Instr_ld_rslt_a6;

// For |fetch/instr$mispred_branch.
logic FETCH_Instr_mispred_branch_a2;

// For |fetch/instr$no_dest.
logic FETCH_Instr_no_dest_a1;

// For |fetch/instr$op_char.
logic [7:0] FETCH_Instr_op_char_a1;

// For |fetch/instr$op_compare.
logic FETCH_Instr_op_compare_a1,
      FETCH_Instr_op_compare_a2;

// For |fetch/instr$op_full.
logic FETCH_Instr_op_full_a1,
      FETCH_Instr_op_full_a2;

// For |fetch/instr$op_full_rslt.
logic [11:0] FETCH_Instr_op_full_rslt_a2;

// For |fetch/instr$raw.
logic [39:0] FETCH_Instr_raw_a0,
             FETCH_Instr_raw_a1 /* covering: [23:0] & [39:32] */;

// For |fetch/instr$reg_write.
logic FETCH_Instr_reg_write_a3;

// For |fetch/instr$replay.
logic FETCH_Instr_replay_a1,
      FETCH_Instr_replay_a2;

// For |fetch/instr$reset.
logic FETCH_Instr_reset_a0,
      FETCH_Instr_reset_a1,
      FETCH_Instr_reset_a2,
      FETCH_Instr_reset_a3;

// For |fetch/instr$returning_ld.
logic FETCH_Instr_returning_ld_a0,
      FETCH_Instr_returning_ld_a1,
      FETCH_Instr_returning_ld_a2,
      FETCH_Instr_returning_ld_a3;

// For |fetch/instr$returning_ld_reg.
logic [2:0] FETCH_Instr_returning_ld_reg_a1;

// For |fetch/instr$rslt.
logic [11:0] FETCH_Instr_rslt_a2,
             FETCH_Instr_rslt_a3;

// For |fetch/instr$squash.
logic FETCH_Instr_squash_a2,
      FETCH_Instr_squash_a3;

// For |fetch/instr$st.
logic FETCH_Instr_st_a1,
      FETCH_Instr_st_a2;

// For |fetch/instr$valid_illegal.
logic FETCH_Instr_valid_illegal_a2,
      FETCH_Instr_valid_illegal_a3,
      FETCH_Instr_valid_illegal_a4,
      FETCH_Instr_valid_illegal_a5,
      FETCH_Instr_valid_illegal_a6;

// For |fetch/instr$valid_jump.
logic FETCH_Instr_valid_jump_a2;

// For |fetch/instr$valid_ld.
logic FETCH_Instr_valid_ld_a2,
      FETCH_Instr_valid_ld_a3,
      FETCH_Instr_valid_ld_a4;

// For |fetch/instr$valid_mispred_branch.
logic FETCH_Instr_valid_mispred_branch_a2,
      FETCH_Instr_valid_mispred_branch_a3;

// For |fetch/instr$valid_st.
logic FETCH_Instr_valid_st_a2,
      FETCH_Instr_valid_st_a3;

// For |fetch/instr$write_pc.
logic FETCH_Instr_write_pc_a1;

// For |fetch/instr/mem$Word.
logic [11:0] FETCH_Instr_Mem_Word_a2 [31:0],
             FETCH_Instr_Mem_Word_a3 [31:0];

// For |fetch/instr/op$add.
logic FETCH_Instr_Op_add_a1,
      FETCH_Instr_Op_add_a2;

// For |fetch/instr/op$and.
logic FETCH_Instr_Op_and_a1,
      FETCH_Instr_Op_and_a2;

// For |fetch/instr/op$arith.
logic FETCH_Instr_Op_arith_a1;

// For |fetch/instr/op$bitwise.
logic FETCH_Instr_Op_bitwise_a1;

// For |fetch/instr/op$char.
logic [7:0] FETCH_Instr_Op_char_a1;

// For |fetch/instr/op$combine.
logic FETCH_Instr_Op_combine_a1,
      FETCH_Instr_Op_combine_a2;

// For |fetch/instr/op$compare.
logic FETCH_Instr_Op_compare_a1;

// For |fetch/instr/op$conditional.
logic FETCH_Instr_Op_conditional_a1,
      FETCH_Instr_Op_conditional_a2;

// For |fetch/instr/op$div.
logic FETCH_Instr_Op_div_a1,
      FETCH_Instr_Op_div_a2;

// For |fetch/instr/op$eq.
logic FETCH_Instr_Op_eq_a1,
      FETCH_Instr_Op_eq_a2;

// For |fetch/instr/op$full.
logic FETCH_Instr_Op_full_a1;

// For |fetch/instr/op$ge.
logic FETCH_Instr_Op_ge_a1,
      FETCH_Instr_Op_ge_a2;

// For |fetch/instr/op$gt.
logic FETCH_Instr_Op_gt_a1,
      FETCH_Instr_Op_gt_a2;

// For |fetch/instr/op$illegal.
logic FETCH_Instr_Op_illegal_a1;

// For |fetch/instr/op$ld.
logic FETCH_Instr_Op_ld_a1;

// For |fetch/instr/op$le.
logic FETCH_Instr_Op_le_a1,
      FETCH_Instr_Op_le_a2;

// For |fetch/instr/op$lt.
logic FETCH_Instr_Op_lt_a1,
      FETCH_Instr_Op_lt_a2;

// For |fetch/instr/op$mem.
logic FETCH_Instr_Op_mem_a1;

// For |fetch/instr/op$mul.
logic FETCH_Instr_Op_mul_a1,
      FETCH_Instr_Op_mul_a2;

// For |fetch/instr/op$ne.
logic FETCH_Instr_Op_ne_a1,
      FETCH_Instr_Op_ne_a2;

// For |fetch/instr/op$or.
logic FETCH_Instr_Op_or_a1,
      FETCH_Instr_Op_or_a2;

// For |fetch/instr/op$st.
logic FETCH_Instr_Op_st_a1;

// For |fetch/instr/op$sub.
logic FETCH_Instr_Op_sub_a1,
      FETCH_Instr_Op_sub_a2;

// For |fetch/instr/op$wide_imm.
logic FETCH_Instr_Op_wide_imm_a1,
      FETCH_Instr_Op_wide_imm_a2;

// For |fetch/instr/regs$Value.
logic [11:0] FETCH_Instr_Regs_Value_a2 [7:0],
             FETCH_Instr_Regs_Value_a3 [7:0];

// For |fetch/instr/regs$next_pending.
logic FETCH_Instr_Regs_next_pending_a2 [7:0],
      FETCH_Instr_Regs_next_pending_a3 [7:0];

// For |fetch/instr/src$illegal.
logic [2:1] FETCH_Instr_Src_illegal_a1;

// For |fetch/instr/src$replay.
logic [2:1] FETCH_Instr_Src_replay_a1;


//
// Scope: |fetch
//

//
// Scope: |fetch/instr
//

// Clock signals.
logic clkP_FETCH_Instr_dest_valid_a3 ;
logic clkP_FETCH_Instr_ld_a3 ;
logic clkP_FETCH_Instr_ld_a4 ;
logic clkP_FETCH_Instr_ld_a5 ;
logic clkP_FETCH_Instr_ld_a6 ;

//
// Scope: |fetch/instr/src[2:1]
//

// Clock signals.
logic clkP_FETCH_Instr_Src_valid_a2 [2:1];
logic clkP_FETCH_Instr_Src_valid_a3 [2:1];


generate


   //
   // Scope: |fetch
   //


      //
      // Scope: /instr
      //

         // For $Pc.
         always_ff @(posedge clk) FETCH_Instr_Pc_a0[11:0] <= FETCH_Instr_Pc_n1[11:0];
         always_ff @(posedge clk) FETCH_Instr_Pc_a1[11:0] <= FETCH_Instr_Pc_a0[11:0];
         always_ff @(posedge clk) FETCH_Instr_Pc_a2[11:0] <= FETCH_Instr_Pc_a1[11:0];
         always_ff @(posedge clk) FETCH_Instr_Pc_a3[11:0] <= FETCH_Instr_Pc_a2[11:0];
         always_ff @(posedge clk) FETCH_Instr_Pc_a4[11:0] <= FETCH_Instr_Pc_a3[11:0];
         always_ff @(posedge clk) FETCH_Instr_Pc_a5[11:0] <= FETCH_Instr_Pc_a4[11:0];

         // For $SquashCnt.
         always_ff @(posedge clk) FETCH_Instr_SquashCnt_a2[2:0] <= FETCH_Instr_SquashCnt_a1[2:0];

         // For $addr.
         always_ff @(posedge clkP_FETCH_Instr_ld_a3) FETCH_Instr_addr_a3[4:0] <= FETCH_Instr_addr_a2[4:0];

         // For $branch.
         always_ff @(posedge clk) FETCH_Instr_branch_a2 <= FETCH_Instr_branch_a1;
         always_ff @(posedge clk) FETCH_Instr_branch_a3 <= FETCH_Instr_branch_a2;

         // For $conditional_branch.
         always_ff @(posedge clk) FETCH_Instr_conditional_branch_a2 <= FETCH_Instr_conditional_branch_a1;

         // For $dest_is_reg.
         always_ff @(posedge clk) FETCH_Instr_dest_is_reg_a2 <= FETCH_Instr_dest_is_reg_a1;
         always_ff @(posedge clk) FETCH_Instr_dest_is_reg_a3 <= FETCH_Instr_dest_is_reg_a2;

         // For $dest_reg.
         always_ff @(posedge clk) FETCH_Instr_dest_reg_a2[2:0] <= FETCH_Instr_dest_reg_a1[2:0];
         always_ff @(posedge clk) FETCH_Instr_dest_reg_a3[2:0] <= FETCH_Instr_dest_reg_a2[2:0];
         always_ff @(posedge clk) FETCH_Instr_dest_reg_a4[2:0] <= FETCH_Instr_dest_reg_a3[2:0];
         always_ff @(posedge clk) FETCH_Instr_dest_reg_a5[2:0] <= FETCH_Instr_dest_reg_a4[2:0];

         // For $dest_valid.
         always_ff @(posedge clk) FETCH_Instr_dest_valid_a2 <= FETCH_Instr_dest_valid_a1;

         // For $illegal.
         always_ff @(posedge clk) FETCH_Instr_illegal_a2 <= FETCH_Instr_illegal_a1;

         // For $jump.
         always_ff @(posedge clk) FETCH_Instr_jump_a2 <= FETCH_Instr_jump_a1;

         // For $ld.
         always_ff @(posedge clk) FETCH_Instr_ld_a2 <= FETCH_Instr_ld_a1;
         always_ff @(posedge clk) FETCH_Instr_ld_a3 <= FETCH_Instr_ld_a2;
         always_ff @(posedge clk) FETCH_Instr_ld_a4 <= FETCH_Instr_ld_a3;
         always_ff @(posedge clk) FETCH_Instr_ld_a5 <= FETCH_Instr_ld_a4;

         // For $ld_rslt.
         always_ff @(posedge clkP_FETCH_Instr_ld_a4) FETCH_Instr_ld_rslt_a4[11:0] <= FETCH_Instr_ld_rslt_a3[11:0];
         always_ff @(posedge clkP_FETCH_Instr_ld_a5) FETCH_Instr_ld_rslt_a5[11:0] <= FETCH_Instr_ld_rslt_a4[11:0];
         always_ff @(posedge clkP_FETCH_Instr_ld_a6) FETCH_Instr_ld_rslt_a6[11:0] <= FETCH_Instr_ld_rslt_a5[11:0];

         // For $op_compare.
         always_ff @(posedge clk) FETCH_Instr_op_compare_a2 <= FETCH_Instr_op_compare_a1;

         // For $op_full.
         always_ff @(posedge clk) FETCH_Instr_op_full_a2 <= FETCH_Instr_op_full_a1;

         // For $raw.
         always_ff @(posedge clk) FETCH_Instr_raw_a1[23:0] <= FETCH_Instr_raw_a0[23:0];
         always_ff @(posedge clk) FETCH_Instr_raw_a1[39:32] <= FETCH_Instr_raw_a0[39:32];

         // For $replay.
         always_ff @(posedge clk) FETCH_Instr_replay_a2 <= FETCH_Instr_replay_a1;

         // For $reset.
         always_ff @(posedge clk) FETCH_Instr_reset_a1 <= FETCH_Instr_reset_a0;
         always_ff @(posedge clk) FETCH_Instr_reset_a2 <= FETCH_Instr_reset_a1;
         always_ff @(posedge clk) FETCH_Instr_reset_a3 <= FETCH_Instr_reset_a2;

         // For $returning_ld.
         always_ff @(posedge clk) FETCH_Instr_returning_ld_a1 <= FETCH_Instr_returning_ld_a0;
         always_ff @(posedge clk) FETCH_Instr_returning_ld_a2 <= FETCH_Instr_returning_ld_a1;
         always_ff @(posedge clk) FETCH_Instr_returning_ld_a3 <= FETCH_Instr_returning_ld_a2;

         // For $rslt.
         always_ff @(posedge clkP_FETCH_Instr_dest_valid_a3) FETCH_Instr_rslt_a3[11:0] <= FETCH_Instr_rslt_a2[11:0];

         // For $squash.
         always_ff @(posedge clk) FETCH_Instr_squash_a3 <= FETCH_Instr_squash_a2;

         // For $st.
         always_ff @(posedge clk) FETCH_Instr_st_a2 <= FETCH_Instr_st_a1;

         // For $valid_illegal.
         always_ff @(posedge clk) FETCH_Instr_valid_illegal_a3 <= FETCH_Instr_valid_illegal_a2;
         always_ff @(posedge clk) FETCH_Instr_valid_illegal_a4 <= FETCH_Instr_valid_illegal_a3;
         always_ff @(posedge clk) FETCH_Instr_valid_illegal_a5 <= FETCH_Instr_valid_illegal_a4;
         always_ff @(posedge clk) FETCH_Instr_valid_illegal_a6 <= FETCH_Instr_valid_illegal_a5;

         // For $valid_ld.
         always_ff @(posedge clk) FETCH_Instr_valid_ld_a3 <= FETCH_Instr_valid_ld_a2;
         always_ff @(posedge clk) FETCH_Instr_valid_ld_a4 <= FETCH_Instr_valid_ld_a3;

         // For $valid_mispred_branch.
         always_ff @(posedge clk) FETCH_Instr_valid_mispred_branch_a3 <= FETCH_Instr_valid_mispred_branch_a2;

         // For $valid_st.
         always_ff @(posedge clk) FETCH_Instr_valid_st_a3 <= FETCH_Instr_valid_st_a2;


         //
         // Scope: /mem[31:0]
         //
         for (mem = 0; mem <= 31; mem++) begin : L1gen_FETCH_Instr_Mem
            // For $Word.
            always_ff @(posedge clk) FETCH_Instr_Mem_Word_a3[mem][11:0] <= FETCH_Instr_Mem_Word_a2[mem][11:0];

         end

         //
         // Scope: /op
         //

            // For $add.
            always_ff @(posedge clk) FETCH_Instr_Op_add_a2 <= FETCH_Instr_Op_add_a1;

            // For $and.
            always_ff @(posedge clk) FETCH_Instr_Op_and_a2 <= FETCH_Instr_Op_and_a1;

            // For $combine.
            always_ff @(posedge clk) FETCH_Instr_Op_combine_a2 <= FETCH_Instr_Op_combine_a1;

            // For $conditional.
            always_ff @(posedge clk) FETCH_Instr_Op_conditional_a2 <= FETCH_Instr_Op_conditional_a1;

            // For $div.
            always_ff @(posedge clk) FETCH_Instr_Op_div_a2 <= FETCH_Instr_Op_div_a1;

            // For $eq.
            always_ff @(posedge clk) FETCH_Instr_Op_eq_a2 <= FETCH_Instr_Op_eq_a1;

            // For $ge.
            always_ff @(posedge clk) FETCH_Instr_Op_ge_a2 <= FETCH_Instr_Op_ge_a1;

            // For $gt.
            always_ff @(posedge clk) FETCH_Instr_Op_gt_a2 <= FETCH_Instr_Op_gt_a1;

            // For $le.
            always_ff @(posedge clk) FETCH_Instr_Op_le_a2 <= FETCH_Instr_Op_le_a1;

            // For $lt.
            always_ff @(posedge clk) FETCH_Instr_Op_lt_a2 <= FETCH_Instr_Op_lt_a1;

            // For $mul.
            always_ff @(posedge clk) FETCH_Instr_Op_mul_a2 <= FETCH_Instr_Op_mul_a1;

            // For $ne.
            always_ff @(posedge clk) FETCH_Instr_Op_ne_a2 <= FETCH_Instr_Op_ne_a1;

            // For $or.
            always_ff @(posedge clk) FETCH_Instr_Op_or_a2 <= FETCH_Instr_Op_or_a1;

            // For $sub.
            always_ff @(posedge clk) FETCH_Instr_Op_sub_a2 <= FETCH_Instr_Op_sub_a1;

            // For $wide_imm.
            always_ff @(posedge clk) FETCH_Instr_Op_wide_imm_a2 <= FETCH_Instr_Op_wide_imm_a1;



         //
         // Scope: /regs[7:0]
         //
         for (regs = 0; regs <= 7; regs++) begin : L1gen_FETCH_Instr_Regs
            // For $Value.
            always_ff @(posedge clk) FETCH_Instr_Regs_Value_a3[regs][11:0] <= FETCH_Instr_Regs_Value_a2[regs][11:0];

            // For $next_pending.
            always_ff @(posedge clk) FETCH_Instr_Regs_next_pending_a3[regs] <= FETCH_Instr_Regs_next_pending_a2[regs];

         end

         //
         // Scope: /src[2:1]
         //
         for (src = 1; src <= 2; src++) begin : L1gen_FETCH_Instr_Src
            // For $valid.
            always_ff @(posedge clk) L1c_FETCH_Instr_Src[src].L1_valid_a2 <= L1c_FETCH_Instr_Src[src].L1_valid_a1;

            // For $value.
            always_ff @(posedge clkP_FETCH_Instr_Src_valid_a2[src]) L1c_FETCH_Instr_Src[src].L1_value_a2[11:0] <= L1c_FETCH_Instr_Src[src].L1_value_a1[11:0];
            always_ff @(posedge clkP_FETCH_Instr_Src_valid_a3[src]) L1c_FETCH_Instr_Src[src].L1_value_a3[11:0] <= L1c_FETCH_Instr_Src[src].L1_value_a2[11:0];

         end




endgenerate



//
// Gated clocks.
//

generate



   //
   // Scope: |fetch
   //


      //
      // Scope: /instr
      //

         clk_gate gen_clkP_FETCH_Instr_dest_valid_a3(clkP_FETCH_Instr_dest_valid_a3, clk, 1'b1, FETCH_Instr_dest_valid_a2, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_ld_a3(clkP_FETCH_Instr_ld_a3, clk, 1'b1, FETCH_Instr_ld_a2, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_ld_a4(clkP_FETCH_Instr_ld_a4, clk, 1'b1, FETCH_Instr_ld_a3, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_ld_a5(clkP_FETCH_Instr_ld_a5, clk, 1'b1, FETCH_Instr_ld_a4, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_ld_a6(clkP_FETCH_Instr_ld_a6, clk, 1'b1, FETCH_Instr_ld_a5, 1'b0);

         //
         // Scope: /src[2:1]
         //
         for (src = 1; src <= 2; src++) begin : L1clk_FETCH_Instr_Src
            clk_gate gen_clkP_FETCH_Instr_Src_valid_a2(clkP_FETCH_Instr_Src_valid_a2[src], clk, 1'b1, L1c_FETCH_Instr_Src[src].L1_valid_a1, 1'b0);
            clk_gate gen_clkP_FETCH_Instr_Src_valid_a3(clkP_FETCH_Instr_Src_valid_a3[src], clk, 1'b1, L1c_FETCH_Instr_Src[src].L1_valid_a2, 1'b0);
         end




endgenerate



//
// Debug Signals
//

generate

   if (1) begin : DEBUG_SIGS

      logic  \@0$reset ;
      assign \@0$reset = L0_reset_a0;

      //
      // Scope: |fetch
      //
      if (1) begin : \|fetch 

         //
         // Scope: /instr
         //
         if (1) begin : \/instr 
            logic [11:0] \@-1$Pc ;
            assign \@-1$Pc = FETCH_Instr_Pc_n1;
            logic [2:0] \@1$SquashCnt ;
            assign \@1$SquashCnt = FETCH_Instr_SquashCnt_a1;
            logic [11:0] \@2$addr ;
            assign \@2$addr = FETCH_Instr_addr_a2;
            logic  \@1$branch ;
            assign \@1$branch = FETCH_Instr_branch_a1;
            logic [11:0] \@3$branch_target ;
            assign \@3$branch_target = FETCH_Instr_branch_target_a3;
            logic  \@2$compare_rslt ;
            assign \@2$compare_rslt = FETCH_Instr_compare_rslt_a2;
            logic  \@1$conditional_branch ;
            assign \@1$conditional_branch = FETCH_Instr_conditional_branch_a1;
            logic [7:0] \@1$dest_char ;
            assign \@1$dest_char = FETCH_Instr_dest_char_a1;
            logic  \@1$dest_is_reg ;
            assign \@1$dest_is_reg = FETCH_Instr_dest_is_reg_a1;
            logic [2:0] \@1$dest_reg ;
            assign \@1$dest_reg = FETCH_Instr_dest_reg_a1;
            logic [7:0] \@1$dest_tmp ;
            assign \@1$dest_tmp = FETCH_Instr_dest_tmp_a1;
            logic  \@1$dest_valid ;
            assign \@1$dest_valid = FETCH_Instr_dest_valid_a1;
            logic  \@1$illegal ;
            assign \@1$illegal = FETCH_Instr_illegal_a1;
            logic  \@1$illegal_dest ;
            assign \@1$illegal_dest = FETCH_Instr_illegal_dest_a1;
            logic  \@1$jump ;
            assign \@1$jump = FETCH_Instr_jump_a1;
            logic [11:0] \@2$jump_target ;
            assign \@2$jump_target = FETCH_Instr_jump_target_a2;
            logic  \@1$ld ;
            assign \@1$ld = FETCH_Instr_ld_a1;
            logic [11:0] \@3$ld_rslt ;
            assign \@3$ld_rslt = FETCH_Instr_ld_rslt_a3;
            logic  \@2$mispred_branch ;
            assign \@2$mispred_branch = FETCH_Instr_mispred_branch_a2;
            logic  \@1$no_dest ;
            assign \@1$no_dest = FETCH_Instr_no_dest_a1;
            logic [7:0] \@1$op_char ;
            assign \@1$op_char = FETCH_Instr_op_char_a1;
            logic  \@1$op_compare ;
            assign \@1$op_compare = FETCH_Instr_op_compare_a1;
            logic  \@1$op_full ;
            assign \@1$op_full = FETCH_Instr_op_full_a1;
            logic [11:0] \@2$op_full_rslt ;
            assign \@2$op_full_rslt = FETCH_Instr_op_full_rslt_a2;
            logic [39:0] \@0$raw ;
            assign \@0$raw = FETCH_Instr_raw_a0;
            logic  \@3$reg_write ;
            assign \@3$reg_write = FETCH_Instr_reg_write_a3;
            logic  \@1$replay ;
            assign \@1$replay = FETCH_Instr_replay_a1;
            logic  \@0$reset ;
            assign \@0$reset = FETCH_Instr_reset_a0;
            logic  \@0$returning_ld ;
            assign \@0$returning_ld = FETCH_Instr_returning_ld_a0;
            logic [2:0] \@1$returning_ld_reg ;
            assign \@1$returning_ld_reg = FETCH_Instr_returning_ld_reg_a1;
            logic [11:0] \@2$rslt ;
            assign \@2$rslt = FETCH_Instr_rslt_a2;
            logic  \@2$squash ;
            assign \@2$squash = FETCH_Instr_squash_a2;
            logic  \@1$st ;
            assign \@1$st = FETCH_Instr_st_a1;
            logic  \@2$valid_illegal ;
            assign \@2$valid_illegal = FETCH_Instr_valid_illegal_a2;
            logic  \@2$valid_jump ;
            assign \@2$valid_jump = FETCH_Instr_valid_jump_a2;
            logic  \@2$valid_ld ;
            assign \@2$valid_ld = FETCH_Instr_valid_ld_a2;
            logic  \@2$valid_mispred_branch ;
            assign \@2$valid_mispred_branch = FETCH_Instr_valid_mispred_branch_a2;
            logic  \@2$valid_st ;
            assign \@2$valid_st = FETCH_Instr_valid_st_a2;
            logic  \@1$write_pc ;
            assign \@1$write_pc = FETCH_Instr_write_pc_a1;

            //
            // Scope: /mem[31:0]
            //
            for (mem = 0; mem <= 31; mem++) begin : \/mem 
               logic [11:0] \@2$Word ;
               assign \@2$Word = FETCH_Instr_Mem_Word_a2[mem];
            end

            //
            // Scope: /op
            //
            if (1) begin : \/op 
               logic  \@1$add ;
               assign \@1$add = FETCH_Instr_Op_add_a1;
               logic  \@1$and ;
               assign \@1$and = FETCH_Instr_Op_and_a1;
               logic  \@1$arith ;
               assign \@1$arith = FETCH_Instr_Op_arith_a1;
               logic  \@1$bitwise ;
               assign \@1$bitwise = FETCH_Instr_Op_bitwise_a1;
               logic [7:0] \@1$char ;
               assign \@1$char = FETCH_Instr_Op_char_a1;
               logic  \@1$combine ;
               assign \@1$combine = FETCH_Instr_Op_combine_a1;
               logic  \@1$compare ;
               assign \@1$compare = FETCH_Instr_Op_compare_a1;
               logic  \@1$conditional ;
               assign \@1$conditional = FETCH_Instr_Op_conditional_a1;
               logic  \@1$div ;
               assign \@1$div = FETCH_Instr_Op_div_a1;
               logic  \@1$eq ;
               assign \@1$eq = FETCH_Instr_Op_eq_a1;
               logic  \@1$full ;
               assign \@1$full = FETCH_Instr_Op_full_a1;
               logic  \@1$ge ;
               assign \@1$ge = FETCH_Instr_Op_ge_a1;
               logic  \@1$gt ;
               assign \@1$gt = FETCH_Instr_Op_gt_a1;
               logic  \@1$illegal ;
               assign \@1$illegal = FETCH_Instr_Op_illegal_a1;
               logic  \@1$ld ;
               assign \@1$ld = FETCH_Instr_Op_ld_a1;
               logic  \@1$le ;
               assign \@1$le = FETCH_Instr_Op_le_a1;
               logic  \@1$lt ;
               assign \@1$lt = FETCH_Instr_Op_lt_a1;
               logic  \@1$mem ;
               assign \@1$mem = FETCH_Instr_Op_mem_a1;
               logic  \@1$mul ;
               assign \@1$mul = FETCH_Instr_Op_mul_a1;
               logic  \@1$ne ;
               assign \@1$ne = FETCH_Instr_Op_ne_a1;
               logic  \@1$or ;
               assign \@1$or = FETCH_Instr_Op_or_a1;
               logic  \@1$st ;
               assign \@1$st = FETCH_Instr_Op_st_a1;
               logic  \@1$sub ;
               assign \@1$sub = FETCH_Instr_Op_sub_a1;
               logic  \@1$wide_imm ;
               assign \@1$wide_imm = FETCH_Instr_Op_wide_imm_a1;
            end

            //
            // Scope: /regs[7:0]
            //
            for (regs = 0; regs <= 7; regs++) begin : \/regs 
               logic [11:0] \@2$Value ;
               assign \@2$Value = FETCH_Instr_Regs_Value_a2[regs];
               logic  \@2$next_pending ;
               assign \@2$next_pending = FETCH_Instr_Regs_next_pending_a2[regs];
               logic  \@2$reg_match ;
               assign \@2$reg_match = L1b_FETCH_Instr_Regs[regs].L1_reg_match_a2;
            end

            //
            // Scope: /src[2:1]
            //
            for (src = 1; src <= 2; src++) begin : \/src 
               logic [7:0] \@1$char ;
               assign \@1$char = L1_FETCH_Instr_Src[src].L1_char_a1;
               logic  \@1$illegal ;
               assign \@1$illegal = FETCH_Instr_Src_illegal_a1[src];
               logic [7:0] \@1$imm_tmp ;
               assign \@1$imm_tmp = L1b_FETCH_Instr_Src[src].L1_imm_tmp_a1;
               logic [2:0] \@1$imm_value ;
               assign \@1$imm_value = L1b_FETCH_Instr_Src[src].L1_imm_value_a1;
               logic  \@1$is_imm ;
               assign \@1$is_imm = L1b_FETCH_Instr_Src[src].L1_is_imm_a1;
               logic  \@1$is_reg ;
               assign \@1$is_reg = L1b_FETCH_Instr_Src[src].L1_is_reg_a1;
               logic  \@1$is_reg_condition ;
               assign \@1$is_reg_condition = L1c_FETCH_Instr_Src[src].L1_is_reg_condition_a1;
               logic [2:0] \@1$reg ;
               assign \@1$reg = L1b_FETCH_Instr_Src[src].L1_reg_a1;
               logic [7:0] \@1$reg_tmp ;
               assign \@1$reg_tmp = L1b_FETCH_Instr_Src[src].L1_reg_tmp_a1;
               logic [11:0] \@1$reg_value ;
               assign \@1$reg_value = L1c_FETCH_Instr_Src[src].L1_reg_value_a1;
               logic  \@1$replay ;
               assign \@1$replay = FETCH_Instr_Src_replay_a1[src];
               logic  \@1$valid ;
               assign \@1$valid = L1c_FETCH_Instr_Src[src].L1_valid_a1;
               logic [11:0] \@1$value ;
               assign \@1$value = L1c_FETCH_Instr_Src[src].L1_value_a1;
            end
         end
      end


   end

endgenerate




generate   // This is awkward, but we need to go into 'generate' context in the line that `includes the declarations file.
