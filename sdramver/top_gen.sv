// Generated by SandPiper(TM) 1.9-2018/02/11-beta from Redwood EDA.
// (Installed here: /home/devel/SandPiper_1.9-2018_02_11-beta_distro.)
// Redwood EDA does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


`include "sandpiper_gen.vh"





//
// Signals declared top-level.
//

// For $i_ram_data.
logic [15:0] L0_i_ram_data_a0;

// For $i_wb_addr.
logic [23:0] L0_i_wb_addr_a0;

// For $i_wb_cyc.
logic L0_i_wb_cyc_a0;

// For $i_wb_data.
logic [31:0] L0_i_wb_data_a0;

// For $i_wb_sel.
logic L0_i_wb_sel_a0;

// For $i_wb_stb.
logic L0_i_wb_stb_a0;

// For $i_wb_we.
logic L0_i_wb_we_a0;

// For $o_debug.
logic [31:0] L0_o_debug_a0;

// For $o_ram_addr.
logic [12:0] L0_o_ram_addr_a0;

// For $o_ram_bs.
logic [1:0] L0_o_ram_bs_a0;

// For $o_ram_cas_n.
logic L0_o_ram_cas_n_a0;

// For $o_ram_cke.
logic L0_o_ram_cke_a0;

// For $o_ram_cs_n.
logic L0_o_ram_cs_n_a0;

// For $o_ram_data.
logic [15:0] L0_o_ram_data_a0;

// For $o_ram_dmod.
logic L0_o_ram_dmod_a0;

// For $o_ram_dqm.
logic [1:0] L0_o_ram_dqm_a0;

// For $o_ram_ras_n.
logic L0_o_ram_ras_n_a0;

// For $o_ram_we_n.
logic L0_o_ram_we_n_a0;

// For $o_wb_ack.
logic L0_o_wb_ack_a0;

// For $o_wb_data.
logic [31:0] L0_o_wb_data_a0;

// For $o_wb_stall.
logic L0_o_wb_stall_a0;

// For $reset.
logic L0_reset_a0;



generate

   // For signal $o_ram_ras_n, which had no assignment.
   assign L0_o_ram_ras_n_a0 = 'x;



endgenerate




//
// Debug Signals
//

generate

   if (1) begin : DEBUG_SIGS

      logic [15:0] \@0$i_ram_data ;
      assign \@0$i_ram_data = L0_i_ram_data_a0;
      logic [23:0] \@0$i_wb_addr ;
      assign \@0$i_wb_addr = L0_i_wb_addr_a0;
      logic  \@0$i_wb_cyc ;
      assign \@0$i_wb_cyc = L0_i_wb_cyc_a0;
      logic [31:0] \@0$i_wb_data ;
      assign \@0$i_wb_data = L0_i_wb_data_a0;
      logic  \@0$i_wb_sel ;
      assign \@0$i_wb_sel = L0_i_wb_sel_a0;
      logic  \@0$i_wb_stb ;
      assign \@0$i_wb_stb = L0_i_wb_stb_a0;
      logic  \@0$i_wb_we ;
      assign \@0$i_wb_we = L0_i_wb_we_a0;
      logic [31:0] \@0$o_debug ;
      assign \@0$o_debug = L0_o_debug_a0;
      logic [12:0] \@0$o_ram_addr ;
      assign \@0$o_ram_addr = L0_o_ram_addr_a0;
      logic [1:0] \@0$o_ram_bs ;
      assign \@0$o_ram_bs = L0_o_ram_bs_a0;
      logic  \@0$o_ram_cas_n ;
      assign \@0$o_ram_cas_n = L0_o_ram_cas_n_a0;
      logic  \@0$o_ram_cke ;
      assign \@0$o_ram_cke = L0_o_ram_cke_a0;
      logic  \@0$o_ram_cs_n ;
      assign \@0$o_ram_cs_n = L0_o_ram_cs_n_a0;
      logic [15:0] \@0$o_ram_data ;
      assign \@0$o_ram_data = L0_o_ram_data_a0;
      logic  \@0$o_ram_dmod ;
      assign \@0$o_ram_dmod = L0_o_ram_dmod_a0;
      logic [1:0] \@0$o_ram_dqm ;
      assign \@0$o_ram_dqm = L0_o_ram_dqm_a0;
      logic  \@0$o_ram_ras_n ;
      assign \@0$o_ram_ras_n = L0_o_ram_ras_n_a0;
      logic  \@0$o_ram_we_n ;
      assign \@0$o_ram_we_n = L0_o_ram_we_n_a0;
      logic  \@0$o_wb_ack ;
      assign \@0$o_wb_ack = L0_o_wb_ack_a0;
      logic [31:0] \@0$o_wb_data ;
      assign \@0$o_wb_data = L0_o_wb_data_a0;
      logic  \@0$o_wb_stall ;
      assign \@0$o_wb_stall = L0_o_wb_stall_a0;
      logic  \@0$reset ;
      assign \@0$reset = L0_reset_a0;


   end

endgenerate




generate   // This is awkward, but we need to go into 'generate' context in the line that `includes the declarations file.
