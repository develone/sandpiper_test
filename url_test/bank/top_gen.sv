// Generated by SandPiper(TM) 1.9-2018/02/11-beta from Redwood EDA.
// (Installed here: /home/devel/SandPiper_1.9-2018_02_11-beta_distro.)
// Redwood EDA does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


`include "sandpiper_gen.vh"





//
// Signals declared top-level.
//

// For |bank$Balance.
logic [15:0] BANK_Balance_a1,
             BANK_Balance_a2,
             BANK_Balance_a3;
logic [15:15] BANK_Balance_a4;

// For |bank$CycCount.
logic [15:0] BANK_CycCount_a3,
             BANK_CycCount_a4;

// For |bank$action.
logic [0:0] BANK_action_a1,
            BANK_action_a2,
            BANK_action_a3;

// For |bank$amount.
logic [15:0] BANK_amount_a1,
             BANK_amount_a2,
             BANK_amount_a3;

// For |bank$init_balance.
logic [15:0] BANK_init_balance_a1,
             BANK_init_balance_a2;

// For |bank$rand_amount.
logic [10:0] BANK_rand_amount_a1;

// For |bank$reset.
logic BANK_reset_a0,
      BANK_reset_a1,
      BANK_reset_a2,
      BANK_reset_a3,
      BANK_reset_a4;

// For |bank$transaction.
logic [1:0] BANK_transaction_a1,
            BANK_transaction_a2;

// For |bank$valid_transaction.
logic BANK_valid_transaction_a2,
      BANK_valid_transaction_a3;

// For |bank$valid_transaction_or_reset.
logic BANK_valid_transaction_or_reset_a2,
      BANK_valid_transaction_or_reset_a3,
      BANK_valid_transaction_or_reset_a4;

// For |bank$withdraw_error.
logic BANK_withdraw_error_a2,
      BANK_withdraw_error_a3;


//
// Scope: |bank
//

// Clock signals.
logic clkF_BANK_valid_transaction_or_reset_a3 ;
logic clkF_BANK_valid_transaction_or_reset_a4 ;
logic clkF_BANK_valid_transaction_or_reset_a5 ;


generate


   //
   // Scope: |bank
   //

      // For $Balance.
      always_ff @(posedge clkF_BANK_valid_transaction_or_reset_a3) BANK_Balance_a2[15:0] <= BANK_Balance_a1[15:0];
      always_ff @(posedge clkF_BANK_valid_transaction_or_reset_a4) BANK_Balance_a3[15:0] <= BANK_Balance_a2[15:0];
      always_ff @(posedge clkF_BANK_valid_transaction_or_reset_a5) BANK_Balance_a4[15] <= BANK_Balance_a3[15];

      // For $CycCount.
      always_ff @(posedge clk) BANK_CycCount_a4[15:0] <= BANK_CycCount_a3[15:0];

      // For $action.
      always_ff @(posedge clk) BANK_action_a2[0:0] <= BANK_action_a1[0:0];
      always_ff @(posedge clk) BANK_action_a3[0:0] <= BANK_action_a2[0:0];

      // For $amount.
      always_ff @(posedge clk) BANK_amount_a2[15:0] <= BANK_amount_a1[15:0];
      always_ff @(posedge clk) BANK_amount_a3[15:0] <= BANK_amount_a2[15:0];

      // For $init_balance.
      always_ff @(posedge clk) BANK_init_balance_a2[15:0] <= BANK_init_balance_a1[15:0];

      // For $reset.
      always_ff @(posedge clk) BANK_reset_a1 <= BANK_reset_a0;
      always_ff @(posedge clk) BANK_reset_a2 <= BANK_reset_a1;
      always_ff @(posedge clk) BANK_reset_a3 <= BANK_reset_a2;
      always_ff @(posedge clk) BANK_reset_a4 <= BANK_reset_a3;

      // For $transaction.
      always_ff @(posedge clk) BANK_transaction_a2[1:0] <= BANK_transaction_a1[1:0];

      // For $valid_transaction.
      always_ff @(posedge clk) BANK_valid_transaction_a3 <= BANK_valid_transaction_a2;

      // For $valid_transaction_or_reset.
      always_ff @(posedge clk) BANK_valid_transaction_or_reset_a3 <= BANK_valid_transaction_or_reset_a2;
      always_ff @(posedge clk) BANK_valid_transaction_or_reset_a4 <= BANK_valid_transaction_or_reset_a3;

      // For $withdraw_error.
      always_ff @(posedge clk) BANK_withdraw_error_a3 <= BANK_withdraw_error_a2;




endgenerate



//
// Gated clocks.
//

generate



   //
   // Scope: |bank
   //

      clk_gate gen_clkF_BANK_valid_transaction_or_reset_a3(clkF_BANK_valid_transaction_or_reset_a3, clk, BANK_valid_transaction_or_reset_a2, 1'b1, 1'b0);
      clk_gate gen_clkF_BANK_valid_transaction_or_reset_a4(clkF_BANK_valid_transaction_or_reset_a4, clk, BANK_valid_transaction_or_reset_a3, 1'b1, 1'b0);
      clk_gate gen_clkF_BANK_valid_transaction_or_reset_a5(clkF_BANK_valid_transaction_or_reset_a5, clk, BANK_valid_transaction_or_reset_a4, 1'b1, 1'b0);



endgenerate



//
// Debug Signals
//

generate

   if (1) begin : DEBUG_SIGS


      //
      // Scope: |bank
      //
      if (1) begin : \|bank 
         logic [15:0] \@1$Balance ;
         assign \@1$Balance = BANK_Balance_a1;
         logic [15:0] \@3$CycCount ;
         assign \@3$CycCount = BANK_CycCount_a3;
         logic [0:0] \@1$action ;
         assign \@1$action = BANK_action_a1;
         logic [15:0] \@1$amount ;
         assign \@1$amount = BANK_amount_a1;
         logic [15:0] \@1$init_balance ;
         assign \@1$init_balance = BANK_init_balance_a1;
         logic [10:0] \@1$rand_amount ;
         assign \@1$rand_amount = BANK_rand_amount_a1;
         logic  \@0$reset ;
         assign \@0$reset = BANK_reset_a0;
         logic [1:0] \@1$transaction ;
         assign \@1$transaction = BANK_transaction_a1;
         logic  \@2$valid_transaction ;
         assign \@2$valid_transaction = BANK_valid_transaction_a2;
         logic  \@2$valid_transaction_or_reset ;
         assign \@2$valid_transaction_or_reset = BANK_valid_transaction_or_reset_a2;
         logic  \@2$withdraw_error ;
         assign \@2$withdraw_error = BANK_withdraw_error_a2;
      end


   end

endgenerate




generate   // This is awkward, but we need to go into 'generate' context in the line that `includes the declarations file.
