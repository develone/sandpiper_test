// Generated by SandPiper(TM) 1.9-2018/02/11-beta from Redwood EDA.
// Redwood EDA does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


`include "sandpiper_gen.vh"


genvar bank, instr_mem, mem, regs, src;


//
// Signals declared top-level.
//

// For |fetch/instr$BranchState.
logic [1:0] FETCH_Instr_BranchState_a1,
            FETCH_Instr_BranchState_a2;
logic [1:1] FETCH_Instr_BranchState_a3;

// For |fetch/instr$Cnt.
logic [7:0] FETCH_Instr_Cnt_n2,
            FETCH_Instr_Cnt_n1;

// For |fetch/instr$GoodPathMask.
logic [3+1:0] FETCH_Instr_GoodPathMask_n1,
              FETCH_Instr_GoodPathMask_a0;
logic [3+1:1] FETCH_Instr_GoodPathMask_a1;

// For |fetch/instr$NoFetch.
logic FETCH_Instr_NoFetch_n1,
      FETCH_Instr_NoFetch_a0,
      FETCH_Instr_NoFetch_a1,
      FETCH_Instr_NoFetch_a2,
      FETCH_Instr_NoFetch_a3;

// For |fetch/instr$Pc.
logic [31:2] FETCH_Instr_Pc_n1,
             FETCH_Instr_Pc_a0,
             FETCH_Instr_Pc_a1,
             FETCH_Instr_Pc_a2,
             FETCH_Instr_Pc_a3;

// For |fetch/instr$ReachedEnd.
logic FETCH_Instr_ReachedEnd_a2,
      FETCH_Instr_ReachedEnd_a3;

// For |fetch/instr$Reg4Became45.
logic FETCH_Instr_Reg4Became45_a2,
      FETCH_Instr_Reg4Became45_a3;

// For |fetch/instr$RemainingCyclesWithinTimeUnit.
logic [30-1:0] FETCH_Instr_RemainingCyclesWithinTimeUnit_a1,
               FETCH_Instr_RemainingCyclesWithinTimeUnit_a2;

// For |fetch/instr$abort.
logic FETCH_Instr_abort_a2;

// For |fetch/instr$aborting_isa_trap.
logic FETCH_Instr_aborting_isa_trap_a2;

// For |fetch/instr$aborting_trap.
logic FETCH_Instr_aborting_trap_a2,
      FETCH_Instr_aborting_trap_a3;

// For |fetch/instr$add_rslt.
logic [31:0] FETCH_Instr_add_rslt_a2;

// For |fetch/instr$add_sub_rslt.
logic [31:0] FETCH_Instr_add_sub_rslt_a2;

// For |fetch/instr$addi_rslt.
logic [31:0] FETCH_Instr_addi_rslt_a2;

// For |fetch/instr$addr.
logic [31:0] FETCH_Instr_addr_a2,
             FETCH_Instr_addr_a3;

// For |fetch/instr$and_rslt.
logic [31:0] FETCH_Instr_and_rslt_a2;

// For |fetch/instr$andi_rslt.
logic [31:0] FETCH_Instr_andi_rslt_a2;

// For |fetch/instr$auipc_rslt.
logic [31:0] FETCH_Instr_auipc_rslt_a2;

// For |fetch/instr$branch.
logic FETCH_Instr_branch_a1,
      FETCH_Instr_branch_a2;

// For |fetch/instr$branch_or_reset.
logic FETCH_Instr_branch_or_reset_a2,
      FETCH_Instr_branch_or_reset_a3;

// For |fetch/instr$branch_redir_pc.
logic [31:2] FETCH_Instr_branch_redir_pc_a2;

// For |fetch/instr$branch_target.
logic [31:2] FETCH_Instr_branch_target_a1,
             FETCH_Instr_branch_target_a2;

// For |fetch/instr$commit.
logic FETCH_Instr_commit_a2,
      FETCH_Instr_commit_a3;

// For |fetch/instr$conditional_branch.
logic FETCH_Instr_conditional_branch_a1,
      FETCH_Instr_conditional_branch_a2;

// For |fetch/instr$csr_cycle.
logic [31:0] FETCH_Instr_csr_cycle_a1,
             FETCH_Instr_csr_cycle_a2;

// For |fetch/instr$csr_cycle_hw_wr.
logic FETCH_Instr_csr_cycle_hw_wr_a2;

// For |fetch/instr$csr_cycle_hw_wr_en_mask.
logic [31:0] FETCH_Instr_csr_cycle_hw_wr_en_mask_a2;

// For |fetch/instr$csr_cycle_hw_wr_mask.
logic [31:0] FETCH_Instr_csr_cycle_hw_wr_mask_a2;

// For |fetch/instr$csr_cycle_hw_wr_value.
logic [31:0] FETCH_Instr_csr_cycle_hw_wr_value_a2;

// For |fetch/instr$csr_cycle_masked_wr_value.
logic [31:0] FETCH_Instr_csr_cycle_masked_wr_value_a2;

// For |fetch/instr$csr_cycleh.
logic [31:0] FETCH_Instr_csr_cycleh_a1,
             FETCH_Instr_csr_cycleh_a2;

// For |fetch/instr$csr_cycleh_hw_wr.
logic FETCH_Instr_csr_cycleh_hw_wr_a2;

// For |fetch/instr$csr_cycleh_hw_wr_en_mask.
logic [31:0] FETCH_Instr_csr_cycleh_hw_wr_en_mask_a2;

// For |fetch/instr$csr_cycleh_hw_wr_mask.
logic [31:0] FETCH_Instr_csr_cycleh_hw_wr_mask_a2;

// For |fetch/instr$csr_cycleh_hw_wr_value.
logic [31:0] FETCH_Instr_csr_cycleh_hw_wr_value_a2;

// For |fetch/instr$csr_cycleh_masked_wr_value.
logic [31:0] FETCH_Instr_csr_cycleh_masked_wr_value_a2;

// For |fetch/instr$csr_instret.
logic [31:0] FETCH_Instr_csr_instret_a1,
             FETCH_Instr_csr_instret_a2;

// For |fetch/instr$csr_instret_hw_wr.
logic FETCH_Instr_csr_instret_hw_wr_a2;

// For |fetch/instr$csr_instret_hw_wr_en_mask.
logic [31:0] FETCH_Instr_csr_instret_hw_wr_en_mask_a2;

// For |fetch/instr$csr_instret_hw_wr_mask.
logic [31:0] FETCH_Instr_csr_instret_hw_wr_mask_a2;

// For |fetch/instr$csr_instret_hw_wr_value.
logic [31:0] FETCH_Instr_csr_instret_hw_wr_value_a2;

// For |fetch/instr$csr_instret_masked_wr_value.
logic [31:0] FETCH_Instr_csr_instret_masked_wr_value_a2;

// For |fetch/instr$csr_instreth.
logic [31:0] FETCH_Instr_csr_instreth_a1,
             FETCH_Instr_csr_instreth_a2;

// For |fetch/instr$csr_instreth_hw_wr.
logic FETCH_Instr_csr_instreth_hw_wr_a2;

// For |fetch/instr$csr_instreth_hw_wr_en_mask.
logic [31:0] FETCH_Instr_csr_instreth_hw_wr_en_mask_a2;

// For |fetch/instr$csr_instreth_hw_wr_mask.
logic [31:0] FETCH_Instr_csr_instreth_hw_wr_mask_a2;

// For |fetch/instr$csr_instreth_hw_wr_value.
logic [31:0] FETCH_Instr_csr_instreth_hw_wr_value_a2;

// For |fetch/instr$csr_instreth_masked_wr_value.
logic [31:0] FETCH_Instr_csr_instreth_masked_wr_value_a2;

// For |fetch/instr$csr_time.
logic [31:0] FETCH_Instr_csr_time_a1,
             FETCH_Instr_csr_time_a2;

// For |fetch/instr$csr_time_hw_wr.
logic FETCH_Instr_csr_time_hw_wr_a2;

// For |fetch/instr$csr_time_hw_wr_en_mask.
logic [31:0] FETCH_Instr_csr_time_hw_wr_en_mask_a2;

// For |fetch/instr$csr_time_hw_wr_mask.
logic [31:0] FETCH_Instr_csr_time_hw_wr_mask_a2;

// For |fetch/instr$csr_time_hw_wr_value.
logic [31:0] FETCH_Instr_csr_time_hw_wr_value_a2;

// For |fetch/instr$csr_time_masked_wr_value.
logic [31:0] FETCH_Instr_csr_time_masked_wr_value_a2;

// For |fetch/instr$csr_timeh.
logic [31:0] FETCH_Instr_csr_timeh_a1,
             FETCH_Instr_csr_timeh_a2;

// For |fetch/instr$csr_timeh_hw_wr.
logic FETCH_Instr_csr_timeh_hw_wr_a2;

// For |fetch/instr$csr_timeh_hw_wr_en_mask.
logic [31:0] FETCH_Instr_csr_timeh_hw_wr_en_mask_a2;

// For |fetch/instr$csr_timeh_hw_wr_mask.
logic [31:0] FETCH_Instr_csr_timeh_hw_wr_mask_a2;

// For |fetch/instr$csr_timeh_hw_wr_value.
logic [31:0] FETCH_Instr_csr_timeh_hw_wr_value_a2;

// For |fetch/instr$csr_timeh_masked_wr_value.
logic [31:0] FETCH_Instr_csr_timeh_masked_wr_value_a2;

// For |fetch/instr$csr_trap.
logic FETCH_Instr_csr_trap_a1,
      FETCH_Instr_csr_trap_a2;

// For |fetch/instr$csr_wr_value.
logic [31:0] FETCH_Instr_csr_wr_value_a2;

// For |fetch/instr$csrrc_rslt.
logic [31:0] FETCH_Instr_csrrc_rslt_a2;

// For |fetch/instr$csrrci_rslt.
logic [31:0] FETCH_Instr_csrrci_rslt_a2;

// For |fetch/instr$csrrs_rslt.
logic [31:0] FETCH_Instr_csrrs_rslt_a2;

// For |fetch/instr$csrrsi_rslt.
logic [31:0] FETCH_Instr_csrrsi_rslt_a2;

// For |fetch/instr$csrrw_rslt.
logic [31:0] FETCH_Instr_csrrw_rslt_a2;

// For |fetch/instr$csrrwi_rslt.
logic [31:0] FETCH_Instr_csrrwi_rslt_a2;

// For |fetch/instr$dest_pending.
logic FETCH_Instr_dest_pending_a1;

// For |fetch/instr$dest_reg.
logic [4:0] FETCH_Instr_dest_reg_a1,
            FETCH_Instr_dest_reg_a2,
            FETCH_Instr_dest_reg_a3;

// For |fetch/instr$dest_reg_valid.
logic FETCH_Instr_dest_reg_valid_a1,
      FETCH_Instr_dest_reg_valid_a2,
      FETCH_Instr_dest_reg_valid_a3;

// For |fetch/instr$div_mul.
logic FETCH_Instr_div_mul_a1,
      FETCH_Instr_div_mul_a2;

// For |fetch/instr$equal.
logic FETCH_Instr_equal_a2;

// For |fetch/instr$failed.
logic FETCH_Instr_failed_a3;

// For |fetch/instr$fetch.
logic FETCH_Instr_fetch_a0,
      FETCH_Instr_fetch_a1;

// For |fetch/instr$full_csr_cycle_hw_wr_value.
logic [63:0] FETCH_Instr_full_csr_cycle_hw_wr_value_a2;

// For |fetch/instr$full_csr_instret_hw_wr_value.
logic [63:0] FETCH_Instr_full_csr_instret_hw_wr_value_a2;

// For |fetch/instr$full_csr_time_hw_wr_value.
logic [63:0] FETCH_Instr_full_csr_time_hw_wr_value_a2;

// For |fetch/instr$illegal.
logic FETCH_Instr_illegal_a1,
      FETCH_Instr_illegal_a2,
      FETCH_Instr_illegal_a3;

// For |fetch/instr$illegal_itype_with_funct7.
logic FETCH_Instr_illegal_itype_with_funct7_a1;

// For |fetch/instr$indirect_jump.
logic FETCH_Instr_indirect_jump_a1,
      FETCH_Instr_indirect_jump_a2;

// For |fetch/instr$indirect_jump_full_target.
logic [31:0] FETCH_Instr_indirect_jump_full_target_a2;

// For |fetch/instr$indirect_jump_target.
logic [31:2] FETCH_Instr_indirect_jump_target_a2;

// For |fetch/instr$is___type.
logic FETCH_Instr_is___type_a1;

// For |fetch/instr$is_add_instr.
logic FETCH_Instr_is_add_instr_a1,
      FETCH_Instr_is_add_instr_a2;

// For |fetch/instr$is_addi_instr.
logic FETCH_Instr_is_addi_instr_a1,
      FETCH_Instr_is_addi_instr_a2;

// For |fetch/instr$is_and_instr.
logic FETCH_Instr_is_and_instr_a1,
      FETCH_Instr_is_and_instr_a2;

// For |fetch/instr$is_andi_instr.
logic FETCH_Instr_is_andi_instr_a1,
      FETCH_Instr_is_andi_instr_a2;

// For |fetch/instr$is_auipc_instr.
logic FETCH_Instr_is_auipc_instr_a1,
      FETCH_Instr_is_auipc_instr_a2;

// For |fetch/instr$is_b_type.
logic FETCH_Instr_is_b_type_a1;

// For |fetch/instr$is_beq_instr.
logic FETCH_Instr_is_beq_instr_a1,
      FETCH_Instr_is_beq_instr_a2;

// For |fetch/instr$is_bge_instr.
logic FETCH_Instr_is_bge_instr_a1,
      FETCH_Instr_is_bge_instr_a2;

// For |fetch/instr$is_bgeu_instr.
logic FETCH_Instr_is_bgeu_instr_a1,
      FETCH_Instr_is_bgeu_instr_a2;

// For |fetch/instr$is_blt_instr.
logic FETCH_Instr_is_blt_instr_a1,
      FETCH_Instr_is_blt_instr_a2;

// For |fetch/instr$is_bltu_instr.
logic FETCH_Instr_is_bltu_instr_a1,
      FETCH_Instr_is_bltu_instr_a2;

// For |fetch/instr$is_bne_instr.
logic FETCH_Instr_is_bne_instr_a1,
      FETCH_Instr_is_bne_instr_a2;

// For |fetch/instr$is_csr_clear.
logic FETCH_Instr_is_csr_clear_a1,
      FETCH_Instr_is_csr_clear_a2;

// For |fetch/instr$is_csr_cycle.
logic FETCH_Instr_is_csr_cycle_a1,
      FETCH_Instr_is_csr_cycle_a2;

// For |fetch/instr$is_csr_cycleh.
logic FETCH_Instr_is_csr_cycleh_a1,
      FETCH_Instr_is_csr_cycleh_a2;

// For |fetch/instr$is_csr_instr.
logic FETCH_Instr_is_csr_instr_a1;

// For |fetch/instr$is_csr_instret.
logic FETCH_Instr_is_csr_instret_a1,
      FETCH_Instr_is_csr_instret_a2;

// For |fetch/instr$is_csr_instreth.
logic FETCH_Instr_is_csr_instreth_a1,
      FETCH_Instr_is_csr_instreth_a2;

// For |fetch/instr$is_csr_set.
logic FETCH_Instr_is_csr_set_a1,
      FETCH_Instr_is_csr_set_a2;

// For |fetch/instr$is_csr_time.
logic FETCH_Instr_is_csr_time_a1,
      FETCH_Instr_is_csr_time_a2;

// For |fetch/instr$is_csr_timeh.
logic FETCH_Instr_is_csr_timeh_a1,
      FETCH_Instr_is_csr_timeh_a2;

// For |fetch/instr$is_csr_write.
logic FETCH_Instr_is_csr_write_a1,
      FETCH_Instr_is_csr_write_a2;

// For |fetch/instr$is_csrrc_instr.
logic FETCH_Instr_is_csrrc_instr_a1,
      FETCH_Instr_is_csrrc_instr_a2;

// For |fetch/instr$is_csrrci_instr.
logic FETCH_Instr_is_csrrci_instr_a1,
      FETCH_Instr_is_csrrci_instr_a2;

// For |fetch/instr$is_csrrs_instr.
logic FETCH_Instr_is_csrrs_instr_a1,
      FETCH_Instr_is_csrrs_instr_a2;

// For |fetch/instr$is_csrrsi_instr.
logic FETCH_Instr_is_csrrsi_instr_a1,
      FETCH_Instr_is_csrrsi_instr_a2;

// For |fetch/instr$is_csrrw_instr.
logic FETCH_Instr_is_csrrw_instr_a1,
      FETCH_Instr_is_csrrw_instr_a2;

// For |fetch/instr$is_csrrwi_instr.
logic FETCH_Instr_is_csrrwi_instr_a1,
      FETCH_Instr_is_csrrwi_instr_a2;

// For |fetch/instr$is_dest_condition.
logic FETCH_Instr_is_dest_condition_a1;

// For |fetch/instr$is_i_type.
logic FETCH_Instr_is_i_type_a1;

// For |fetch/instr$is_j_type.
logic FETCH_Instr_is_j_type_a1,
      FETCH_Instr_is_j_type_a2;

// For |fetch/instr$is_jal_instr.
logic FETCH_Instr_is_jal_instr_a1,
      FETCH_Instr_is_jal_instr_a2;

// For |fetch/instr$is_jalr_instr.
logic FETCH_Instr_is_jalr_instr_a1,
      FETCH_Instr_is_jalr_instr_a2;

// For |fetch/instr$is_lb_instr.
logic FETCH_Instr_is_lb_instr_a1,
      FETCH_Instr_is_lb_instr_a2;

// For |fetch/instr$is_lbu_instr.
logic FETCH_Instr_is_lbu_instr_a1,
      FETCH_Instr_is_lbu_instr_a2;

// For |fetch/instr$is_lh_instr.
logic FETCH_Instr_is_lh_instr_a1,
      FETCH_Instr_is_lh_instr_a2;

// For |fetch/instr$is_lhu_instr.
logic FETCH_Instr_is_lhu_instr_a1,
      FETCH_Instr_is_lhu_instr_a2;

// For |fetch/instr$is_lui_instr.
logic FETCH_Instr_is_lui_instr_a1,
      FETCH_Instr_is_lui_instr_a2;

// For |fetch/instr$is_lw_instr.
logic FETCH_Instr_is_lw_instr_a1,
      FETCH_Instr_is_lw_instr_a2;

// For |fetch/instr$is_or_instr.
logic FETCH_Instr_is_or_instr_a1,
      FETCH_Instr_is_or_instr_a2;

// For |fetch/instr$is_ori_instr.
logic FETCH_Instr_is_ori_instr_a1,
      FETCH_Instr_is_ori_instr_a2;

// For |fetch/instr$is_r2_type.
logic FETCH_Instr_is_r2_type_a1;

// For |fetch/instr$is_r4_type.
logic FETCH_Instr_is_r4_type_a1;

// For |fetch/instr$is_r_type.
logic FETCH_Instr_is_r_type_a1;

// For |fetch/instr$is_s_type.
logic FETCH_Instr_is_s_type_a1;

// For |fetch/instr$is_sb_instr.
logic FETCH_Instr_is_sb_instr_a1;

// For |fetch/instr$is_sh_instr.
logic FETCH_Instr_is_sh_instr_a1;

// For |fetch/instr$is_sll_instr.
logic FETCH_Instr_is_sll_instr_a1,
      FETCH_Instr_is_sll_instr_a2;

// For |fetch/instr$is_slli_instr.
logic FETCH_Instr_is_slli_instr_a1,
      FETCH_Instr_is_slli_instr_a2;

// For |fetch/instr$is_slt_instr.
logic FETCH_Instr_is_slt_instr_a1,
      FETCH_Instr_is_slt_instr_a2;

// For |fetch/instr$is_slti_instr.
logic FETCH_Instr_is_slti_instr_a1,
      FETCH_Instr_is_slti_instr_a2;

// For |fetch/instr$is_sltiu_instr.
logic FETCH_Instr_is_sltiu_instr_a1,
      FETCH_Instr_is_sltiu_instr_a2;

// For |fetch/instr$is_sltu_instr.
logic FETCH_Instr_is_sltu_instr_a1,
      FETCH_Instr_is_sltu_instr_a2;

// For |fetch/instr$is_sra_instr.
logic FETCH_Instr_is_sra_instr_a1,
      FETCH_Instr_is_sra_instr_a2;

// For |fetch/instr$is_srai_instr.
logic FETCH_Instr_is_srai_instr_a1,
      FETCH_Instr_is_srai_instr_a2;

// For |fetch/instr$is_srl_instr.
logic FETCH_Instr_is_srl_instr_a1,
      FETCH_Instr_is_srl_instr_a2;

// For |fetch/instr$is_srli_instr.
logic FETCH_Instr_is_srli_instr_a1,
      FETCH_Instr_is_srli_instr_a2;

// For |fetch/instr$is_srli_srai_instr.
logic FETCH_Instr_is_srli_srai_instr_a1;

// For |fetch/instr$is_sub_instr.
logic FETCH_Instr_is_sub_instr_a1,
      FETCH_Instr_is_sub_instr_a2;

// For |fetch/instr$is_sw_instr.
logic FETCH_Instr_is_sw_instr_a1;

// For |fetch/instr$is_u_type.
logic FETCH_Instr_is_u_type_a1;

// For |fetch/instr$is_xor_instr.
logic FETCH_Instr_is_xor_instr_a1,
      FETCH_Instr_is_xor_instr_a2;

// For |fetch/instr$is_xori_instr.
logic FETCH_Instr_is_xori_instr_a1,
      FETCH_Instr_is_xori_instr_a2;

// For |fetch/instr$jal_rslt.
logic [31:0] FETCH_Instr_jal_rslt_a2;

// For |fetch/instr$jalr_rslt.
logic [31:0] FETCH_Instr_jalr_rslt_a2;

// For |fetch/instr$jump.
logic FETCH_Instr_jump_a1,
      FETCH_Instr_jump_a2;

// For |fetch/instr$jump_target.
logic [31:2] FETCH_Instr_jump_target_a1,
             FETCH_Instr_jump_target_a2;

// For |fetch/instr$lb_rslt.
logic [31:0] FETCH_Instr_lb_rslt_a2;

// For |fetch/instr$lbu_rslt.
logic [31:0] FETCH_Instr_lbu_rslt_a2;

// For |fetch/instr$ld.
logic FETCH_Instr_ld_a1,
      FETCH_Instr_ld_a2;

// For |fetch/instr$ld_st.
logic FETCH_Instr_ld_st_a1,
      FETCH_Instr_ld_st_a2;

// For |fetch/instr$ld_st_cond.
logic FETCH_Instr_ld_st_cond_a2;

// For |fetch/instr$ld_st_half.
logic FETCH_Instr_ld_st_half_a1,
      FETCH_Instr_ld_st_half_a2,
      FETCH_Instr_ld_st_half_a3;

// For |fetch/instr$ld_st_word.
logic FETCH_Instr_ld_st_word_a1,
      FETCH_Instr_ld_st_word_a2,
      FETCH_Instr_ld_st_word_a3;

// For |fetch/instr$ld_value.
logic [31:0] FETCH_Instr_ld_value_a3;

// For |fetch/instr$lh_rslt.
logic [31:0] FETCH_Instr_lh_rslt_a2;

// For |fetch/instr$lhu_rslt.
logic [31:0] FETCH_Instr_lhu_rslt_a2;

// For |fetch/instr$lui_rslt.
logic [31:0] FETCH_Instr_lui_rslt_a2;

// For |fetch/instr$lw_rslt.
logic [31:0] FETCH_Instr_lw_rslt_a2;

// For |fetch/instr$misaligned_indirect_jump_target.
logic FETCH_Instr_misaligned_indirect_jump_target_a2;

// For |fetch/instr$misaligned_jump_target.
logic FETCH_Instr_misaligned_jump_target_a1,
      FETCH_Instr_misaligned_jump_target_a2;

// For |fetch/instr$misaligned_pc.
logic FETCH_Instr_misaligned_pc_a1,
      FETCH_Instr_misaligned_pc_a2;

// For |fetch/instr$mispred_branch.
logic FETCH_Instr_mispred_branch_a2;

// For |fetch/instr$mnemonic.
logic [10*8-1:0] FETCH_Instr_mnemonic_a1;

// For |fetch/instr$multype_instr.
logic FETCH_Instr_multype_instr_a1;

// For |fetch/instr$next_good_path_mask.
logic [3+1:0] FETCH_Instr_next_good_path_mask_a0;

// For |fetch/instr$next_no_fetch.
logic FETCH_Instr_next_no_fetch_a0;

// For |fetch/instr$next_pc.
logic [31:2] FETCH_Instr_next_pc_a0;

// For |fetch/instr$non_aborting_isa_trap.
logic FETCH_Instr_non_aborting_isa_trap_a2;

// For |fetch/instr$non_aborting_trap.
logic FETCH_Instr_non_aborting_trap_a2,
      FETCH_Instr_non_aborting_trap_a3;

// For |fetch/instr$non_pipelined.
logic FETCH_Instr_non_pipelined_a2,
      FETCH_Instr_non_pipelined_a3;

// For |fetch/instr$or_rslt.
logic [31:0] FETCH_Instr_or_rslt_a2;

// For |fetch/instr$ori_rslt.
logic [31:0] FETCH_Instr_ori_rslt_a2;

// For |fetch/instr$passed.
logic FETCH_Instr_passed_a3;

// For |fetch/instr$pc_inc.
logic [31:2] FETCH_Instr_pc_inc_a0;

// For |fetch/instr$pred_taken.
logic FETCH_Instr_pred_taken_a1,
      FETCH_Instr_pred_taken_a2;

// For |fetch/instr$pred_taken_branch.
logic FETCH_Instr_pred_taken_branch_a1;

// For |fetch/instr$raw.
logic [31:0] FETCH_Instr_raw_a0,
             FETCH_Instr_raw_a1;

// For |fetch/instr$raw_aq.
logic FETCH_Instr_raw_aq_a1;

// For |fetch/instr$raw_b_imm.
logic [31:0] FETCH_Instr_raw_b_imm_a1;

// For |fetch/instr$raw_funct3.
logic [2:0] FETCH_Instr_raw_funct3_a1;
logic [2:2] FETCH_Instr_raw_funct3_a2,
            FETCH_Instr_raw_funct3_a3;

// For |fetch/instr$raw_funct7.
logic [6:0] FETCH_Instr_raw_funct7_a1;
logic [5:5] FETCH_Instr_raw_funct7_a2;

// For |fetch/instr$raw_i_imm.
logic [31:0] FETCH_Instr_raw_i_imm_a1,
             FETCH_Instr_raw_i_imm_a2;

// For |fetch/instr$raw_j_imm.
logic [31:0] FETCH_Instr_raw_j_imm_a1;

// For |fetch/instr$raw_op2.
logic [1:0] FETCH_Instr_raw_op2_a1;

// For |fetch/instr$raw_op5.
logic [4:0] FETCH_Instr_raw_op5_a1;

// For |fetch/instr$raw_rd.
logic [4:0] FETCH_Instr_raw_rd_a1;

// For |fetch/instr$raw_rl.
logic FETCH_Instr_raw_rl_a1;

// For |fetch/instr$raw_rm.
logic [2:0] FETCH_Instr_raw_rm_a1;

// For |fetch/instr$raw_rs1.
logic [4:0] FETCH_Instr_raw_rs1_a1,
            FETCH_Instr_raw_rs1_a2;

// For |fetch/instr$raw_rs2.
logic [4:0] FETCH_Instr_raw_rs2_a1;

// For |fetch/instr$raw_rs3.
logic [4:0] FETCH_Instr_raw_rs3_a1;

// For |fetch/instr$raw_s_imm.
logic [31:0] FETCH_Instr_raw_s_imm_a1,
             FETCH_Instr_raw_s_imm_a2;

// For |fetch/instr$raw_shamt.
logic [6:0] FETCH_Instr_raw_shamt_a1;

// For |fetch/instr$raw_u_imm.
logic [31:0] FETCH_Instr_raw_u_imm_a1,
             FETCH_Instr_raw_u_imm_a2;

// For |fetch/instr$reg_wr_pending.
logic FETCH_Instr_reg_wr_pending_a1,
      FETCH_Instr_reg_wr_pending_a2,
      FETCH_Instr_reg_wr_pending_a3;

// For |fetch/instr$reg_write.
logic FETCH_Instr_reg_write_a3;

// For |fetch/instr$replay.
logic FETCH_Instr_replay_a1,
      FETCH_Instr_replay_a2,
      FETCH_Instr_replay_a3;

// For |fetch/instr$replay_int.
logic FETCH_Instr_replay_int_a1;

// For |fetch/instr$replay_trap.
logic FETCH_Instr_replay_trap_a2;

// For |fetch/instr$reset.
logic FETCH_Instr_reset_n1,
      FETCH_Instr_reset_a0,
      FETCH_Instr_reset_a1,
      FETCH_Instr_reset_a2,
      FETCH_Instr_reset_a3;

// For |fetch/instr$rslt.
logic [31:0] FETCH_Instr_rslt_a2,
             FETCH_Instr_rslt_a3;

// For |fetch/instr$second_issue.
logic FETCH_Instr_second_issue_a0,
      FETCH_Instr_second_issue_a1,
      FETCH_Instr_second_issue_a2,
      FETCH_Instr_second_issue_a3;

// For |fetch/instr$second_issue_ld.
logic FETCH_Instr_second_issue_ld_a0,
      FETCH_Instr_second_issue_ld_a1,
      FETCH_Instr_second_issue_ld_a2;

// For |fetch/instr$sll_rslt.
logic [31:0] FETCH_Instr_sll_rslt_a2;

// For |fetch/instr$slli_rslt.
logic [31:0] FETCH_Instr_slli_rslt_a2;

// For |fetch/instr$slt_rslt.
logic [31:0] FETCH_Instr_slt_rslt_a2;

// For |fetch/instr$slti_rslt.
logic [31:0] FETCH_Instr_slti_rslt_a2;

// For |fetch/instr$sltiu_rslt.
logic [31:0] FETCH_Instr_sltiu_rslt_a2;

// For |fetch/instr$sltu_rslt.
logic [31:0] FETCH_Instr_sltu_rslt_a2;

// For |fetch/instr$soft_reset.
logic FETCH_Instr_soft_reset_n1;

// For |fetch/instr$spec_ld.
logic FETCH_Instr_spec_ld_a1,
      FETCH_Instr_spec_ld_a2,
      FETCH_Instr_spec_ld_a3;

// For |fetch/instr$sra_rslt.
logic [31:0] FETCH_Instr_sra_rslt_a2;

// For |fetch/instr$srai_intermediate_rslt.
logic [31:0] FETCH_Instr_srai_intermediate_rslt_a2;

// For |fetch/instr$srai_rslt.
logic [31:0] FETCH_Instr_srai_rslt_a2;

// For |fetch/instr$srl_rslt.
logic [31:0] FETCH_Instr_srl_rslt_a2;

// For |fetch/instr$srli_intermediate_rslt.
logic [31:0] FETCH_Instr_srli_intermediate_rslt_a2;

// For |fetch/instr$srli_rslt.
logic [31:0] FETCH_Instr_srli_rslt_a2;

// For |fetch/instr$st.
logic FETCH_Instr_st_a1,
      FETCH_Instr_st_a2;

// For |fetch/instr$st_cond.
logic FETCH_Instr_st_cond_a2;

// For |fetch/instr$st_mask.
logic [3:0] FETCH_Instr_st_mask_a2,
            FETCH_Instr_st_mask_a3;

// For |fetch/instr$st_reg_value.
logic [31:0] FETCH_Instr_st_reg_value_a2;

// For |fetch/instr$st_value.
logic [31:0] FETCH_Instr_st_value_a2,
             FETCH_Instr_st_value_a3;

// For |fetch/instr$sub_rslt.
logic [31:0] FETCH_Instr_sub_rslt_a2;

// For |fetch/instr$taken.
logic FETCH_Instr_taken_a2;

// For |fetch/instr$time_unit_expires.
logic FETCH_Instr_time_unit_expires_a2;

// For |fetch/instr$trap_target.
logic [31:2] FETCH_Instr_trap_target_a2,
             FETCH_Instr_trap_target_a3;

// For |fetch/instr$unnatural_addr_trap.
logic FETCH_Instr_unnatural_addr_trap_a2;

// For |fetch/instr$upd_csr_cycle.
logic [31:0] FETCH_Instr_upd_csr_cycle_a2;

// For |fetch/instr$upd_csr_cycleh.
logic [31:0] FETCH_Instr_upd_csr_cycleh_a2;

// For |fetch/instr$upd_csr_instret.
logic [31:0] FETCH_Instr_upd_csr_instret_a2;

// For |fetch/instr$upd_csr_instreth.
logic [31:0] FETCH_Instr_upd_csr_instreth_a2;

// For |fetch/instr$upd_csr_time.
logic [31:0] FETCH_Instr_upd_csr_time_a2;

// For |fetch/instr$upd_csr_timeh.
logic [31:0] FETCH_Instr_upd_csr_timeh_a2;

// For |fetch/instr$valid_csr.
logic FETCH_Instr_valid_csr_a1;

// For |fetch/instr$valid_decode.
logic FETCH_Instr_valid_decode_a1,
      FETCH_Instr_valid_decode_a2;

// For |fetch/instr$valid_decode_branch.
logic FETCH_Instr_valid_decode_branch_a1,
      FETCH_Instr_valid_decode_branch_a2;

// For |fetch/instr$valid_dest_reg_valid.
logic FETCH_Instr_valid_dest_reg_valid_a2,
      FETCH_Instr_valid_dest_reg_valid_a3;

// For |fetch/instr$valid_exe.
logic FETCH_Instr_valid_exe_a2;

// For |fetch/instr$valid_ld.
logic FETCH_Instr_valid_ld_a2,
      FETCH_Instr_valid_ld_a3;

// For |fetch/instr$valid_st.
logic FETCH_Instr_valid_st_a2,
      FETCH_Instr_valid_st_a3;

// For |fetch/instr$xor_rslt.
logic [31:0] FETCH_Instr_xor_rslt_a2;

// For |fetch/instr$xori_rslt.
logic [31:0] FETCH_Instr_xori_rslt_a2;

// For |fetch/instr/orig_inst$dest_reg.
logic [4:0] FETCH_Instr_OrigInst_dest_reg_a0,
            FETCH_Instr_OrigInst_dest_reg_a1;

// For |fetch/instr/orig_load_inst$addr.
logic [1:0] FETCH_Instr_OrigLoadInst_addr_a0,
            FETCH_Instr_OrigLoadInst_addr_a1,
            FETCH_Instr_OrigLoadInst_addr_a2;

// For |fetch/instr/orig_load_inst$dest_reg.
logic [4:0] FETCH_Instr_OrigLoadInst_dest_reg_a0;

// For |fetch/instr/orig_load_inst$g0_spec_ld_cond.
logic FETCH_Instr_OrigLoadInst_g0_spec_ld_cond_a2;

// For |fetch/instr/orig_load_inst$ld_mask.
logic [3:0] FETCH_Instr_OrigLoadInst_ld_mask_a2;

// For |fetch/instr/orig_load_inst$ld_rslt.
logic [31:0] FETCH_Instr_OrigLoadInst_ld_rslt_a2;

// For |fetch/instr/orig_load_inst$ld_st_half.
logic FETCH_Instr_OrigLoadInst_ld_st_half_a0,
      FETCH_Instr_OrigLoadInst_ld_st_half_a1,
      FETCH_Instr_OrigLoadInst_ld_st_half_a2;

// For |fetch/instr/orig_load_inst$ld_st_word.
logic FETCH_Instr_OrigLoadInst_ld_st_word_a0,
      FETCH_Instr_OrigLoadInst_ld_st_word_a1,
      FETCH_Instr_OrigLoadInst_ld_st_word_a2;

// For |fetch/instr/orig_load_inst$ld_value.
logic [31:0] FETCH_Instr_OrigLoadInst_ld_value_a0,
             FETCH_Instr_OrigLoadInst_ld_value_a1,
             FETCH_Instr_OrigLoadInst_ld_value_a2;

// For |fetch/instr/orig_load_inst$raw_funct3.
logic [2:2] FETCH_Instr_OrigLoadInst_raw_funct3_a0,
            FETCH_Instr_OrigLoadInst_raw_funct3_a1,
            FETCH_Instr_OrigLoadInst_raw_funct3_a2;

// For |fetch/instr/orig_load_inst$sign_bit.
logic FETCH_Instr_OrigLoadInst_sign_bit_a2;

// For |fetch/instr/orig_load_inst$spec_ld.
logic FETCH_Instr_OrigLoadInst_spec_ld_a0,
      FETCH_Instr_OrigLoadInst_spec_ld_a1,
      FETCH_Instr_OrigLoadInst_spec_ld_a2;

// For |fetch/instr/orig_load_inst$spec_ld_cond.
logic FETCH_Instr_OrigLoadInst_spec_ld_cond_a2;

// For |fetch/instr/regs$pending.
logic FETCH_Instr_Regs_pending_a2 [31:1],
      FETCH_Instr_Regs_pending_a3 [31:1];

// For |fetch/instr/regs$value.
logic [31:0] FETCH_Instr_Regs_value_a3 [31:1];

// For |fetch/instr/src$replay.
logic [2:1] FETCH_Instr_Src_replay_a1;

// For |fetch/instr_mem$instr.
logic [31:0] FETCH_InstrMem_instr_a0 [11-1:0];

// For |mem/data$addr.
logic [1:0] MEM_Data_addr_a3,
            MEM_Data_addr_a4;

// For |mem/data$dest_reg.
logic [4:0] MEM_Data_dest_reg_a3,
            MEM_Data_dest_reg_a4;

// For |mem/data$ld_st_half.
logic MEM_Data_ld_st_half_a3,
      MEM_Data_ld_st_half_a4;

// For |mem/data$ld_st_word.
logic MEM_Data_ld_st_word_a3,
      MEM_Data_ld_st_word_a4;

// For |mem/data$ld_value.
logic [31:0] MEM_Data_ld_value_a3,
             MEM_Data_ld_value_a4;

// For |mem/data$raw_funct3.
logic [2:2] MEM_Data_raw_funct3_a3,
            MEM_Data_raw_funct3_a4;

// For |mem/data$spec_ld.
logic MEM_Data_spec_ld_a3,
      MEM_Data_spec_ld_a4;

// For |mem/data$valid_ld.
logic MEM_Data_valid_ld_a3,
      MEM_Data_valid_ld_a4;


//
// Scope: |fetch
//

//
// Scope: |fetch/instr
//

// Clock signals.
logic clkF_FETCH_Instr_branch_or_reset_a3 ;
logic clkF_FETCH_Instr_branch_or_reset_a4 ;
logic clkP_FETCH_Instr_branch_a2 ;
logic clkP_FETCH_Instr_fetch_a1 ;
logic clkP_FETCH_Instr_jump_a2 ;
logic clkP_FETCH_Instr_ld_st_cond_a3 ;
logic clkP_FETCH_Instr_second_issue_a1 ;
logic clkP_FETCH_Instr_second_issue_a2 ;
logic clkP_FETCH_Instr_second_issue_a3 ;
logic clkP_FETCH_Instr_second_issue_ld_a1 ;
logic clkP_FETCH_Instr_second_issue_ld_a2 ;
logic clkP_FETCH_Instr_st_cond_a3 ;
logic clkP_FETCH_Instr_valid_decode_a2 ;
logic clkP_FETCH_Instr_valid_decode_a3 ;
logic clkP_FETCH_Instr_valid_decode_branch_a2 ;

//
// Scope: |fetch/instr/src[2:1]
//

// Clock signals.
logic clkP_FETCH_Instr_Src_is_reg_condition_a2 [2:1];


generate


   //
   // Scope: |fetch
   //


      //
      // Scope: /instr
      //

         // For $BranchState.
         always_ff @(posedge clkF_FETCH_Instr_branch_or_reset_a3) FETCH_Instr_BranchState_a2[1:0] <= FETCH_Instr_BranchState_a1[1:0];
         always_ff @(posedge clkF_FETCH_Instr_branch_or_reset_a4) FETCH_Instr_BranchState_a3[1] <= FETCH_Instr_BranchState_a2[1];

         // For $Cnt.
         always_ff @(posedge clk) FETCH_Instr_Cnt_n1[7:0] <= FETCH_Instr_Cnt_n2[7:0];

         // For $GoodPathMask.
         always_ff @(posedge clk) FETCH_Instr_GoodPathMask_a0[3+1:0] <= FETCH_Instr_GoodPathMask_n1[3+1:0];
         always_ff @(posedge clk) FETCH_Instr_GoodPathMask_a1[3+1:1] <= FETCH_Instr_GoodPathMask_a0[3+1:1];

         // For $NoFetch.
         always_ff @(posedge clk) FETCH_Instr_NoFetch_a0 <= FETCH_Instr_NoFetch_n1;
         always_ff @(posedge clk) FETCH_Instr_NoFetch_a1 <= FETCH_Instr_NoFetch_a0;
         always_ff @(posedge clk) FETCH_Instr_NoFetch_a2 <= FETCH_Instr_NoFetch_a1;
         always_ff @(posedge clk) FETCH_Instr_NoFetch_a3 <= FETCH_Instr_NoFetch_a2;

         // For $Pc.
         always_ff @(posedge clk) FETCH_Instr_Pc_a0[31:2] <= FETCH_Instr_Pc_n1[31:2];
         always_ff @(posedge clk) FETCH_Instr_Pc_a1[31:2] <= FETCH_Instr_Pc_a0[31:2];
         always_ff @(posedge clk) FETCH_Instr_Pc_a2[31:2] <= FETCH_Instr_Pc_a1[31:2];
         always_ff @(posedge clk) FETCH_Instr_Pc_a3[31:2] <= FETCH_Instr_Pc_a2[31:2];

         // For $ReachedEnd.
         always_ff @(posedge clk) FETCH_Instr_ReachedEnd_a3 <= FETCH_Instr_ReachedEnd_a2;

         // For $Reg4Became45.
         always_ff @(posedge clk) FETCH_Instr_Reg4Became45_a3 <= FETCH_Instr_Reg4Became45_a2;

         // For $RemainingCyclesWithinTimeUnit.
         always_ff @(posedge clk) FETCH_Instr_RemainingCyclesWithinTimeUnit_a2[30-1:0] <= FETCH_Instr_RemainingCyclesWithinTimeUnit_a1[30-1:0];

         // For $aborting_trap.
         always_ff @(posedge clk) FETCH_Instr_aborting_trap_a3 <= FETCH_Instr_aborting_trap_a2;

         // For $addr.
         always_ff @(posedge clkP_FETCH_Instr_ld_st_cond_a3) FETCH_Instr_addr_a3[31:0] <= FETCH_Instr_addr_a2[31:0];

         // For $branch.
         always_ff @(posedge clk) FETCH_Instr_branch_a2 <= FETCH_Instr_branch_a1;

         // For $branch_or_reset.
         always_ff @(posedge clk) FETCH_Instr_branch_or_reset_a3 <= FETCH_Instr_branch_or_reset_a2;

         // For $branch_target.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_branch_a2) FETCH_Instr_branch_target_a2[31:2] <= FETCH_Instr_branch_target_a1[31:2];

         // For $commit.
         always_ff @(posedge clk) FETCH_Instr_commit_a3 <= FETCH_Instr_commit_a2;

         // For $conditional_branch.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_conditional_branch_a2 <= FETCH_Instr_conditional_branch_a1;

         // For $csr_cycle.
         always_ff @(posedge clk) FETCH_Instr_csr_cycle_a2[31:0] <= FETCH_Instr_csr_cycle_a1[31:0];

         // For $csr_cycleh.
         always_ff @(posedge clk) FETCH_Instr_csr_cycleh_a2[31:0] <= FETCH_Instr_csr_cycleh_a1[31:0];

         // For $csr_instret.
         always_ff @(posedge clk) FETCH_Instr_csr_instret_a2[31:0] <= FETCH_Instr_csr_instret_a1[31:0];

         // For $csr_instreth.
         always_ff @(posedge clk) FETCH_Instr_csr_instreth_a2[31:0] <= FETCH_Instr_csr_instreth_a1[31:0];

         // For $csr_time.
         always_ff @(posedge clk) FETCH_Instr_csr_time_a2[31:0] <= FETCH_Instr_csr_time_a1[31:0];

         // For $csr_timeh.
         always_ff @(posedge clk) FETCH_Instr_csr_timeh_a2[31:0] <= FETCH_Instr_csr_timeh_a1[31:0];

         // For $csr_trap.
         always_ff @(posedge clk) FETCH_Instr_csr_trap_a2 <= FETCH_Instr_csr_trap_a1;

         // For $dest_reg.
         always_ff @(posedge clk) FETCH_Instr_dest_reg_a2[4:0] <= FETCH_Instr_dest_reg_a1[4:0];
         always_ff @(posedge clk) FETCH_Instr_dest_reg_a3[4:0] <= FETCH_Instr_dest_reg_a2[4:0];

         // For $dest_reg_valid.
         always_ff @(posedge clk) FETCH_Instr_dest_reg_valid_a2 <= FETCH_Instr_dest_reg_valid_a1;
         always_ff @(posedge clk) FETCH_Instr_dest_reg_valid_a3 <= FETCH_Instr_dest_reg_valid_a2;

         // For $div_mul.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_div_mul_a2 <= FETCH_Instr_div_mul_a1;

         // For $fetch.
         always_ff @(posedge clk) FETCH_Instr_fetch_a1 <= FETCH_Instr_fetch_a0;

         // For $illegal.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_illegal_a2 <= FETCH_Instr_illegal_a1;
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a3) FETCH_Instr_illegal_a3 <= FETCH_Instr_illegal_a2;

         // For $indirect_jump.
         always_ff @(posedge clk) FETCH_Instr_indirect_jump_a2 <= FETCH_Instr_indirect_jump_a1;

         // For $is_add_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_add_instr_a2 <= FETCH_Instr_is_add_instr_a1;

         // For $is_addi_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_addi_instr_a2 <= FETCH_Instr_is_addi_instr_a1;

         // For $is_and_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_and_instr_a2 <= FETCH_Instr_is_and_instr_a1;

         // For $is_andi_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_andi_instr_a2 <= FETCH_Instr_is_andi_instr_a1;

         // For $is_auipc_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_auipc_instr_a2 <= FETCH_Instr_is_auipc_instr_a1;

         // For $is_beq_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_beq_instr_a2 <= FETCH_Instr_is_beq_instr_a1;

         // For $is_bge_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_bge_instr_a2 <= FETCH_Instr_is_bge_instr_a1;

         // For $is_bgeu_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_bgeu_instr_a2 <= FETCH_Instr_is_bgeu_instr_a1;

         // For $is_blt_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_blt_instr_a2 <= FETCH_Instr_is_blt_instr_a1;

         // For $is_bltu_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_bltu_instr_a2 <= FETCH_Instr_is_bltu_instr_a1;

         // For $is_bne_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_bne_instr_a2 <= FETCH_Instr_is_bne_instr_a1;

         // For $is_csr_clear.
         always_ff @(posedge clk) FETCH_Instr_is_csr_clear_a2 <= FETCH_Instr_is_csr_clear_a1;

         // For $is_csr_cycle.
         always_ff @(posedge clk) FETCH_Instr_is_csr_cycle_a2 <= FETCH_Instr_is_csr_cycle_a1;

         // For $is_csr_cycleh.
         always_ff @(posedge clk) FETCH_Instr_is_csr_cycleh_a2 <= FETCH_Instr_is_csr_cycleh_a1;

         // For $is_csr_instret.
         always_ff @(posedge clk) FETCH_Instr_is_csr_instret_a2 <= FETCH_Instr_is_csr_instret_a1;

         // For $is_csr_instreth.
         always_ff @(posedge clk) FETCH_Instr_is_csr_instreth_a2 <= FETCH_Instr_is_csr_instreth_a1;

         // For $is_csr_set.
         always_ff @(posedge clk) FETCH_Instr_is_csr_set_a2 <= FETCH_Instr_is_csr_set_a1;

         // For $is_csr_time.
         always_ff @(posedge clk) FETCH_Instr_is_csr_time_a2 <= FETCH_Instr_is_csr_time_a1;

         // For $is_csr_timeh.
         always_ff @(posedge clk) FETCH_Instr_is_csr_timeh_a2 <= FETCH_Instr_is_csr_timeh_a1;

         // For $is_csr_write.
         always_ff @(posedge clk) FETCH_Instr_is_csr_write_a2 <= FETCH_Instr_is_csr_write_a1;

         // For $is_csrrc_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_csrrc_instr_a2 <= FETCH_Instr_is_csrrc_instr_a1;

         // For $is_csrrci_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_csrrci_instr_a2 <= FETCH_Instr_is_csrrci_instr_a1;

         // For $is_csrrs_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_csrrs_instr_a2 <= FETCH_Instr_is_csrrs_instr_a1;

         // For $is_csrrsi_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_csrrsi_instr_a2 <= FETCH_Instr_is_csrrsi_instr_a1;

         // For $is_csrrw_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_csrrw_instr_a2 <= FETCH_Instr_is_csrrw_instr_a1;

         // For $is_csrrwi_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_csrrwi_instr_a2 <= FETCH_Instr_is_csrrwi_instr_a1;

         // For $is_j_type.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_j_type_a2 <= FETCH_Instr_is_j_type_a1;

         // For $is_jal_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_jal_instr_a2 <= FETCH_Instr_is_jal_instr_a1;

         // For $is_jalr_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_jalr_instr_a2 <= FETCH_Instr_is_jalr_instr_a1;

         // For $is_lb_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_lb_instr_a2 <= FETCH_Instr_is_lb_instr_a1;

         // For $is_lbu_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_lbu_instr_a2 <= FETCH_Instr_is_lbu_instr_a1;

         // For $is_lh_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_lh_instr_a2 <= FETCH_Instr_is_lh_instr_a1;

         // For $is_lhu_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_lhu_instr_a2 <= FETCH_Instr_is_lhu_instr_a1;

         // For $is_lui_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_lui_instr_a2 <= FETCH_Instr_is_lui_instr_a1;

         // For $is_lw_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_lw_instr_a2 <= FETCH_Instr_is_lw_instr_a1;

         // For $is_or_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_or_instr_a2 <= FETCH_Instr_is_or_instr_a1;

         // For $is_ori_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_ori_instr_a2 <= FETCH_Instr_is_ori_instr_a1;

         // For $is_sll_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_sll_instr_a2 <= FETCH_Instr_is_sll_instr_a1;

         // For $is_slli_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_slli_instr_a2 <= FETCH_Instr_is_slli_instr_a1;

         // For $is_slt_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_slt_instr_a2 <= FETCH_Instr_is_slt_instr_a1;

         // For $is_slti_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_slti_instr_a2 <= FETCH_Instr_is_slti_instr_a1;

         // For $is_sltiu_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_sltiu_instr_a2 <= FETCH_Instr_is_sltiu_instr_a1;

         // For $is_sltu_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_sltu_instr_a2 <= FETCH_Instr_is_sltu_instr_a1;

         // For $is_sra_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_sra_instr_a2 <= FETCH_Instr_is_sra_instr_a1;

         // For $is_srai_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_srai_instr_a2 <= FETCH_Instr_is_srai_instr_a1;

         // For $is_srl_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_srl_instr_a2 <= FETCH_Instr_is_srl_instr_a1;

         // For $is_srli_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_srli_instr_a2 <= FETCH_Instr_is_srli_instr_a1;

         // For $is_sub_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_sub_instr_a2 <= FETCH_Instr_is_sub_instr_a1;

         // For $is_xor_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_xor_instr_a2 <= FETCH_Instr_is_xor_instr_a1;

         // For $is_xori_instr.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_is_xori_instr_a2 <= FETCH_Instr_is_xori_instr_a1;

         // For $jump.
         always_ff @(posedge clk) FETCH_Instr_jump_a2 <= FETCH_Instr_jump_a1;

         // For $jump_target.
         always_ff @(posedge clkP_FETCH_Instr_jump_a2) FETCH_Instr_jump_target_a2[31:2] <= FETCH_Instr_jump_target_a1[31:2];

         // For $ld.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_ld_a2 <= FETCH_Instr_ld_a1;

         // For $ld_st.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_ld_st_a2 <= FETCH_Instr_ld_st_a1;

         // For $ld_st_half.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_ld_st_half_a2 <= FETCH_Instr_ld_st_half_a1;
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a3) FETCH_Instr_ld_st_half_a3 <= FETCH_Instr_ld_st_half_a2;

         // For $ld_st_word.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_ld_st_word_a2 <= FETCH_Instr_ld_st_word_a1;
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a3) FETCH_Instr_ld_st_word_a3 <= FETCH_Instr_ld_st_word_a2;

         // For $misaligned_jump_target.
         always_ff @(posedge clkP_FETCH_Instr_jump_a2) FETCH_Instr_misaligned_jump_target_a2 <= FETCH_Instr_misaligned_jump_target_a1;

         // For $misaligned_pc.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_branch_a2) FETCH_Instr_misaligned_pc_a2 <= FETCH_Instr_misaligned_pc_a1;

         // For $non_aborting_trap.
         always_ff @(posedge clk) FETCH_Instr_non_aborting_trap_a3 <= FETCH_Instr_non_aborting_trap_a2;

         // For $non_pipelined.
         always_ff @(posedge clk) FETCH_Instr_non_pipelined_a3 <= FETCH_Instr_non_pipelined_a2;

         // For $pred_taken.
         always_ff @(posedge clkP_FETCH_Instr_branch_a2) FETCH_Instr_pred_taken_a2 <= FETCH_Instr_pred_taken_a1;

         // For $raw.
         always_ff @(posedge clkP_FETCH_Instr_fetch_a1) FETCH_Instr_raw_a1[31:0] <= FETCH_Instr_raw_a0[31:0];

         // For $raw_funct3.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_raw_funct3_a2[2] <= FETCH_Instr_raw_funct3_a1[2];
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a3) FETCH_Instr_raw_funct3_a3[2] <= FETCH_Instr_raw_funct3_a2[2];

         // For $raw_funct7.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_raw_funct7_a2[5] <= FETCH_Instr_raw_funct7_a1[5];

         // For $raw_i_imm.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_raw_i_imm_a2[31:0] <= FETCH_Instr_raw_i_imm_a1[31:0];

         // For $raw_rs1.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_raw_rs1_a2[4:0] <= FETCH_Instr_raw_rs1_a1[4:0];

         // For $raw_s_imm.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_raw_s_imm_a2[31:0] <= FETCH_Instr_raw_s_imm_a1[31:0];

         // For $raw_u_imm.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_raw_u_imm_a2[31:0] <= FETCH_Instr_raw_u_imm_a1[31:0];

         // For $reg_wr_pending.
         always_ff @(posedge clk) FETCH_Instr_reg_wr_pending_a2 <= FETCH_Instr_reg_wr_pending_a1;
         always_ff @(posedge clk) FETCH_Instr_reg_wr_pending_a3 <= FETCH_Instr_reg_wr_pending_a2;

         // For $replay.
         always_ff @(posedge clk) FETCH_Instr_replay_a2 <= FETCH_Instr_replay_a1;
         always_ff @(posedge clk) FETCH_Instr_replay_a3 <= FETCH_Instr_replay_a2;

         // For $reset.
         always_ff @(posedge clk) FETCH_Instr_reset_a0 <= FETCH_Instr_reset_n1;
         always_ff @(posedge clk) FETCH_Instr_reset_a1 <= FETCH_Instr_reset_a0;
         always_ff @(posedge clk) FETCH_Instr_reset_a2 <= FETCH_Instr_reset_a1;
         always_ff @(posedge clk) FETCH_Instr_reset_a3 <= FETCH_Instr_reset_a2;

         // For $rslt.
         always_ff @(posedge clk) FETCH_Instr_rslt_a3[31:0] <= FETCH_Instr_rslt_a2[31:0];

         // For $second_issue.
         always_ff @(posedge clk) FETCH_Instr_second_issue_a1 <= FETCH_Instr_second_issue_a0;
         always_ff @(posedge clk) FETCH_Instr_second_issue_a2 <= FETCH_Instr_second_issue_a1;
         always_ff @(posedge clk) FETCH_Instr_second_issue_a3 <= FETCH_Instr_second_issue_a2;

         // For $second_issue_ld.
         always_ff @(posedge clk) FETCH_Instr_second_issue_ld_a1 <= FETCH_Instr_second_issue_ld_a0;
         always_ff @(posedge clk) FETCH_Instr_second_issue_ld_a2 <= FETCH_Instr_second_issue_ld_a1;

         // For $spec_ld.
         always_ff @(posedge clk) FETCH_Instr_spec_ld_a2 <= FETCH_Instr_spec_ld_a1;
         always_ff @(posedge clk) FETCH_Instr_spec_ld_a3 <= FETCH_Instr_spec_ld_a2;

         // For $st.
         always_ff @(posedge clkP_FETCH_Instr_valid_decode_a2) FETCH_Instr_st_a2 <= FETCH_Instr_st_a1;

         // For $st_mask.
         always_ff @(posedge clkP_FETCH_Instr_st_cond_a3) FETCH_Instr_st_mask_a3[3:0] <= FETCH_Instr_st_mask_a2[3:0];

         // For $st_value.
         always_ff @(posedge clkP_FETCH_Instr_st_cond_a3) FETCH_Instr_st_value_a3[31:0] <= FETCH_Instr_st_value_a2[31:0];

         // For $trap_target.
         always_ff @(posedge clk) FETCH_Instr_trap_target_a3[31:2] <= FETCH_Instr_trap_target_a2[31:2];

         // For $valid_decode.
         always_ff @(posedge clk) FETCH_Instr_valid_decode_a2 <= FETCH_Instr_valid_decode_a1;

         // For $valid_decode_branch.
         always_ff @(posedge clk) FETCH_Instr_valid_decode_branch_a2 <= FETCH_Instr_valid_decode_branch_a1;

         // For $valid_dest_reg_valid.
         always_ff @(posedge clk) FETCH_Instr_valid_dest_reg_valid_a3 <= FETCH_Instr_valid_dest_reg_valid_a2;

         // For $valid_ld.
         always_ff @(posedge clk) FETCH_Instr_valid_ld_a3 <= FETCH_Instr_valid_ld_a2;

         // For $valid_st.
         always_ff @(posedge clk) FETCH_Instr_valid_st_a3 <= FETCH_Instr_valid_st_a2;


         //
         // Scope: /orig_inst
         //

            // For $dest_reg.
            always_ff @(posedge clkP_FETCH_Instr_second_issue_a1) FETCH_Instr_OrigInst_dest_reg_a1[4:0] <= FETCH_Instr_OrigInst_dest_reg_a0[4:0];


            //
            // Scope: /src[2:1]
            //
            for (src = 1; src <= 2; src++) begin : L1gen_FETCH_Instr_OrigInst_Src
               // For $dummy.
               always_ff @(posedge clkP_FETCH_Instr_second_issue_a1) L1_FETCH_Instr_OrigInst_Src[src].L1_dummy_a1 <= L1_FETCH_Instr_OrigInst_Src[src].L1_dummy_a0;
               always_ff @(posedge clkP_FETCH_Instr_second_issue_a2) L1_FETCH_Instr_OrigInst_Src[src].L1_dummy_a2 <= L1_FETCH_Instr_OrigInst_Src[src].L1_dummy_a1;
               always_ff @(posedge clkP_FETCH_Instr_second_issue_a3) L1_FETCH_Instr_OrigInst_Src[src].L1_dummy_a3 <= L1_FETCH_Instr_OrigInst_Src[src].L1_dummy_a2;

            end


         //
         // Scope: /orig_load_inst
         //

            // For $addr.
            always_ff @(posedge clkP_FETCH_Instr_second_issue_ld_a1) FETCH_Instr_OrigLoadInst_addr_a1[1:0] <= FETCH_Instr_OrigLoadInst_addr_a0[1:0];
            always_ff @(posedge clkP_FETCH_Instr_second_issue_ld_a2) FETCH_Instr_OrigLoadInst_addr_a2[1:0] <= FETCH_Instr_OrigLoadInst_addr_a1[1:0];

            // This is an unconditioned version of the condition signal.
            assign FETCH_Instr_OrigLoadInst_g0_spec_ld_cond_a2 = FETCH_Instr_OrigLoadInst_spec_ld_cond_a2 && FETCH_Instr_second_issue_ld_a2;

            // For $ld_st_half.
            always_ff @(posedge clkP_FETCH_Instr_second_issue_ld_a1) FETCH_Instr_OrigLoadInst_ld_st_half_a1 <= FETCH_Instr_OrigLoadInst_ld_st_half_a0;
            always_ff @(posedge clkP_FETCH_Instr_second_issue_ld_a2) FETCH_Instr_OrigLoadInst_ld_st_half_a2 <= FETCH_Instr_OrigLoadInst_ld_st_half_a1;

            // For $ld_st_word.
            always_ff @(posedge clkP_FETCH_Instr_second_issue_ld_a1) FETCH_Instr_OrigLoadInst_ld_st_word_a1 <= FETCH_Instr_OrigLoadInst_ld_st_word_a0;
            always_ff @(posedge clkP_FETCH_Instr_second_issue_ld_a2) FETCH_Instr_OrigLoadInst_ld_st_word_a2 <= FETCH_Instr_OrigLoadInst_ld_st_word_a1;

            // For $ld_value.
            always_ff @(posedge clkP_FETCH_Instr_second_issue_ld_a1) FETCH_Instr_OrigLoadInst_ld_value_a1[31:0] <= FETCH_Instr_OrigLoadInst_ld_value_a0[31:0];
            always_ff @(posedge clkP_FETCH_Instr_second_issue_ld_a2) FETCH_Instr_OrigLoadInst_ld_value_a2[31:0] <= FETCH_Instr_OrigLoadInst_ld_value_a1[31:0];

            // For $raw_funct3.
            always_ff @(posedge clkP_FETCH_Instr_second_issue_ld_a1) FETCH_Instr_OrigLoadInst_raw_funct3_a1[2] <= FETCH_Instr_OrigLoadInst_raw_funct3_a0[2];
            always_ff @(posedge clkP_FETCH_Instr_second_issue_ld_a2) FETCH_Instr_OrigLoadInst_raw_funct3_a2[2] <= FETCH_Instr_OrigLoadInst_raw_funct3_a1[2];

            // For $spec_ld.
            always_ff @(posedge clkP_FETCH_Instr_second_issue_ld_a1) FETCH_Instr_OrigLoadInst_spec_ld_a1 <= FETCH_Instr_OrigLoadInst_spec_ld_a0;
            always_ff @(posedge clkP_FETCH_Instr_second_issue_ld_a2) FETCH_Instr_OrigLoadInst_spec_ld_a2 <= FETCH_Instr_OrigLoadInst_spec_ld_a1;



         //
         // Scope: /regs[31:1]
         //
         for (regs = 1; regs <= 31; regs++) begin : L1gen_FETCH_Instr_Regs
            // For $pending.
            always_ff @(posedge clk) FETCH_Instr_Regs_pending_a3[regs] <= FETCH_Instr_Regs_pending_a2[regs];

         end

         //
         // Scope: /src[2:1]
         //
         for (src = 1; src <= 2; src++) begin : L1gen_FETCH_Instr_Src
            // For $dummy.
            always_ff @(posedge clk) L1b_FETCH_Instr_Src[src].L1_dummy_a2 <= L1b_FETCH_Instr_Src[src].L1_dummy_a1;
            always_ff @(posedge clk) L1b_FETCH_Instr_Src[src].L1_dummy_a3 <= L1b_FETCH_Instr_Src[src].L1_dummy_a2;

            // For $reg_value.
            always_ff @(posedge clkP_FETCH_Instr_Src_is_reg_condition_a2[src]) L1b_FETCH_Instr_Src[src].L1_reg_value_a2[31:0] <= L1b_FETCH_Instr_Src[src].L1_reg_value_a1[31:0];

         end



   //
   // Scope: |mem
   //


      //
      // Scope: /data
      //

         // For $addr.
         always_ff @(posedge clk) MEM_Data_addr_a4[1:0] <= MEM_Data_addr_a3[1:0];

         // For $dest_reg.
         always_ff @(posedge clk) MEM_Data_dest_reg_a4[4:0] <= MEM_Data_dest_reg_a3[4:0];

         // For $ld_st_half.
         always_ff @(posedge clk) MEM_Data_ld_st_half_a4 <= MEM_Data_ld_st_half_a3;

         // For $ld_st_word.
         always_ff @(posedge clk) MEM_Data_ld_st_word_a4 <= MEM_Data_ld_st_word_a3;

         // For $ld_value.
         always_ff @(posedge clk) MEM_Data_ld_value_a4[31:0] <= MEM_Data_ld_value_a3[31:0];

         // For $raw_funct3.
         always_ff @(posedge clk) MEM_Data_raw_funct3_a4[2] <= MEM_Data_raw_funct3_a3[2];

         // For $spec_ld.
         always_ff @(posedge clk) MEM_Data_spec_ld_a4 <= MEM_Data_spec_ld_a3;

         // For $valid_ld.
         always_ff @(posedge clk) MEM_Data_valid_ld_a4 <= MEM_Data_valid_ld_a3;


         //
         // Scope: /src[2:1]
         //
         for (src = 1; src <= 2; src++) begin : L1gen_MEM_Data_Src
            // For $dummy.
            always_ff @(posedge clk) L1_MEM_Data_Src[src].L1_dummy_a4 <= L1_MEM_Data_Src[src].L1_dummy_a3;

         end




endgenerate



//
// Gated clocks.
//

generate



   //
   // Scope: |fetch
   //


      //
      // Scope: /instr
      //

         clk_gate gen_clkF_FETCH_Instr_branch_or_reset_a3(clkF_FETCH_Instr_branch_or_reset_a3, clk, FETCH_Instr_branch_or_reset_a2, 1'b1, 1'b0);
         clk_gate gen_clkF_FETCH_Instr_branch_or_reset_a4(clkF_FETCH_Instr_branch_or_reset_a4, clk, FETCH_Instr_branch_or_reset_a3, 1'b1, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_branch_a2(clkP_FETCH_Instr_branch_a2, clk, 1'b1, FETCH_Instr_branch_a1, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_fetch_a1(clkP_FETCH_Instr_fetch_a1, clk, 1'b1, FETCH_Instr_fetch_a0, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_jump_a2(clkP_FETCH_Instr_jump_a2, clk, 1'b1, FETCH_Instr_jump_a1, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_ld_st_cond_a3(clkP_FETCH_Instr_ld_st_cond_a3, clk, 1'b1, FETCH_Instr_ld_st_cond_a2, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_second_issue_a1(clkP_FETCH_Instr_second_issue_a1, clk, 1'b1, FETCH_Instr_second_issue_a0, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_second_issue_a2(clkP_FETCH_Instr_second_issue_a2, clk, 1'b1, FETCH_Instr_second_issue_a1, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_second_issue_a3(clkP_FETCH_Instr_second_issue_a3, clk, 1'b1, FETCH_Instr_second_issue_a2, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_second_issue_ld_a1(clkP_FETCH_Instr_second_issue_ld_a1, clk, 1'b1, FETCH_Instr_second_issue_ld_a0, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_second_issue_ld_a2(clkP_FETCH_Instr_second_issue_ld_a2, clk, 1'b1, FETCH_Instr_second_issue_ld_a1, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_st_cond_a3(clkP_FETCH_Instr_st_cond_a3, clk, 1'b1, FETCH_Instr_st_cond_a2, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_valid_decode_a2(clkP_FETCH_Instr_valid_decode_a2, clk, 1'b1, FETCH_Instr_valid_decode_a1, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_valid_decode_a3(clkP_FETCH_Instr_valid_decode_a3, clk, 1'b1, FETCH_Instr_valid_decode_a2, 1'b0);
         clk_gate gen_clkP_FETCH_Instr_valid_decode_branch_a2(clkP_FETCH_Instr_valid_decode_branch_a2, clk, 1'b1, FETCH_Instr_valid_decode_branch_a1, 1'b0);

         //
         // Scope: /src[2:1]
         //
         for (src = 1; src <= 2; src++) begin : L1clk_FETCH_Instr_Src
            clk_gate gen_clkP_FETCH_Instr_Src_is_reg_condition_a2(clkP_FETCH_Instr_Src_is_reg_condition_a2[src], clk, 1'b1, L1b_FETCH_Instr_Src[src].L1_is_reg_condition_a1, 1'b0);
         end




endgenerate



generate   // This is awkward, but we need to go into 'generate' context in the line that `includes the declarations file.
