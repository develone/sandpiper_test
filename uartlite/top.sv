`line 2 "top.tlv" 0 //_\TLV_version 1d: tl-x.org, generated by SandPiper(TM) 1.9-2018/02/11-beta
`include "sp_default.vh" //_\SV

   // =========================================
   // Welcome!  Try the tutorials via the menu.
   // =========================================

   // Default Makerchip TL-Verilog Code Template
   
   // Macro providing required top-level module definition, random
   // stimulus support, and Verilator config.
   module top(input logic clk, input logic reset, input logic [31:0] cyc_cnt, output logic passed, output logic failed);    /* verilator lint_save */ /* verilator lint_off UNOPTFLAT */  bit [256:0] RW_rand_raw; bit [256+63:0] RW_rand_vect; pseudo_rand #(.WIDTH(257)) pseudo_rand (clk, reset, RW_rand_raw[256:0]); assign RW_rand_vect[256+63:0] = {RW_rand_raw[62:0], RW_rand_raw};  /* verilator lint_restore */  /* verilator lint_off WIDTH */ /* verilator lint_off UNOPTFLAT */   // (Expanded in Nav-TLV pane.)
`include "top_gen.sv" //_\TLV
   assign L0_reset_a0 = reset;
   //_|tx
      //_@0
         assign TX_o_uart_tx_a0 = o_uart_tx;
         assign TX_o_data_a0[7:0] = o_data;
         assign TX_r_busy_a0 = r_busy;
         assign TX_lcl_data_a0[7:0] = lcl_data;
        
         
      //_@1
         //?!$r_busy_a0 
            //$lcl_data[1:1] = 1`b1 : $r_busy_a0;
         TX_o_uart_tx_a0_a1;
      //_@2
         TX_lcl_data_a2[2:2];
         TX_o_uart_tx_a1_a2;
      //_@3
         TX_lcl_data_a3[3:3];
         TX_o_uart_tx_a2_a3;
      //_@4
         TX_lcl_data_a4[4:4];
         TX_o_uart_tx_a3_a4;
      //_@5
         TX_lcl_data_a5[5:5];
         TX_o_uart_tx_a4_a5;
      //_@6
         TX_lcl_data_a6[6:6];
         TX_o_uart_tx_a5_a6;
      //_@7
         TX_lcl_data_a7[7:7];
         TX_o_uart_tx_a6_a7;
      //_@8
         assign TX_lcl_data_a8[0:0] = 1`b1;

   //_|rx
      //_@0
         assign RX_i_uart_rx_a0 = i_uart_rx;
         assign RX_lcl_data_a0 = 1`b0;
         assign RX_i_data_a0[7:0] = i_data;
         
   

   //...

   // Assert these to end simulation (before Makerchip cycle limit).
   assign passed = cyc_cnt > 40;
   assign failed = 1'b0; endgenerate
//_\SV
   endmodule
