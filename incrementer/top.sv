`line 2 "top.tlv" 0 //_\TLV_version 1d: tl-x.org, generated by SandPiper(TM) 1.9-2018/02/11-beta
`include "sp_default.vh" //_\SV

   // ===========
   // Incrementer
   // ===========

   // An incrementer implemented bit-level using hierarchy for the bit slice.
   // Testbench compares with result of + operator.

   module top(input logic clk, input logic reset, input logic [31:0] cyc_cnt, output logic passed, output logic failed);    /* verilator lint_save */ /* verilator lint_off UNOPTFLAT */  bit [256:0] RW_rand_raw; bit [256+63:0] RW_rand_vect; pseudo_rand #(.WIDTH(257)) pseudo_rand (clk, reset, RW_rand_raw[256:0]); assign RW_rand_vect[256+63:0] = {RW_rand_raw[62:0], RW_rand_raw};  /* verilator lint_restore */  /* verilator lint_off WIDTH */ /* verilator lint_off UNOPTFLAT */
`include "top_gen.sv" //_\TLV
   
   
   // The incrementer
   for (slice = 0; slice <= 8-1; slice++) begin : L1_Slice logic L1_carry_in_a0; //_/slice
      // Get carry in from previous slice (or 1 into slice 0).
      assign L1_carry_in_a0 = (slice == 0) ? 1'b1
                                : Slice_carry_out_a0[(slice - 1) % 8];
      assign Slice_Value_n1[slice] = reset ? 1'b0    // reset to zero
                       : Slice_Value_a0[slice] ^ L1_carry_in_a0;
      assign Slice_carry_out_a0[slice] = Slice_Value_a0[slice] && L1_carry_in_a0; end
   
   // Combine output bits into a vector.
   assign L0_value_a0[8-1:0] = Slice_Value_a0;
   
   
   // Testbench
   //_/tb
      assign Tb_Value_n1[8-1:0] = reset ? 8'b0 : Tb_Value_a0 + 8'b1;
      assign Tb_error_a0 = L0_value_a0 != Tb_Value_a0;
   
      // End simulation
      assign failed = ! reset && Tb_error_a0;
      assign passed = Tb_Value_a0 == 8'd30 && cyc_cnt >= 32'd30; endgenerate
//_\SV
   endmodule
