
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+1706 (git sha1 7cc9d487, clang 7.0.1-8+rpi3+deb10u2 -fPIC -Os)


-- Parsing `top.sv' using frontend `verilog -sv' --

1. Executing Verilog-2005 frontend: top.sv
Parsing SystemVerilog input from `top.sv' to AST representation.
Generating RTLIL representation for module `\top'.
Warning: reg '\RW_rand_vect' is assigned in a continuous assignment at top.tlv:15.
top.tlv:44: Warning: System task `$display' outside initial block is unsupported.
Successfully finished Verilog frontend.

-- Parsing `clk_gate.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: clk_gate.v
Parsing Verilog input from `clk_gate.v' to AST representation.
Generating RTLIL representation for module `\clk_gate'.
Successfully finished Verilog frontend.

-- Parsing `pseudo_rand.sv' using frontend `verilog -sv' --

3. Executing Verilog-2005 frontend: pseudo_rand.sv
Parsing SystemVerilog input from `pseudo_rand.sv' to AST representation.
Generating RTLIL representation for module `\pseudo_rand'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -blif top.blif -json top.json' --

4. Executing SYNTH_ICE40 pass.

4.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

4.2. Executing HIERARCHY pass (managing design hierarchy).

4.2.1. Finding top of design hierarchy..
root of   0 design levels: pseudo_rand         
root of   0 design levels: clk_gate            
root of   1 design levels: top                 
Automatically selected top as design top module.

4.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \clk_gate
Used module:     \pseudo_rand
Parameter \WIDTH = 257

4.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\pseudo_rand'.
Parameter \WIDTH = 257
Generating RTLIL representation for module `$paramod\pseudo_rand\WIDTH=257'.

4.2.4. Analyzing design hierarchy..
Top module:  \top
Used module:     \clk_gate
Used module:     $paramod\pseudo_rand\WIDTH=257

4.2.5. Analyzing design hierarchy..
Top module:  \top
Used module:     \clk_gate
Used module:     $paramod\pseudo_rand\WIDTH=257
Removing unused module `\pseudo_rand'.
Removed 1 unused modules.
Mapping positional arguments of cell top.gen_clkP_IN_valid_a4 (clk_gate).
Mapping positional arguments of cell top.gen_clkP_IN_valid_a3 (clk_gate).
Mapping positional arguments of cell top.gen_clkP_IN_valid_a2 (clk_gate).
Mapping positional arguments of cell top.gen_clkP_IN_valid_a1 (clk_gate).
Mapping positional arguments of cell top.pseudo_rand ($paramod\pseudo_rand\WIDTH=257).

4.3. Executing PROC pass (convert processes to netlists).

4.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\top.$proc$top.tlv:42$27'.
Removing empty process `top.$proc$top.tlv:42$27'.
Cleaned up 1 empty switch.

4.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 21 assignments to connections.

4.3.4. Executing PROC_INIT pass (extract init attributes).

4.3.5. Executing PROC_ARST pass (detect async resets in processes).

4.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\pseudo_rand\WIDTH=257.$proc$pseudo_rand.sv:54$175'.
Creating decoders for process `$paramod\pseudo_rand\WIDTH=257.$proc$pseudo_rand_gen.sv:37$171'.
Creating decoders for process `$paramod\pseudo_rand\WIDTH=257.$proc$pseudo_rand_gen.sv:34$170'.
Creating decoders for process `\top.$proc$top_gen.sv:102$18'.
Creating decoders for process `\top.$proc$top_gen.sv:101$17'.
Creating decoders for process `\top.$proc$top_gen.sv:100$16'.
Creating decoders for process `\top.$proc$top_gen.sv:99$15'.
Creating decoders for process `\top.$proc$top_gen.sv:96$14'.
Creating decoders for process `\top.$proc$top_gen.sv:95$13'.
Creating decoders for process `\top.$proc$top_gen.sv:94$12'.
Creating decoders for process `\top.$proc$top_gen.sv:93$11'.
Creating decoders for process `\top.$proc$top_gen.sv:90$10'.
Creating decoders for process `\top.$proc$top_gen.sv:89$9'.
Creating decoders for process `\top.$proc$top_gen.sv:88$8'.
Creating decoders for process `\top.$proc$top_gen.sv:87$7'.
Creating decoders for process `\top.$proc$top_gen.sv:84$6'.
Creating decoders for process `\top.$proc$top_gen.sv:83$5'.
Creating decoders for process `\top.$proc$top_gen.sv:82$4'.
Creating decoders for process `\top.$proc$top_gen.sv:81$3'.
Creating decoders for process `\top.$proc$top_gen.sv:78$2'.
Creating decoders for process `\top.$proc$top_gen.sv:75$1'.

4.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\pseudo_rand\WIDTH=257.\SEED' from process `$paramod\pseudo_rand\WIDTH=257.$proc$pseudo_rand.sv:54$175'.

4.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\pseudo_rand\WIDTH=257.\DEFAULT_reset_a1' using process `$paramod\pseudo_rand\WIDTH=257.$proc$pseudo_rand_gen.sv:37$171'.
  created $dff cell `$procdff$176' with positive edge clock.
Creating register for signal `$paramod\pseudo_rand\WIDTH=257.\DEFAULT_lfsr_a2' using process `$paramod\pseudo_rand\WIDTH=257.$proc$pseudo_rand_gen.sv:34$170'.
  created $dff cell `$procdff$177' with positive edge clock.
Creating register for signal `\top.\IN_valid_a4' using process `\top.$proc$top_gen.sv:102$18'.
  created $dff cell `$procdff$178' with positive edge clock.
Creating register for signal `\top.\IN_valid_a3' using process `\top.$proc$top_gen.sv:101$17'.
  created $dff cell `$procdff$179' with positive edge clock.
Creating register for signal `\top.\IN_valid_a2' using process `\top.$proc$top_gen.sv:100$16'.
  created $dff cell `$procdff$180' with positive edge clock.
Creating register for signal `\top.\IN_valid_a1' using process `\top.$proc$top_gen.sv:99$15'.
  created $dff cell `$procdff$181' with positive edge clock.
Creating register for signal `\top.\IN_reset_a4' using process `\top.$proc$top_gen.sv:96$14'.
  created $dff cell `$procdff$182' with positive edge clock.
Creating register for signal `\top.\IN_reset_a3' using process `\top.$proc$top_gen.sv:95$13'.
  created $dff cell `$procdff$183' with positive edge clock.
Creating register for signal `\top.\IN_reset_a2' using process `\top.$proc$top_gen.sv:94$12'.
  created $dff cell `$procdff$184' with positive edge clock.
Creating register for signal `\top.\IN_reset_a1' using process `\top.$proc$top_gen.sv:93$11'.
  created $dff cell `$procdff$185' with positive edge clock.
Creating register for signal `\top.\IN_packet_in_a4' using process `\top.$proc$top_gen.sv:90$10'.
  created $dff cell `$procdff$186' with positive edge clock.
Creating register for signal `\top.\IN_packet_in_a3' using process `\top.$proc$top_gen.sv:89$9'.
  created $dff cell `$procdff$187' with positive edge clock.
Creating register for signal `\top.\IN_packet_in_a2' using process `\top.$proc$top_gen.sv:88$8'.
  created $dff cell `$procdff$188' with positive edge clock.
Creating register for signal `\top.\IN_packet_in_a1' using process `\top.$proc$top_gen.sv:87$7'.
  created $dff cell `$procdff$189' with positive edge clock.
Creating register for signal `\top.\IN_flit_a4' using process `\top.$proc$top_gen.sv:84$6'.
  created $dff cell `$procdff$190' with positive edge clock.
Creating register for signal `\top.\IN_flit_a3' using process `\top.$proc$top_gen.sv:83$5'.
  created $dff cell `$procdff$191' with positive edge clock.
Creating register for signal `\top.\IN_flit_a2' using process `\top.$proc$top_gen.sv:82$4'.
  created $dff cell `$procdff$192' with positive edge clock.
Creating register for signal `\top.\IN_flit_a1' using process `\top.$proc$top_gen.sv:81$3'.
  created $dff cell `$procdff$193' with positive edge clock.
Creating register for signal `\top.\IN_error_a5' using process `\top.$proc$top_gen.sv:78$2'.
  created $dff cell `$procdff$194' with positive edge clock.
Creating register for signal `\top.\IN_cnt_a1' using process `\top.$proc$top_gen.sv:75$1'.
  created $dff cell `$procdff$195' with positive edge clock.

4.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\pseudo_rand\WIDTH=257.$proc$pseudo_rand.sv:54$175'.
Removing empty process `$paramod\pseudo_rand\WIDTH=257.$proc$pseudo_rand_gen.sv:37$171'.
Removing empty process `$paramod\pseudo_rand\WIDTH=257.$proc$pseudo_rand_gen.sv:34$170'.
Removing empty process `top.$proc$top_gen.sv:102$18'.
Removing empty process `top.$proc$top_gen.sv:101$17'.
Removing empty process `top.$proc$top_gen.sv:100$16'.
Removing empty process `top.$proc$top_gen.sv:99$15'.
Removing empty process `top.$proc$top_gen.sv:96$14'.
Removing empty process `top.$proc$top_gen.sv:95$13'.
Removing empty process `top.$proc$top_gen.sv:94$12'.
Removing empty process `top.$proc$top_gen.sv:93$11'.
Removing empty process `top.$proc$top_gen.sv:90$10'.
Removing empty process `top.$proc$top_gen.sv:89$9'.
Removing empty process `top.$proc$top_gen.sv:88$8'.
Removing empty process `top.$proc$top_gen.sv:87$7'.
Removing empty process `top.$proc$top_gen.sv:84$6'.
Removing empty process `top.$proc$top_gen.sv:83$5'.
Removing empty process `top.$proc$top_gen.sv:82$4'.
Removing empty process `top.$proc$top_gen.sv:81$3'.
Removing empty process `top.$proc$top_gen.sv:78$2'.
Removing empty process `top.$proc$top_gen.sv:75$1'.
Cleaned up 0 empty switches.

4.4. Executing FLATTEN pass (flatten design).
Using template $paramod\pseudo_rand\WIDTH=257 for cells of type $paramod\pseudo_rand\WIDTH=257.
Using template clk_gate for cells of type clk_gate.
<suppressed ~5 debug messages>
No more expansions possible.
Deleting now unused module $paramod\pseudo_rand\WIDTH=257.
Deleting now unused module clk_gate.

4.5. Executing TRIBUF pass.

4.6. Executing DEMINOUT pass (demote inout ports to input or output).

4.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 26 unused wires.
<suppressed ~1 debug messages>

4.9. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

4.10. Executing OPT pass (performing simple optimizations).

4.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.10.9. Finished OPT passes. (There is nothing left to do.)

4.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell top.$add$top.tlv:23$19 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$add$top.tlv:23$19 ($add).
Removed top 30 bits (of 32) from mux cell top.$ternary$top.tlv:23$20 ($mux).
Removed top 31 bits (of 32) from mux cell top.$ternary$top.tlv:45$31 ($mux).
Removed top 26 bits (of 32) from port B of cell top.$gt$top.tlv:49$32 ($gt).
Removed top 27 bits (of 32) from port B of cell top.$gt$top.tlv:50$33 ($gt).
Removed top 249 bits (of 257) from port B of cell top.$techmap\pseudo_rand.$and$pseudo_rand.sv:63$172 ($and).
Removed top 1 bits (of 3) from port Y of cell top.$add$top.tlv:23$19 ($add).
Removed top 30 bits (of 32) from wire top.$add$top.tlv:23$19_Y.
Removed top 31 bits (of 32) from wire top.$logic_or$top.tlv:45$30_Y.
Removed top 1 bits (of 257) from wire top.pseudo_rand.DEFAULT_lfsr_a1.
Removed top 28 bits (of 257) from wire top.pseudo_rand.DEFAULT_lfsr_a2.
Removed top 49 bits (of 257) from wire top.pseudo_rand.rand_vect.

4.12. Executing PEEPOPT pass (run peephole optimizers).

4.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

4.14. Executing SHARE pass (SAT-based resource sharing).

4.15. Executing TECHMAP pass (map to technology primitives).

4.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.15.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~56 debug messages>

4.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$top.tlv:23$19 ($add).
  creating $alu model for $macc $add$top.tlv:23$19.
  creating $alu model for $gt$top.tlv:49$32 ($gt): new $alu
  creating $alu model for $gt$top.tlv:50$33 ($gt): new $alu
  creating $alu cell for $gt$top.tlv:50$33: $auto$alumacc.cc:485:replace_alu$203
  creating $alu cell for $gt$top.tlv:49$32: $auto$alumacc.cc:485:replace_alu$208
  creating $alu cell for $add$top.tlv:23$19: $auto$alumacc.cc:485:replace_alu$213
  created 3 $alu and 0 $macc cells.

4.19. Executing OPT pass (performing simple optimizations).

4.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

4.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.19.9. Finished OPT passes. (There is nothing left to do.)

4.20. Executing FSM pass (extract and optimize FSM).

4.20.1. Executing FSM_DETECT pass (finding FSMs in design).

4.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.21. Executing OPT pass (performing simple optimizations).

4.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.21.5. Finished fast OPT passes.

4.22. Executing MEMORY pass.

4.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

4.25. Executing TECHMAP pass (map to technology primitives).

4.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

4.25.2. Continuing TECHMAP pass.
No more expansions possible.

4.26. Executing ICE40_BRAMINIT pass.

4.27. Executing OPT pass (performing simple optimizations).

4.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~22 debug messages>

4.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 7 unused wires.
<suppressed ~3 debug messages>

4.27.5. Finished fast OPT passes.

4.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.29. Executing OPT pass (performing simple optimizations).

4.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.29.9. Finished OPT passes. (There is nothing left to do.)

4.30. Executing ICE40_WRAPCARRY pass (wrap carries).

4.31. Executing TECHMAP pass (map to technology primitives).

4.31.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.31.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

4.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~227 debug messages>

4.32. Executing OPT pass (performing simple optimizations).

4.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~132 debug messages>

4.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~99 debug messages>
Removed a total of 33 cells.

4.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 8 unused cells and 61 unused wires.
<suppressed ~9 debug messages>

4.32.5. Finished fast OPT passes.

4.33. Executing ICE40_OPT pass (performing simple optimizations).

4.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$203.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$203.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$208.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$203.BB [0]

4.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.33.4. Executing OPT_RMDFF pass (remove dff with constant values).

4.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 0 unused wires.
<suppressed ~1 debug messages>

4.33.6. Rerunning OPT passes. (Removed registers in this run.)

4.33.7. Running ICE40 specific optimizations.

4.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.33.10. Executing OPT_RMDFF pass (remove dff with constant values).

4.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.33.12. Finished OPT passes. (There is nothing left to do.)

4.34. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

4.35. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module top:

4.36. Executing TECHMAP pass (map to technology primitives).

4.36.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

4.36.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~348 debug messages>

4.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.39. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in top.

4.40. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in top.
  Merging $auto$simplemap.cc:277:simplemap_mux$281 (A=$add$top.tlv:23$19_Y [1], B=1'0, S=\reset) into $auto$simplemap.cc:420:simplemap_dff$702 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$280 (A=$add$top.tlv:23$19_Y [0], B=1'0, S=\reset) into $auto$simplemap.cc:420:simplemap_dff$701 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$719 (A=\RW_rand_raw [15], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$427 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$720 (A=\RW_rand_raw [16], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$428 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$721 (A=\RW_rand_raw [17], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$429 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$722 (A=\RW_rand_raw [18], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$430 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$723 (A=\RW_rand_raw [19], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$431 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$724 (A=\RW_rand_raw [20], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$432 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$725 (A=\RW_rand_raw [21], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$433 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$726 (A=\RW_rand_raw [22], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$434 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$727 (A=\RW_rand_raw [23], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$435 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$728 (A=\RW_rand_raw [24], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$436 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$729 (A=\RW_rand_raw [25], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$437 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$730 (A=\RW_rand_raw [26], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$438 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$731 (A=\RW_rand_raw [27], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$439 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$732 (A=\RW_rand_raw [28], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$440 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$733 (A=\RW_rand_raw [29], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$441 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$734 (A=\RW_rand_raw [30], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$442 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$735 (A=\RW_rand_raw [31], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$443 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$736 (A=\RW_rand_raw [32], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$444 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$737 (A=\RW_rand_raw [33], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$445 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$738 (A=\RW_rand_raw [34], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$446 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$739 (A=\RW_rand_raw [35], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$447 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$740 (A=\RW_rand_raw [36], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$448 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$741 (A=\RW_rand_raw [37], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$449 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$742 (A=\RW_rand_raw [38], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$450 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$743 (A=\RW_rand_raw [39], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$451 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$744 (A=\RW_rand_raw [40], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$452 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$745 (A=\RW_rand_raw [41], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$453 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$746 (A=\RW_rand_raw [42], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$454 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$747 (A=\RW_rand_raw [43], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$455 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$748 (A=\RW_rand_raw [44], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$456 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$749 (A=\RW_rand_raw [45], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$457 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$750 (A=\RW_rand_raw [46], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$458 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$751 (A=\RW_rand_raw [47], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$459 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$752 (A=\RW_rand_raw [48], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$460 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$753 (A=\RW_rand_raw [49], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$461 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$754 (A=\RW_rand_raw [50], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$462 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$755 (A=\RW_rand_raw [51], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$463 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$756 (A=\RW_rand_raw [52], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$464 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$757 (A=\RW_rand_raw [53], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$465 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$758 (A=\RW_rand_raw [54], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$466 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$759 (A=\RW_rand_raw [55], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$467 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$760 (A=\RW_rand_raw [56], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$468 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$761 (A=\RW_rand_raw [57], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$469 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$762 (A=\RW_rand_raw [58], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$470 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$763 (A=\RW_rand_raw [59], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$471 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$764 (A=\RW_rand_raw [60], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$472 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$765 (A=\RW_rand_raw [61], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$473 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$766 (A=\RW_rand_raw [62], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$474 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$767 (A=\RW_rand_raw [63], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$475 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$768 (A=\RW_rand_raw [64], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$476 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$769 (A=\RW_rand_raw [65], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$477 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$770 (A=\RW_rand_raw [66], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$478 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$771 (A=\RW_rand_raw [67], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$479 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$772 (A=\RW_rand_raw [68], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$480 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$773 (A=\RW_rand_raw [69], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$481 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$774 (A=\RW_rand_raw [70], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$482 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$775 (A=\RW_rand_raw [71], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$483 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$776 (A=\RW_rand_raw [72], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$484 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$777 (A=\RW_rand_raw [73], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$485 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$778 (A=\RW_rand_raw [74], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$486 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$779 (A=\RW_rand_raw [75], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$487 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$780 (A=\RW_rand_raw [76], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$488 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$781 (A=\RW_rand_raw [77], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$489 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$782 (A=\RW_rand_raw [78], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$490 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$783 (A=\RW_rand_raw [79], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$491 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$784 (A=\RW_rand_raw [80], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$492 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$785 (A=\RW_rand_raw [81], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$493 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$786 (A=\RW_rand_raw [82], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$494 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$787 (A=\RW_rand_raw [83], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$495 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$788 (A=\RW_rand_raw [84], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$496 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$789 (A=\RW_rand_raw [85], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$497 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$790 (A=\RW_rand_raw [86], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$498 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$791 (A=\RW_rand_raw [87], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$499 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$792 (A=\RW_rand_raw [88], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$500 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$793 (A=\RW_rand_raw [89], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$501 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$794 (A=\RW_rand_raw [90], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$502 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$795 (A=\RW_rand_raw [91], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$503 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$796 (A=\RW_rand_raw [92], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$504 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$797 (A=\RW_rand_raw [93], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$505 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$798 (A=\RW_rand_raw [94], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$506 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$799 (A=\RW_rand_raw [95], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$507 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$800 (A=\RW_rand_raw [96], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$508 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$801 (A=\RW_rand_raw [97], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$509 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$802 (A=\RW_rand_raw [98], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$510 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$803 (A=\RW_rand_raw [99], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$511 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$804 (A=\RW_rand_raw [100], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$512 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$805 (A=\RW_rand_raw [101], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$513 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$806 (A=\RW_rand_raw [102], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$514 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$807 (A=\RW_rand_raw [103], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$515 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$808 (A=\RW_rand_raw [104], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$516 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$809 (A=\RW_rand_raw [105], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$517 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$810 (A=\RW_rand_raw [106], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$518 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$811 (A=\RW_rand_raw [107], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$519 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$812 (A=\RW_rand_raw [108], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$520 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$813 (A=\RW_rand_raw [109], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$521 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$814 (A=\RW_rand_raw [110], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$522 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$815 (A=\RW_rand_raw [111], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$523 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$816 (A=\RW_rand_raw [112], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$524 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$817 (A=\RW_rand_raw [113], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$525 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$818 (A=\RW_rand_raw [114], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$526 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$819 (A=\RW_rand_raw [115], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$527 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$820 (A=\RW_rand_raw [116], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$528 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$821 (A=\RW_rand_raw [117], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$529 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$822 (A=\RW_rand_raw [118], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$530 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$823 (A=\RW_rand_raw [119], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$531 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$824 (A=\RW_rand_raw [120], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$532 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$825 (A=\RW_rand_raw [121], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$533 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$826 (A=\RW_rand_raw [122], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$534 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$827 (A=\RW_rand_raw [123], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$535 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$828 (A=\RW_rand_raw [124], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$536 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$829 (A=\RW_rand_raw [125], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$537 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$830 (A=\RW_rand_raw [126], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$538 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$831 (A=\RW_rand_raw [127], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$539 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$832 (A=\RW_rand_raw [128], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$540 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$833 (A=\RW_rand_raw [129], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$541 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$834 (A=\RW_rand_raw [130], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$542 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$835 (A=\RW_rand_raw [131], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$543 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$836 (A=\RW_rand_raw [132], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$544 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$837 (A=\RW_rand_raw [133], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$545 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$838 (A=\RW_rand_raw [134], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$546 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$839 (A=\RW_rand_raw [135], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$547 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$840 (A=\RW_rand_raw [136], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$548 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$841 (A=\RW_rand_raw [137], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$549 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$842 (A=\RW_rand_raw [138], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$550 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$843 (A=\RW_rand_raw [139], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$551 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$844 (A=\RW_rand_raw [140], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$552 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$845 (A=\RW_rand_raw [141], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$553 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$846 (A=\RW_rand_raw [142], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$554 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$847 (A=\RW_rand_raw [143], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$555 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$848 (A=\RW_rand_raw [144], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$556 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$849 (A=\RW_rand_raw [145], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$557 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$850 (A=\RW_rand_raw [146], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$558 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$851 (A=\RW_rand_raw [147], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$559 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$852 (A=\RW_rand_raw [148], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$560 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$853 (A=\RW_rand_raw [149], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$561 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$854 (A=\RW_rand_raw [150], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$562 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$855 (A=\RW_rand_raw [151], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$563 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$856 (A=\RW_rand_raw [152], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$564 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$857 (A=\RW_rand_raw [153], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$565 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$858 (A=\RW_rand_raw [154], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$566 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$859 (A=\RW_rand_raw [155], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$567 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$860 (A=\RW_rand_raw [156], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$568 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$861 (A=\RW_rand_raw [157], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$569 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$862 (A=\RW_rand_raw [158], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$570 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$863 (A=\RW_rand_raw [159], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$571 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$864 (A=\RW_rand_raw [160], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$572 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$865 (A=\RW_rand_raw [161], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$573 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$866 (A=\RW_rand_raw [162], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$574 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$867 (A=\RW_rand_raw [163], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$575 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$868 (A=\RW_rand_raw [164], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$576 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$869 (A=\RW_rand_raw [165], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$577 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$870 (A=\RW_rand_raw [166], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$578 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$871 (A=\RW_rand_raw [167], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$579 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$872 (A=\RW_rand_raw [168], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$580 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$873 (A=\RW_rand_raw [169], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$581 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$874 (A=\RW_rand_raw [170], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$582 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$875 (A=\RW_rand_raw [171], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$583 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$876 (A=\RW_rand_raw [172], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$584 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$877 (A=\RW_rand_raw [173], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$585 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$878 (A=\RW_rand_raw [174], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$586 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$879 (A=\RW_rand_raw [175], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$587 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$880 (A=\RW_rand_raw [176], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$588 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$881 (A=\RW_rand_raw [177], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$589 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$882 (A=\RW_rand_raw [178], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$590 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$883 (A=\RW_rand_raw [179], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$591 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$884 (A=\RW_rand_raw [180], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$592 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$885 (A=\RW_rand_raw [181], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$593 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$886 (A=\RW_rand_raw [182], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$594 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$887 (A=\RW_rand_raw [183], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$595 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$888 (A=\RW_rand_raw [184], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$596 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$889 (A=\RW_rand_raw [185], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$597 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$890 (A=\RW_rand_raw [186], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$598 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$891 (A=\RW_rand_raw [187], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$599 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$892 (A=\RW_rand_raw [188], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$600 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$893 (A=\RW_rand_raw [189], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$601 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$894 (A=\RW_rand_raw [190], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$602 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$895 (A=\RW_rand_raw [191], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$603 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$896 (A=\RW_rand_raw [192], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$604 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$897 (A=\RW_rand_raw [193], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$605 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$898 (A=\RW_rand_raw [194], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$606 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$899 (A=\RW_rand_raw [195], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$607 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$900 (A=\RW_rand_raw [196], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$608 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$901 (A=\RW_rand_raw [197], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$609 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$902 (A=\RW_rand_raw [198], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$610 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$903 (A=\RW_rand_raw [199], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$611 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$904 (A=\RW_rand_raw [200], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$612 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$905 (A=\RW_rand_raw [201], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$613 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$906 (A=\RW_rand_raw [202], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$614 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$907 (A=\RW_rand_raw [203], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$615 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$908 (A=\RW_rand_raw [204], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$616 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$909 (A=\RW_rand_raw [205], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$617 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$910 (A=\RW_rand_raw [206], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$618 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$911 (A=\RW_rand_raw [207], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$619 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$912 (A=\RW_rand_raw [208], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$620 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$913 (A=\RW_rand_raw [209], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$621 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$914 (A=\RW_rand_raw [210], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$622 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$915 (A=\RW_rand_raw [211], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$623 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$916 (A=\RW_rand_raw [212], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$624 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$917 (A=\RW_rand_raw [213], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$625 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$918 (A=\RW_rand_raw [214], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$626 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$919 (A=\RW_rand_raw [215], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$627 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$920 (A=\RW_rand_raw [216], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$628 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$921 (A=\RW_rand_raw [217], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$629 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$922 (A=\RW_rand_raw [218], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$630 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$923 (A=\RW_rand_raw [219], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$631 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$924 (A=\RW_rand_raw [220], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$632 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$925 (A=\RW_rand_raw [221], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$633 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$926 (A=\RW_rand_raw [222], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$634 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$927 (A=\RW_rand_raw [223], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$635 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$928 (A=\RW_rand_raw [224], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$636 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$929 (A=\RW_rand_raw [225], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$637 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$930 (A=\RW_rand_raw [226], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$638 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$931 (A=\RW_rand_raw [227], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$639 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$932 (A=\RW_rand_raw [228], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$640 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$933 (A=\RW_rand_raw [229], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$641 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$934 (A=\RW_rand_raw [230], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$642 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$935 (A=\RW_rand_raw [231], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$643 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$936 (A=\RW_rand_raw [232], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$644 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$937 (A=\RW_rand_raw [233], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$645 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$938 (A=\RW_rand_raw [234], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$646 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$939 (A=\RW_rand_raw [235], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$647 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$940 (A=\RW_rand_raw [236], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$648 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$941 (A=\RW_rand_raw [237], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$649 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$942 (A=\RW_rand_raw [238], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$650 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$943 (A=\RW_rand_raw [239], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$651 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$944 (A=\RW_rand_raw [240], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$652 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$945 (A=\RW_rand_raw [241], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$653 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$946 (A=\RW_rand_raw [242], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$654 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$947 (A=\RW_rand_raw [243], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$655 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$948 (A=\RW_rand_raw [244], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$656 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$949 (A=\RW_rand_raw [245], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$657 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$950 (A=\RW_rand_raw [246], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$658 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$951 (A=\RW_rand_raw [247], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$659 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$952 (A=\RW_rand_raw [248], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$660 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$953 (A=\RW_rand_raw [249], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$661 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$954 (A=\RW_rand_raw [250], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$662 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$955 (A=\RW_rand_raw [251], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$663 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$956 (A=\RW_rand_raw [252], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$664 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$957 (A=\RW_rand_raw [253], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$665 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$958 (A=\RW_rand_raw [254], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$666 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$703 (A=\RW_rand_raw [256], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$411 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$704 (A=\RW_rand_raw [0], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$412 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$705 (A=$auto$opt_expr.cc:190:group_cell_inputs$222 [1], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$413 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$706 (A=\RW_rand_raw [2], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$414 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$707 (A=\RW_rand_raw [3], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$415 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$708 (A=\RW_rand_raw [4], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$416 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$709 (A=$auto$opt_expr.cc:190:group_cell_inputs$222 [5], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$417 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$710 (A=$auto$opt_expr.cc:190:group_cell_inputs$222 [6], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$418 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$711 (A=\RW_rand_raw [7], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$419 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$712 (A=\RW_rand_raw [8], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$420 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$713 (A=\RW_rand_raw [9], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$421 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$714 (A=\RW_rand_raw [10], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$422 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$715 (A=\RW_rand_raw [11], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$423 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$716 (A=\RW_rand_raw [12], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$424 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$717 (A=\RW_rand_raw [13], B=1'1, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$425 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$718 (A=\RW_rand_raw [14], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$426 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$959 (A=\RW_rand_raw [255], B=1'0, S=\IN_reset_a1) into $auto$simplemap.cc:420:simplemap_dff$667 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$342 (A=$auto$wreduce.cc:460:run$197 [0], B=1'0, S=\IN_reset_a4) into $auto$simplemap.cc:420:simplemap_dff$700 (SB_DFF).

4.41. Executing ICE40_OPT pass (performing simple optimizations).

4.41.1. Running ICE40 specific optimizations.

4.41.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~108 debug messages>

4.41.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.41.4. Executing OPT_RMDFF pass (remove dff with constant values).

4.41.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 257 unused cells and 1046 unused wires.
<suppressed ~259 debug messages>

4.41.6. Rerunning OPT passes. (Removed registers in this run.)

4.41.7. Running ICE40 specific optimizations.

4.41.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.41.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.41.10. Executing OPT_RMDFF pass (remove dff with constant values).

4.41.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.41.12. Finished OPT passes. (There is nothing left to do.)

4.42. Executing TECHMAP pass (map to technology primitives).

4.42.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

4.42.2. Continuing TECHMAP pass.
No more expansions possible.

4.43. Executing ABC pass (technology mapping using ABC).

4.43.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 93 gates and 188 wires to a netlist network with 93 inputs and 45 outputs.

4.43.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      57.
ABC: Participating nodes from both networks       =     114.
ABC: Participating nodes from the first network   =      56. (  83.58 % of nodes)
ABC: Participating nodes from the second network  =      58. (  86.57 % of nodes)
ABC: Node pairs (any polarity)                    =      56. (  83.58 % of names can be moved)
ABC: Node pairs (same polarity)                   =      45. (  67.16 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

4.43.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       66
ABC RESULTS:        internal signals:       50
ABC RESULTS:           input signals:       93
ABC RESULTS:          output signals:       45
Removing temp directory.

4.44. Executing ICE40_WRAPCARRY pass (wrap carries).

4.45. Executing TECHMAP pass (map to technology primitives).

4.45.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

4.45.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 62 unused cells and 123 unused wires.

4.46. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       66
  1-LUT               34
  2-LUT                7
  3-LUT               15
  4-LUT               10

Eliminating LUTs.
Number of LUTs:       66
  1-LUT               34
  2-LUT                7
  3-LUT               15
  4-LUT               10

Combining LUTs.
Number of LUTs:       66
  1-LUT               34
  2-LUT                7
  3-LUT               15
  4-LUT               10

Eliminated 0 LUTs.
Combined 0 LUTs.
<suppressed ~272 debug messages>

4.47. Executing TECHMAP pass (map to technology primitives).

4.47.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.47.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10100011 for cells of type $lut.
No more expansions possible.
<suppressed ~248 debug messages>
Removed 0 unused cells and 132 unused wires.

4.48. Executing AUTONAME pass.
Renamed 911 objects in module top (11 iterations).
<suppressed ~539 debug messages>

4.49. Executing HIERARCHY pass (managing design hierarchy).

4.49.1. Analyzing design hierarchy..
Top module:  \top

4.49.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

4.50. Printing statistics.

=== top ===

   Number of wires:                129
   Number of wire bits:           1627
   Number of public wires:         129
   Number of public wire bits:    1627
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                476
     SB_CARRY                       62
     SB_DFF                         88
     SB_DFFSR                      152
     SB_DFFSS                      108
     SB_LUT4                        66

4.51. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

4.52. Executing BLIF backend.

4.53. Executing JSON backend.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 8f7a40e798, CPU: user 2.74s system 0.13s, MEM: 36.58 MB peak
Yosys 0.9+1706 (git sha1 7cc9d487, clang 7.0.1-8+rpi3+deb10u2 -fPIC -Os)
Time spent: 19% 18x opt_clean (0 sec), 18% 13x read_verilog (0 sec), ...
